using System;
using System.Collections.Generic;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Ferretto.VW.App.Keyboards
{
    // <auto-generated> <- this will prevent CodeMaid from formatting this document
    public partial class KeyboardButton : UserControl
    {
        #region Fields

        public static readonly DependencyPropertyKey CurrentCommandPropertyKey =
                                    DependencyProperty.RegisterReadOnly(nameof(CurrentCommand), typeof(KeyboardKeyCommand), typeof(KeyboardButton), null);

        public static readonly DependencyProperty CurrentCommandProperty = CurrentCommandPropertyKey.DependencyProperty;

        public static readonly DependencyProperty IsInShiftModeProperty =
                    DependencyProperty.Register(nameof(IsInShiftMode), typeof(bool), typeof(KeyboardButton), new PropertyMetadata(false, OnIsInShiftModePropertyChanged));

        public static readonly DependencyProperty KeyProperty =
            DependencyProperty.Register(nameof(Key), typeof(KeyboardKey), typeof(KeyboardButton), new PropertyMetadata(OnKeyPropertyChanged));

        #endregion

        #region Constructors

        public KeyboardButton()
        {
            this.InitializeComponent();
        }

        #endregion

        #region Properties

        public KeyboardKeyCommand CurrentCommand
        {
            get => (KeyboardKeyCommand)this.GetValue(CurrentCommandProperty);
            private set => this.SetValue(CurrentCommandPropertyKey, value);
        }

        public bool IsInShiftMode
        {
            get => (bool)this.GetValue(IsInShiftModeProperty);
            set => this.SetValue(IsInShiftModeProperty, value);
        }

        public KeyboardKey Key
        {
            get => (KeyboardKey)this.GetValue(KeyProperty);
            set => this.SetValue(KeyProperty, value);
        }

        #endregion

        #region Methods

        private static void OnIsInShiftModePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            ((KeyboardButton)d).SynchronizeLayout();
        }

        private static void OnKeyPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            ((KeyboardButton)d).SynchronizeLayout();
        }

        private void Btn_Click(object sender, RoutedEventArgs e)
        {
            this.CurrentCommand?.SendKeys();
        }

        private void SynchronizeLayout()
        {
            KeyboardKeyCommand command = default;

            if (this.Key?.Command != null)
            {
                command = this.Key.Command;

                if (this.IsInShiftMode && this.Key?.ShiftCommand != null)
                {
                    command = this.Key.ShiftCommand;
                }
            }

            this.CurrentCommand = command;
        }

        #endregion
    }
}
