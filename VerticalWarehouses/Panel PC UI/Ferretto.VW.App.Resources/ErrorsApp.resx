<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CalibrationBarierError" xml:space="preserve">
    <value>The support cannot be more than 1 mm</value>
  </data>
  <data name="CellSide" xml:space="preserve">
    <value>Cell Side</value>
  </data>
  <data name="CheckUnit" xml:space="preserve">
    <value>Verifica cassetto:</value>
  </data>
  <data name="CurrentCell" xml:space="preserve">
    <value>Current cell</value>
  </data>
  <data name="DetailCode" xml:space="preserve">
    <value>Detail Code</value>
  </data>
  <data name="Displacement" xml:space="preserve">
    <value>Displacement (mm)</value>
  </data>
  <data name="DrawerIdentificationCompleted" xml:space="preserve">
    <value>Drawer identification completed, switch to automatic mode.</value>
  </data>
  <data name="DrawerIdentificationCompletedManual" xml:space="preserve">
    <value>Drawer identification completed, switch to manual mode.</value>
  </data>
  <data name="DrawerReturn" xml:space="preserve">
    <value>Return Drawer</value>
  </data>
  <data name="DrawerSelection" xml:space="preserve">
    <value>Drawer selection</value>
  </data>
  <data name="ErrorCode" xml:space="preserve">
    <value>Error Code</value>
    <comment>Label</comment>
  </data>
  <data name="ErrorDescription" xml:space="preserve">
    <value>Error Description</value>
    <comment>Label</comment>
  </data>
  <data name="ErrorReason" xml:space="preserve">
    <value>Error Reason</value>
    <comment>Label</comment>
  </data>
  <data name="ErrorRecoveryProcedure" xml:space="preserve">
    <value>Error recovery</value>
    <comment>Label</comment>
  </data>
  <data name="FirstSeen" xml:space="preserve">
    <value>First Seen</value>
    <comment>Label</comment>
  </data>
  <data name="Forwards" xml:space="preserve">
    <value>Forwards</value>
  </data>
  <data name="HighPosition" xml:space="preserve">
    <value>Postazione alta</value>
  </data>
  <data name="Id" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="InitialPosition" xml:space="preserve">
    <value>Initial position [mm]</value>
  </data>
  <data name="InvalidUnit" xml:space="preserve">
    <value>Invalid unit, insert: </value>
  </data>
  <data name="Inverter" xml:space="preserve">
    <value>Inverter</value>
  </data>
  <data name="InverterFaultErrorRestore" xml:space="preserve">
    <value>Errore restore INVERTER FAULT</value>
  </data>
  <data name="LowPosition" xml:space="preserve">
    <value>Postazione bassa</value>
  </data>
  <data name="MarkAsResolved" xml:space="preserve">
    <value>Mark as resolved</value>
    <comment>Action</comment>
  </data>
  <data name="SelectUnitOnElevator" xml:space="preserve">
    <value>Select the unit id on the elevator.</value>
  </data>
  <data name="UnitOnElevator" xml:space="preserve">
    <value>Unit on elevator</value>
  </data>
  <data name="UnitSelectBay1" xml:space="preserve">
    <value>Unit selection (Bay 1):</value>
  </data>
  <data name="UnitSelectBay2" xml:space="preserve">
    <value>Unit selection (Bay 2):</value>
  </data>
  <data name="UnitSelectBay3" xml:space="preserve">
    <value>Unit selection (Bay 3):</value>
  </data>
  <data name="UnitSelectIdBay" xml:space="preserve">
    <value>Select the id of the unit/s present in the bay.</value>
  </data>
</root>