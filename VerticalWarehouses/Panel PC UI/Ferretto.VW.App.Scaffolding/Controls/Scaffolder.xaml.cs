using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using Ferretto.VW.App.Controls;
using Ferretto.VW.App.Scaffolding.Services;
using Ferretto.VW.MAS.Scaffolding.DataAnnotations;

// <auto-generated>
namespace Ferretto.VW.App.Scaffolding.Controls
{
    /// <summary>
    /// Interaction logic for Scaffolder.xaml
    /// </summary>
    [DefaultEvent(nameof(Commit))]
    public partial class Scaffolder : UserControl, ICommandSource
    {
        #region Fields

        public static readonly DependencyProperty CommandParameterProperty =
                        DependencyProperty.Register(
                        "CommandParameter",
                        typeof(object),
                        typeof(Scaffolder),
                        new FrameworkPropertyMetadata(default));

        public static readonly DependencyProperty CommandProperty =
                DependencyProperty.Register(
                        "Command",
                        typeof(ICommand),
                        typeof(Scaffolder),
                        new FrameworkPropertyMetadata(default(ICommand)));

        public static readonly DependencyProperty CommandTargetProperty =
                DependencyProperty.Register(
                        "CommandTarget",
                        typeof(IInputElement),
                        typeof(Scaffolder),
                        new FrameworkPropertyMetadata(default(IInputElement)));

        public static readonly DependencyProperty EditingEntityProperty
            = DependencyProperty.Register("EditingEntity", typeof(Models.ScaffoldedEntity), typeof(Scaffolder));

        public static readonly DependencyProperty EntitiesProperty
            = DependencyProperty.Register("Entities", typeof(ObservableCollection<Models.ScaffoldedEntity>), typeof(Scaffolder));

        public static readonly DependencyProperty FocusStructureProperty
            = DependencyProperty.Register("FocusStructure", typeof(Models.ScaffoldedStructure), typeof(Scaffolder), new PropertyMetadata(OnFocusStructurePropertyChanged));

        public static readonly DependencyProperty IsBusyProperty =
            DependencyProperty.Register(nameof(IsBusy), typeof(bool), typeof(Scaffolder), new PropertyMetadata(false));

        public static readonly DependencyProperty ModelProperty
                            = DependencyProperty.Register("Model", typeof(object), typeof(Scaffolder), new PropertyMetadata(OnModelPropertyChanged));

        public static readonly DependencyProperty JsonModelProperty
                            = DependencyProperty.Register("JsonModel", typeof(object), typeof(Scaffolder), new PropertyMetadata(OnJsonModelPropertyChanged));

        public static readonly DependencyProperty SearchTextProperty
                    = DependencyProperty.Register("SearchText", typeof(string), typeof(Scaffolder), new PropertyMetadata(OnSearchTextPropertyChanged));

        public static readonly DependencyProperty StructuresProperty
            = DependencyProperty.Register("Structures", typeof(ObservableCollection<Models.ScaffoldedStructure>), typeof(Scaffolder));

        private const string CATEGORY_SEPARATOR = "/";

        private static readonly DependencyPropertyKey BreadcrumbPropertyKey
            = DependencyProperty.RegisterReadOnly(nameof(Breadcrumb), typeof(ObservableCollection<Models.ScaffoldedStructure>), typeof(Scaffolder), new PropertyMetadata(new ObservableCollection<Models.ScaffoldedStructure>()));

        public static readonly DependencyProperty BreadcrumbProperty = BreadcrumbPropertyKey.DependencyProperty;

        private static readonly DependencyPropertyKey IsNavigatingPropertyKey
                = DependencyProperty.RegisterReadOnly(nameof(IsNavigating), typeof(bool), typeof(Scaffolder), new PropertyMetadata(false));

        public static readonly DependencyProperty IsNavigatingProperty = IsNavigatingPropertyKey.DependencyProperty;

        private readonly List<ScaffoldedEntityDataTableItem> _elasticDataTable = new List<ScaffoldedEntityDataTableItem>();

        private Models.ScaffoldedStructure _model = null;

        private Models.ScaffoldedStructure _jsonModel = null;

        private Models.ScaffoldedStructure _navigationRoot = null;

        #endregion

        #region Constructors

        public Scaffolder()
        {
            this.InitializeComponent();
        }

        #endregion

        #region Events

        public event EventHandler Commit;

        #endregion

        #region Properties

        public ObservableCollection<Models.ScaffoldedStructure> Breadcrumb
        {
            get => (ObservableCollection<Models.ScaffoldedStructure>)this.GetValue(BreadcrumbProperty);
            private set => this.SetValue(BreadcrumbPropertyKey, value);
        }

        [Bindable(true)]
        public ICommand Command
        {
            get => (ICommand)this.GetValue(CommandProperty);
            set => this.SetValue(CommandProperty, value);
        }

        [Bindable(true)]
        public object CommandParameter
        {
            get => this.GetValue(CommandParameterProperty);
            set => this.SetValue(CommandParameterProperty, value);
        }

        [Bindable(true)]
        public IInputElement CommandTarget
        {
            get => (IInputElement)this.GetValue(CommandTargetProperty);
            set => this.SetValue(CommandTargetProperty, value);
        }

        public Models.ScaffoldedEntity EditingEntity
        {
            get => (Models.ScaffoldedEntity)this.GetValue(EditingEntityProperty);
            set => this.SetValue(EditingEntityProperty, value);
        }

        public ObservableCollection<Models.ScaffoldedEntity> Entities
        {
            get => (ObservableCollection<Models.ScaffoldedEntity>)this.GetValue(EntitiesProperty);
            set => this.SetValue(EntitiesProperty, value);
        }

        public Models.ScaffoldedStructure FocusStructure
        {
            get => (Models.ScaffoldedStructure)this.GetValue(FocusStructureProperty);
            set => this.SetValue(FocusStructureProperty, value);
        }

        public bool IsBusy
        {
            get => (bool)this.GetValue(IsBusyProperty);
            set => this.SetValue(IsBusyProperty, value);
        }

        public bool IsNavigating
        {
            get => (bool)this.GetValue(IsNavigatingProperty);
            private set => this.SetValue(IsNavigatingPropertyKey, value);
        }

        public object Model
        {
            get => this.GetValue(ModelProperty);
            set => this.SetValue(ModelProperty, value);
        }

        public object JsonModel
        {
            get => this.GetValue(JsonModelProperty);
            set => this.SetValue(JsonModelProperty, value);
        }

        public string SearchText
        {
            get => (string)this.GetValue(SearchTextProperty);
            set => this.SetValue(SearchTextProperty, value);
        }

        public ObservableCollection<Models.ScaffoldedStructure> Structures
        {
            get => (ObservableCollection<Models.ScaffoldedStructure>)this.GetValue(StructuresProperty);
            set => this.SetValue(StructuresProperty, value);
        }

        #endregion

        #region Methods

        public void SelectCategory(object sender, EventArgs e)
        {
            var context = ((FrameworkElement)sender).DataContext as Models.ScaffoldedStructure;
            this.SetValue(FocusStructureProperty, context);
        }

        private static void OnFocusStructurePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
            => ((Scaffolder)d).OnFocusStructureChanged(e);

        private static void OnModelPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
            => ((Scaffolder)d).OnModelChanged(e);

        private static void OnJsonModelPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
            => ((Scaffolder)d).OnJsonModelChanged(e);

        private static void OnSearchTextPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
            => ((Scaffolder)d).OnSearchTextChanged(e);

        public void Back()
        {
            var breadcrumb = this.Breadcrumb;
            if (breadcrumb?.Count >= 2)
            {
                this.FocusStructure = breadcrumb[breadcrumb.Count - 2];
            }
            else
            {
                this.FocusStructure = this._navigationRoot;
            }
        }

        private void Back_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(this.SearchText))
            {
                this.SearchText = default;
            }
            else
            {
                this.Back();
            }
        }

        private void BuildUpElasticDataTable(Models.ScaffoldedStructure branch, Models.ScaffoldedStructure jsonBranch = null, string category = default)
        {
            foreach (var entity in branch.Entities)
            {
                var jsonEntity = jsonBranch.Entities.First(e => e.Id == entity.Id);

                object originalValue = null;
                object jsonlValue = null;
                if (entity.Instance != null)
                {
                    originalValue = entity.Property.GetValue(entity.Instance);
                    jsonlValue = jsonEntity.Property.GetValue(jsonEntity.Instance);
                }

                entity.DifferentFromJson = originalValue?.ToString() != jsonlValue?.ToString();

                this._elasticDataTable.Add(new ScaffoldedEntityDataTableItem
                {
                    Entity = entity,
                    FullCategory = string.Concat(category, string.IsNullOrEmpty(category) ? default : CATEGORY_SEPARATOR, entity.DisplayName()).Trim(),
                    Id = entity.Id,
                    OriginalValue = originalValue,
                    JsonValue = jsonlValue,
                    Tags = new[] { entity.DisplayName(), category }.Union(entity.Metadata.OfType<TagAttribute>().Select(t => t.Tag())).Where(t => !string.IsNullOrEmpty(t))
                });
            }

            foreach (var child in branch.Children)
            {
                this.BuildUpElasticDataTable(child, jsonBranch.Children.First(c => c.Id == child.Id), string.Concat(category, CATEGORY_SEPARATOR, child.Category).Trim());
            }
        }

        private void Edit_Click(object sender, RoutedEventArgs e)
        {
            this.TryEdit(((Button)sender).DataContext as Models.ScaffoldedEntity);
        }

        private void Editor_Commit(object sender, CommitEventArgs e)
        {
            var entity = this.EditingEntity;
            if (entity != null)
            {
                var value = entity.Property.GetValue(entity.Instance);
                if (value != e.Value && (value?.Equals(e.Value) != true))
                {
                    var t = Nullable.GetUnderlyingType(entity.Property.PropertyType) ?? entity.Property.PropertyType;
                    var safeValue = (e.Value == null) ? null : Convert.ChangeType(e.Value, t, Ferretto.VW.App.Resources.Localized.Instance.CurrentCulture);
                    entity.Property.SetValue(entity.Instance, safeValue);

                    // trigger property change
                    CollectionViewSource.GetDefaultView(this.Entities).Refresh();
                    // broadcast commit
                    this.OnCommit(EventArgs.Empty);
                }
            }

            // reset the editing entity
            this.EditingEntity = null;
        }

        private void ListView_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (e.OriginalSource is ListView lv && lv.AreAnyTouchesOver)
            {
                this.TryEdit(((ListView)sender).SelectedItem as Models.ScaffoldedEntity);
            }
        }

        private void ListViewItem_DblClick(object sender, RoutedEventArgs e)
            => this.TryEditIfSelected(e.OriginalSource as DependencyObject);

        private void ListViewItem_PreviewTouchDown(object sender, TouchEventArgs e)
            => this.TryEditIfSelected(e.OriginalSource as DependencyObject);

        private void TryEditIfSelected(DependencyObject d)
        {
            var listViewItem = d?.FindAncestor<ListViewItem>();
            if (listViewItem?.IsSelected == true)
            {
                // e.Handled = true;
                this.TryEdit(listViewItem.DataContext as Models.ScaffoldedEntity);
            }
        }

        private void OnCommit(EventArgs e)
        {
            this.Commit?.Invoke(this, e);
            var argument = this.CommandParameter ?? this.Model;
            if (this.Command != null && this.Command.CanExecute(argument))
            {
                this.Command.Execute(argument);
            }
        }

        private async void OnFocusStructureChanged(DependencyPropertyChangedEventArgs e)
        {
            var current = e.NewValue as Models.ScaffoldedStructure;
            this.Entities = new ObservableCollection<Models.ScaffoldedEntity>(current?.Entities.AsEnumerable() ?? Array.Empty<Models.ScaffoldedEntity>());
            this.Structures = new ObservableCollection<Models.ScaffoldedStructure>(current?.Children.AsEnumerable() ?? Array.Empty<Models.ScaffoldedStructure>());


            // navigating? (aka: deeper than the root?)
            var navigating = this.IsNavigating = current != this._navigationRoot;

            // breadcrumb
            if (!navigating)
            {
                this.Breadcrumb.Clear();
            }
            else
            {
                var ndx = this.Breadcrumb.IndexOf(current);
                if (ndx == -1)
                {
                    this.Breadcrumb.Add(current);
                }
                else
                {
                    for (var j = this.Breadcrumb.Count - 1; j > ndx; j--)
                    {
                        this.Breadcrumb.RemoveAt(j);
                    }
                }
            }
        }

        private void OnJsonModelChanged(DependencyPropertyChangedEventArgs e)
        {
            this.SearchText = default;
            var model = e.NewValue;

            this._jsonModel = model?.Scaffold();
        }

        private void OnModelChanged(DependencyPropertyChangedEventArgs e)
        {
            this.SearchText = default;
            var model = e.NewValue;


            this._model = model?.Scaffold();

            // save the current breadcrumb to avoid towards-root navigation.
            // try to stay in the current node.
            var currentBreadcrumb = (this.Breadcrumb?.Select(c => c.Id) ?? Array.Empty<int>()).ToArray();

            // now clear the breadcrumb.
            this.Breadcrumb.Clear();
            this.RebuildElasticDataTable();


            if (model == null)
            {
                this.FocusStructure = this._navigationRoot = null;
            }
            else
            {
                var structureUnion = new[]{
                    new Models.ScaffoldedStructure(Scaffolding.Resources.UI.ResourceManager.GetString("All", VW.App.Resources.Localized.Instance.CurrentCulture),
                    this._elasticDataTable.OrderBy(i => i.Entity.Id).Select(i => new Models.ScaffoldedEntity( i.Entity.Property, i.Entity.Instance, i.Entity.Metadata, i.Id, i.FullCategory)),
                    Array.Empty<Models.ScaffoldedStructure>())
                    {
                        Description = Scaffolding.Resources.UI.ResourceManager.GetString("AllDescription", VW.App.Resources.Localized.Instance.CurrentCulture),
                        Id = 0
                    }
                }.Union(this._model.Children).OrderBy(o => o.Id);

                this._navigationRoot = new Models.ScaffoldedStructure(
                    Ferretto.VW.App.Scaffolding.Resources.UI.ResourceManager.GetString("Root", VW.App.Resources.Localized.Instance.CurrentCulture),
                    Array.Empty<Models.ScaffoldedEntity>(),
                    structureUnion);

                // now, try to
                var position = this._navigationRoot;
                foreach (var step in currentBreadcrumb)
                {
                    var next = position.Children.Where(c => c.Id == step).SingleOrDefault();
                    if (next == null)
                    {
                        break;
                    }
                    else
                    {
                        this.Breadcrumb.Add(next);
                        position = next;
                    }
                }
                this.FocusStructure = position;
            }
        }

        private void OnSearchTextChanged(DependencyPropertyChangedEventArgs e)
        {
            var searchText = (string)e.NewValue;

            var wasAlreadySearching = !string.IsNullOrEmpty((string)e.OldValue);
            var isStillSearching = !string.IsNullOrEmpty(searchText);

            if (isStillSearching)
            {
                // prepare new focusstruct
                var query = this.FocusStructure.Entities
                    .Join(this._elasticDataTable, entity => entity.Id, tableItem => tableItem.Id, (_, t) => t)
                    .Where(i =>
                    {
                        if (int.TryParse(searchText, out var id))
                        {
                            return i.Id == id;
                        }
                        return i.FullCategory.ToLowerInvariant().Contains(searchText.ToLowerInvariant());
                    })
                    .Select(i => new Models.ScaffoldedEntity(i.Entity.Property, i.Entity.Instance, i.Entity.Metadata, i.Id /*, i.FullCategory*/));

                if (wasAlreadySearching)
                {
                    var breadcrumb = this.Breadcrumb;
                    // remove last search (in order to replace it as the `FocusStructure` property changes).
                    breadcrumb.RemoveAt(breadcrumb.Count - 1);
                }

                // exec
                this.FocusStructure = new Models.ScaffoldedStructure($"\"{searchText}\"", query, Array.Empty<Models.ScaffoldedStructure>());
            }
            else
            {
                this.Back();
            }
        }

        private void RebuildElasticDataTable()
        {
            this._elasticDataTable.Clear();
            if (this._model != null && this._jsonModel != null)
            {
                this.BuildUpElasticDataTable(this._model, this._jsonModel);
            }
        }

        private void Reset_Click(object sender, RoutedEventArgs e)
        {
            this.ResetNavigation();
        }

        public void ResetNavigation()
        {
            this.EditingEntity = null;
            if (!string.IsNullOrEmpty(this.SearchText))
            {
                this.SearchText = default;
            }
            else
            {
                this.FocusStructure = this._navigationRoot;
            }
        }

        private void TryEdit(Models.ScaffoldedEntity entity)
        {
            if (entity?.IsEditable() == true && !this.IsBusy)
            {
                this.EditingEntity = entity;
            }
        }

        #endregion

        #region Classes

        private class ScaffoldedEntityDataTableItem
        {
            #region Properties

            public Models.ScaffoldedEntity Entity { get; set; }

            /// <summary>
            /// Gets or sets the concatenated category names up to the actual <see cref="Entity"/>.
            /// </summary>
            public string FullCategory { get; set; }

            public int Id { get; set; }

            /// <summary>
            /// Gets or sets the pristine value of the <see cref="Entity"/>.
            /// </summary>
            public object OriginalValue { get; set; }

            public object JsonValue { get; set; }

            /// <summary>
            /// Gets or sets all the tags set up to the actual <see cref="Entity"/>.
            /// </summary>
            public IEnumerable<string> Tags { get; set; }

            #endregion
        }

        #endregion
    }
}
