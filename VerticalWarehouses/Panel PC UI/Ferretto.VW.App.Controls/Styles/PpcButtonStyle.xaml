<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Ferretto.VW.App.Controls.Controls"
                    xmlns:converters="clr-namespace:Ferretto.VW.App.Controls.Converters"
                    xmlns:icon="http://metro.mahapps.com/winfx/xaml/iconpacks"
                    xmlns:res="clr-namespace:Ferretto.VW.App.Resources;assembly=Ferretto.VW.App.Resources">

    <Style x:Key="{x:Type controls:PpcButton}"
           TargetType="{x:Type controls:PpcButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:PpcButton}">
                    <ControlTemplate.Resources>
                        <BooleanToVisibilityConverter x:Key="BTVC" />
                        <converters:ReferenceToVisibilityConverter x:Key="RTVC" />
                        <converters:ReferenceToHorizontalAlignmentConverter x:Key="RTAC" />
                        <converters:ReferenceToVisibilityConverter x:Key="RTVIC"
                                                                   Invert="True" />
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border Name="PpcButton_Border"
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}"
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{DynamicResource PpcCornerRadius}"
                                Cursor="Hand"
                                FlowDirection="LeftToRight">
                            <Grid x:Name="PpcButton_Grid">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <ProgressBar Grid.ColumnSpan="2"
                                             HorizontalAlignment="Stretch"
                                             VerticalAlignment="Stretch"
                                             Background="{TemplateBinding Background}"
                                             BorderBrush="{TemplateBinding BorderBrush}"
                                             Foreground="{DynamicResource PpcButtonForeground}"
                                             IsIndeterminate="True"
                                             Opacity="0.2"
                                             Visibility="{Binding IsBusy, Converter={StaticResource BTVC}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PpcButton}}}" />

                                <icon:PackIconMaterialLight Grid.ColumnSpan="2"
                                                            Width="32"
                                                            Height="32"
                                                            Margin="5"
                                                            HorizontalAlignment="Center"
                                                            VerticalAlignment="Center"
                                                            Foreground="{TemplateBinding Foreground}"
                                                            Kind="{Binding Kind, RelativeSource={RelativeSource TemplatedParent}}"
                                                            Tag="{Binding Kind, RelativeSource={RelativeSource TemplatedParent}}">
                                    <icon:PackIconMaterialLight.Style>
                                        <Style TargetType="{x:Type icon:PackIconMaterialLight}">
                                            <Setter Property="Visibility" Value="Visible" />
                                            <Style.Triggers>
                                                <Trigger Property="Tag" Value="{x:Null}">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </icon:PackIconMaterialLight.Style>
                                </icon:PackIconMaterialLight>

                                <icon:PackIconFontAwesome Grid.ColumnSpan="2"
                                                          Width="32"
                                                          Height="32"
                                                          Margin="5"
                                                          HorizontalAlignment="Center"
                                                          VerticalAlignment="Center"
                                                          Foreground="{TemplateBinding Foreground}"
                                                          Kind="{Binding KindFontAwesome, RelativeSource={RelativeSource TemplatedParent}}"
                                                          Tag="{Binding KindFontAwesome, RelativeSource={RelativeSource TemplatedParent}}">
                                    <icon:PackIconFontAwesome.Style>
                                        <Style TargetType="{x:Type icon:PackIconFontAwesome}">
                                            <Setter Property="Visibility" Value="Visible" />
                                            <Style.Triggers>
                                                <Trigger Property="Tag" Value="{x:Null}">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </icon:PackIconFontAwesome.Style>
                                </icon:PackIconFontAwesome>

                                <controls:PpcIcon x:Name="PpcButton_Icon"
                                                  Height="24"
                                                  Margin="15,5"
                                                  HorizontalAlignment="{Binding Content, Converter={StaticResource RTAC}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PpcButton}}}"
                                                  ColorizeBrush="{DynamicResource PpcButtonForeground}"
                                                  ImageSource="{Binding ImageSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PpcButton}}}"
                                                  Visibility="{Binding ImageSource, Converter={StaticResource RTVC}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PpcButton}}}" />

                                <TextBlock x:Name="PpcButton_Text"
                                           Grid.Column="1"
                                           Margin="10,0"
                                           HorizontalAlignment="Stretch"
                                           VerticalAlignment="Center"
                                           FontSize="{TemplateBinding FontSize}"
                                           Text="{Binding Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PpcButton}}}"
                                           TextWrapping="Wrap">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="TextAlignment" Value="Center" />
                                            <Setter Property="Visibility" Value="Visible" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Visibility, ElementName=PpcButton_Icon}"
                                                             Value="Visible">
                                                    <Setter Property="TextAlignment" Value="Left" />
                                                </DataTrigger>
                                                <Trigger Property="Text" Value="{x:Null}">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </Trigger>
                                                <Trigger Property="Text" Value="">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                            </Grid>
                        </Border>
                    </Grid>

                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsActive" Value="True">
                            <Setter TargetName="PpcButton_Border" Property="BorderThickness" Value="{DynamicResource PpcButtonBorderThicknessActive}" />
                            <Setter TargetName="PpcButton_Grid" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PpcButton_Border" Property="BorderThickness" Value="{DynamicResource PpcButtonBorderThicknessActive}" />
                            <Setter TargetName="PpcButton_Grid" Property="Margin" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>

            </Setter.Value>
        </Setter>

        <Setter Property="Width" Value="{DynamicResource PpcButtonWidth}" />
        <Setter Property="Height" Value="{DynamicResource PpcButtonHeight}" />
        <Setter Property="Background" Value="{DynamicResource PpcButtonBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource PpcButtonForeground}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Small}" />
        <Setter Property="BorderThickness" Value="{DynamicResource PpcBorderThickness}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PpcButtonBorderBrush}" />

        <Style.Triggers>
            <DataTrigger Binding="{Binding IsActive}"
                         Value="True">
                <Setter Property="BorderThickness" Value="{DynamicResource PpcButtonBorderThicknessActive}" />
                <!--<Setter Property="Background" Value="{DynamicResource PpcButtonBackgroundPressed}" />-->
            </DataTrigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource PpcButtonBackgroundPressed}" />
                <!--<Setter Property="BorderBrush" Value="{DynamicResource PpcButtonBorderBrushPressed}" />-->
                <Setter Property="Foreground" Value="{DynamicResource PpcButtonForegroundPressed}" />
                <!--<Setter Property="BorderThickness" Value="{DynamicResource PpcButtonBorderThicknessActive}" />-->
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource PpcButtonBackgroundDisabled}" />
                <Setter Property="BorderBrush" Value="{DynamicResource PpcButtonBorderBrushDisabled}" />
                <Setter Property="Foreground" Value="{DynamicResource PpcButtonForegroundDisabled}" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="PpcHeaderButtonStyle"
           BasedOn="{StaticResource {x:Type controls:PpcButton}}"
           TargetType="{x:Type controls:PpcButton}">
        <Setter Property="BorderThickness" Value="0,0,0,10" />
        <Setter Property="BorderBrush" Value="{DynamicResource FerrettoLightGray}" />
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="60" />
    </Style>

    <Style x:Key="PpcButtonMachinePowerHeaderStyle"
           BasedOn="{StaticResource PpcHeaderButtonStyle}"
           TargetType="{x:Type controls:PpcButton}">
        <Setter Property="Content" Value="{x:Static res:InstallationApp.Off}" />
        <Setter Property="BorderBrush" Value="{DynamicResource FerrettoLightGray}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMachinePoweredOn}"
                         Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource FerrettoGreen}" />
                <Setter Property="Content" Value="{x:Static res:InstallationApp.On}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsUnknownState}"
                         Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource FerrettoLightGray}" />
                <Setter Property="Content" Value="{x:Static res:InstallationApp.Unknown}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PpcButtonMachineModeHeaderStyle"
           BasedOn="{StaticResource PpcHeaderButtonStyle}"
           TargetType="{x:Type controls:PpcButton}">
        <Setter Property="Content" Value="{x:Static res:InstallationApp.Manual}" />
        <Setter Property="BorderBrush" Value="{DynamicResource FerrettoGreen}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMachineInAutomaticMode}"
                         Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource FerrettoBlue}" />
                <Setter Property="Content" Value="{x:Static res:InstallationApp.Auto}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMachineInTestMode}"
                         Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource FerrettoOrange}" />
                <Setter Property="Content" Value="{x:Static res:InstallationApp.Test}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PpcButtonDebugHeaderStyle"
           BasedOn="{StaticResource PpcHeaderButtonStyle}"
           TargetType="{x:Type controls:PpcButton}">
        <Setter Property="BorderBrush" Value="{DynamicResource FerrettoOrange}" />
    </Style>

    <Style x:Key="PpcButtonMachineErrorHeaderStyle"
           BasedOn="{StaticResource PpcHeaderButtonStyle}"
           TargetType="{x:Type controls:PpcButton}">
        <Setter Property="BorderBrush" Value="{DynamicResource FerrettoRed}" />
    </Style>

    <Style x:Key="PpcButtonHelpHeaderStyle"
           BasedOn="{StaticResource {x:Type controls:PpcButton}}"
           TargetType="{x:Type controls:PpcButton}">
        <Setter Property="Width" Value="60" />
        <Setter Property="Height" Value="60" />
        <Setter Property="ImageSource" Value="/Ferretto.VW.App.Controls;Component/Assets/help.png" />

    </Style>

    <Style x:Key="PpcButtonThemeStyle"
           BasedOn="{StaticResource {x:Type controls:PpcButton}}"
           TargetType="{x:Type controls:PpcButton}">
        <Setter Property="Width" Value="60" />
        <Setter Property="Height" Value="60" />
        <Setter Property="ImageSource" Value="/Ferretto.VW.App.Controls;Component/Assets/theme_dark.png" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsDarkThemeActive}"
                         Value="False">
                <Setter Property="ImageSource" Value="/Ferretto.VW.App.Controls;Component/Assets/theme_light.png" />

            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PpcButtonTabStyle"
           BasedOn="{StaticResource {x:Type controls:PpcButton}}"
           TargetType="{x:Type controls:PpcButton}">
        <Setter Property="BorderThickness" Value="0,0,0,3" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="Height" Value="45" />
        <Setter Property="Width" Value="250" />
        <Setter Property="FontFamily" Value="{DynamicResource VWAPP_TitleFont}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSize_Very_High}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:PpcButton}">
                    <Grid>
                        <Border Name="PpcButton_Border"
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}"
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{DynamicResource PpcCornerRadius}"
                                Cursor="Hand"
                                FlowDirection="LeftToRight">
                            <Grid x:Name="PpcButton_Grid">
                                <TextBlock x:Name="PpcButton_Text"
                                           Margin="{TemplateBinding Padding}"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           VerticalAlignment="Center"
                                           FontSize="{TemplateBinding FontSize}"
                                           Text="{Binding Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PpcButton}}}"
                                           TextWrapping="Wrap" />
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource PpcButtonForeground}" />
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PpcButtonMovementsGuidedTabStyle"
           BasedOn="{StaticResource PpcButtonTabStyle}"
           TargetType="{x:Type controls:PpcButton}">
        <Style.Triggers>
            <Trigger Property="IsActive" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource FerrettoBlue}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="PpcButtonMovementsManualTabStyle"
           BasedOn="{StaticResource PpcButtonTabStyle}"
           TargetType="{x:Type controls:PpcButton}">
        <Style.Triggers>
            <Trigger Property="IsActive" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource FerrettoGreen}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PpcButtonStopStyle"
           BasedOn="{StaticResource {x:Type controls:PpcButton}}"
           TargetType="{x:Type controls:PpcButton}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="#E1323F" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsDarkThemeActive}"
                         Value="False">
                <Setter Property="Background" Value="#E1323F" />
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderThickness" Value="{DynamicResource PpcBorderThickness}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
