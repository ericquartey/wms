<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Ferretto.VW.App.Controls.Controls"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
                    xmlns:local="clr-namespace:Ferretto.VW.App.Controls.Styles"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

  <Style TargetType="{x:Type dxe:PasswordBoxEdit}">
    <Setter Property="Background" Value="{x:Null}" />
    <Setter Property="BorderBrush" Value="{DynamicResource PpcBorderBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource PasswordBox_Foreground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxe:PasswordBoxEdit}">
          <Border x:Name="Bd"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="0,0,0,1"
                  CornerRadius="{TemplateBinding Border.CornerRadius}"
                  SnapsToDevicePixels="True">
            <Grid>
              <dxe:EditorControl x:Name="PART_Content"
                                 DockPanel.Dock="Left"
                                 Template="{Binding Path=(dxe:BaseEdit.OwnerEdit).ActualEditorControlTemplate, RelativeSource={RelativeSource Self}}" />
              <TextBlock x:Name="PART_PasswordNullText"
                         Foreground="{DynamicResource PasswordLabel_Foreground}"
                         IsHitTestVisible="False"
                         Style="{DynamicResource {dxet:PasswordBoxEditThemeKey ResourceKey=NullTextEditorStyle}}"
                         Text="{Binding Path=NullText, RelativeSource={RelativeSource TemplatedParent}}">
                <TextBlock.Visibility>
                  <Binding Path="IsNullTextVisible"
                           RelativeSource="{RelativeSource TemplatedParent}">
                    <Binding.Converter>
                      <BooleanToVisibilityConverter />
                    </Binding.Converter>
                  </Binding>
                </TextBlock.Visibility>
              </TextBlock>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Validation.HasError" Value="True" />
                <Condition Property="IsEnabled" Value="True" />
                <Condition Property="IsReadOnly" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="BorderBrush" Value="Red" />
              <Setter Property="ToolTip" Value="{Binding (Validation.Errors)/ErrorContent, RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
            <Trigger Property="IsReadOnly" Value="true">
              <Setter Property="BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="false">
              <Setter Property="BorderThickness" Value="1" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="PpcPasswordBox"
         TargetType="{x:Type dxe:PasswordBoxEdit}">
    <Setter Property="BorderBrush" Value="{DynamicResource PpcBorderBrush}" />
    <Setter Property="Background" Value="{DynamicResource VWAPP_PpcTextBox_Background_Normal}" />
    <Setter Property="Foreground" Value="{DynamicResource VWAPP_PpcTextBox_TextBlock_Foreground_Normal}" />
    <Setter Property="FontSize" Value="{DynamicResource VWAPP_PpcTextBox_TextBlock_FontSize}" />
    <Setter Property="BorderThickness" Value="{DynamicResource VWAPP_PpcTextBox_TextBox_BorderThickness}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type dxe:PasswordBoxEdit}">
          <Border x:Name="Bd"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  CornerRadius="{TemplateBinding Border.CornerRadius}"
                  SnapsToDevicePixels="True">
            <Grid>
              <dxe:EditorControl x:Name="PART_Content"
                                 DockPanel.Dock="Left"
                                 Template="{Binding Path=(dxe:BaseEdit.OwnerEdit).ActualEditorControlTemplate, RelativeSource={RelativeSource Self}}" />
              <TextBlock x:Name="PART_PasswordNullText"
                         FontSize="17"
                         Foreground="{TemplateBinding Foreground}"
                         IsHitTestVisible="False"
                         Style="{DynamicResource {dxet:PasswordBoxEditThemeKey ResourceKey=NullTextEditorStyle}}"
                         Text="{Binding Path=NullText, RelativeSource={RelativeSource TemplatedParent}}">
                <TextBlock.Visibility>
                  <Binding Path="IsNullTextVisible"
                           RelativeSource="{RelativeSource TemplatedParent}">
                    <Binding.Converter>
                      <BooleanToVisibilityConverter />
                    </Binding.Converter>
                  </Binding>
                </TextBlock.Visibility>
              </TextBlock>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Validation.HasError" Value="True" />
                <Condition Property="IsEnabled" Value="True" />
                <Condition Property="IsReadOnly" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="BorderBrush" Value="Red" />
              <Setter Property="ToolTip" Value="{Binding (Validation.Errors)/ErrorContent, RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
            <Trigger Property="IsReadOnly" Value="true">
              <Setter Property="BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="false">
              <Setter Property="BorderThickness" Value="1" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

</ResourceDictionary>
