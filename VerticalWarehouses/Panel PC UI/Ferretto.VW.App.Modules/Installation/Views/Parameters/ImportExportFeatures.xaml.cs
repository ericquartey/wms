using System;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using Ferretto.VW.MAS.AutomationService.Contracts;

namespace Ferretto.VW.App.Modules.Installation.Controls
{
    // <Auto-Generated>
    // This is here so CodeMaid doesn't reorganize this document
    // </Auto-Generated>
    public partial class ImportExportFeatures : UserControl
    {
        #region Fields

        private static readonly DependencyPropertyKey HasCellPanelsPropertyKey
            = DependencyProperty.RegisterReadOnly(nameof(HasCellPanels), typeof(bool), typeof(ImportExportFeatures), new PropertyMetadata(OnHasCellPanelsPropertyChanged));

        private static readonly DependencyPropertyKey HasLoadingUnitsPropertyKey
            = DependencyProperty.RegisterReadOnly(nameof(HasLoadingUnits), typeof(bool), typeof(ImportExportFeatures), new PropertyMetadata(OnHasLoadingUnitsPropertyChanged));

        private static readonly DependencyPropertyKey HasParametersPropertyKey
            = DependencyProperty.RegisterReadOnly(nameof(HasParameters), typeof(bool), typeof(ImportExportFeatures), new PropertyMetadata(OnHasParametersPropertyChanged));

        private static readonly DependencyPropertyKey HasSetupProceduresPropertyKey
            = DependencyProperty.RegisterReadOnly(nameof(HasSetupProcedures), typeof(bool), typeof(ImportExportFeatures), new PropertyMetadata(OnHasSetupProceduresPropertyChanged));

        public static readonly DependencyProperty HasCellPanelsProperty = HasCellPanelsPropertyKey.DependencyProperty;

        public static readonly DependencyProperty HasLoadingUnitsProperty = HasLoadingUnitsPropertyKey.DependencyProperty;

        public static readonly DependencyProperty HasParametersProperty = HasParametersPropertyKey.DependencyProperty;

        public static readonly DependencyProperty HasSetupProceduresProperty = HasSetupProceduresPropertyKey.DependencyProperty;

        public static readonly DependencyProperty InputProperty
            = DependencyProperty.Register(nameof(Input), typeof(VertimagConfiguration), typeof(ImportExportFeatures), new PropertyMetadata(OnInputPropertyChanged));

        public static readonly DependencyProperty OutputProperty
            = DependencyProperty.Register(nameof(Output), typeof(VertimagConfiguration), typeof(ImportExportFeatures));

        private static readonly DependencyProperty IncludeCellPanelsProperty
            = DependencyProperty.Register(nameof(IncludeCellPanels), typeof(bool), typeof(ImportExportFeatures), new PropertyMetadata(false));

        private static readonly DependencyProperty IncludeLoadingUnitsProperty
            = DependencyProperty.Register(nameof(IncludeLoadingUnits), typeof(bool), typeof(ImportExportFeatures), new PropertyMetadata(false));

        private static readonly DependencyProperty IncludeParametersProperty
            = DependencyProperty.Register(nameof(IncludeParameters), typeof(bool), typeof(ImportExportFeatures), new PropertyMetadata(false));

        private static readonly DependencyProperty IncludeSetupProceduresProperty
            = DependencyProperty.Register(nameof(IncludeSetupProcedures), typeof(bool), typeof(ImportExportFeatures), new PropertyMetadata(false));

        #endregion

        #region Constructors

        public ImportExportFeatures()
        {
            this.InitializeComponent();
        }

        #endregion

        #region Properties

        public bool HasCellPanels
        {
            get => (bool)this.GetValue(HasCellPanelsProperty);
            private set => this.SetValue(HasCellPanelsPropertyKey, value);
        }

        public bool HasLoadingUnits
        {
            get => (bool)this.GetValue(HasLoadingUnitsProperty);
            private set => this.SetValue(HasLoadingUnitsPropertyKey, value);
        }

        public bool HasParameters
        {
            get => (bool)this.GetValue(HasParametersProperty);
            private set => this.SetValue(HasParametersPropertyKey, value);
        }

        public bool HasSetupProcedures
        {
            get => (bool)this.GetValue(HasSetupProceduresProperty);
            private set => this.SetValue(HasSetupProceduresPropertyKey, value);
        }

        public bool IncludeCellPanels
        {
            get => (bool)this.GetValue(IncludeCellPanelsProperty);
            set => this.SetValue(IncludeCellPanelsProperty, value);
        }

        public bool IncludeLoadingUnits
        {
            get => (bool)this.GetValue(IncludeLoadingUnitsProperty);
            set => this.SetValue(IncludeLoadingUnitsProperty, value);
        }

        public bool IncludeParameters
        {
            get => (bool)this.GetValue(IncludeParametersProperty);
            set => this.SetValue(IncludeParametersProperty, value);
        }

        public bool IncludeSetupProcedures
        {
            get => (bool)this.GetValue(IncludeSetupProceduresProperty);
            set => this.SetValue(IncludeSetupProceduresProperty, value);
        }

        public VertimagConfiguration Input
        {
            get => (VertimagConfiguration)this.GetValue(InputProperty);
            set => this.SetValue(InputProperty, value);
        }

        public VertimagConfiguration Output
        {
            get => (VertimagConfiguration)this.GetValue(OutputProperty);
            set => this.SetValue(OutputProperty, value);
        }

        #endregion

        #region Methods

        private static void OnHasCellPanelsPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var impExp = (ImportExportFeatures)d;
            impExp.CoercePropertyValue(e.Property, IncludeCellPanelsProperty);
        }

        private static void OnHasLoadingUnitsPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var impExp = (ImportExportFeatures)d;
            impExp.CoercePropertyValue(e.Property, IncludeLoadingUnitsProperty);
        }

        private static void OnHasParametersPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var impExp = (ImportExportFeatures)d;
            impExp.CoercePropertyValue(e.Property, IncludeParametersProperty);
        }

        private static void OnHasSetupProceduresPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var impExp = (ImportExportFeatures)d;
            impExp.CoercePropertyValue(e.Property, IncludeSetupProceduresProperty);
        }

        private static void OnInputPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var impExp = (ImportExportFeatures)d;
            impExp.OnInputChanged((VertimagConfiguration)e.OldValue, (VertimagConfiguration)e.NewValue);
        }

        private VertimagConfiguration CloneInput(VertimagConfiguration input)
        {
            if (input == null)
            {
                return null;
            }
            return input.DeepClone();
        }

        private void CoercePropertyValue(DependencyProperty hasProperty, DependencyProperty includeProperty)
        {
            object has = this.GetValue(hasProperty);
            object include = this.GetValue(includeProperty);
            if (!true.Equals(has))
            {
                this.SetValue(includeProperty, false);
            }
            else if (DependencyProperty.UnsetValue.Equals(include))
            {
                this.SetValue(includeProperty, true);
            }
        }

        private void OnInputChanged(VertimagConfiguration old, VertimagConfiguration configuration)
        {
            this.SetValue(IncludeCellPanelsProperty, DependencyProperty.UnsetValue);
            this.SetValue(IncludeLoadingUnitsProperty, DependencyProperty.UnsetValue);
            this.SetValue(IncludeParametersProperty, DependencyProperty.UnsetValue);
            this.SetValue(IncludeSetupProceduresProperty, DependencyProperty.UnsetValue);

            this.SetValue(HasCellPanelsPropertyKey, configuration?.Machine?.Panels?.Any() == true);
            this.SetValue(HasLoadingUnitsPropertyKey, configuration?.LoadingUnits?.Any() == true);
            this.SetValue(HasSetupProceduresPropertyKey, configuration?.SetupProcedures != null);
            this.SetValue(HasParametersPropertyKey, configuration?.HasParameters() == true);

            if (!this.HasCellPanels && !this.HasParameters && !this.HasSetupProcedures && !this.HasLoadingUnits)
            {
                // empty configuration => null output
                this.Output = null;
            }
            else
            {
                // clone to avoid unwanted references' collisions.
                this.Output = this.CloneInput(configuration);
            }
        }

        #endregion
    }
}
