// <auto-generated />
using System;
using Ferretto.VW.MAS.DataLayer.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ferretto.VW.MAS.DataLayer.Migrations
{
    [DbContext(typeof(DataLayerContext))]
    partial class DataLayerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Bay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CarouselId");

                    b.Property<double>("ChainOffset");

                    b.Property<int?>("CurrentMissionId");

                    b.Property<int?>("CurrentMissionOperationId");

                    b.Property<int?>("InverterId");

                    b.Property<int?>("IoDeviceId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsExternal");

                    b.Property<int?>("MachineId");

                    b.Property<int>("Number");

                    b.Property<int>("Operation");

                    b.Property<int?>("ShutterId");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CarouselId");

                    b.HasIndex("InverterId");

                    b.HasIndex("IoDeviceId");

                    b.HasIndex("MachineId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ShutterId");

                    b.ToTable("Bays");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.BayPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BayId");

                    b.Property<double>("Height");

                    b.Property<int?>("LoadingUnitId");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BayId");

                    b.HasIndex("LoadingUnitId");

                    b.ToTable("BayPositions");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Carousel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("ElevatorDistance");

                    b.HasKey("Id");

                    b.ToTable("Carousels");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Cell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PanelId");

                    b.Property<double>("Position");

                    b.Property<int>("Priority");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PanelId");

                    b.ToTable("Cells");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.CellPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MachineId");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.ToTable("CellPanels");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Elevator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LoadingUnitId");

                    b.Property<int?>("StructuralPropertiesId");

                    b.HasKey("Id");

                    b.HasIndex("LoadingUnitId");

                    b.HasIndex("StructuralPropertiesId");

                    b.ToTable("Elevators");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ElevatorAxis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("ChainOffset");

                    b.Property<int?>("ElevatorId");

                    b.Property<int?>("EmptyLoadMovementId");

                    b.Property<int?>("InverterId");

                    b.Property<double>("LowerBound");

                    b.Property<int?>("MaximumLoadMovementId");

                    b.Property<double>("Offset");

                    b.Property<int>("Orientation");

                    b.Property<decimal>("Resolution");

                    b.Property<int>("TotalCycles");

                    b.Property<double>("UpperBound");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorId");

                    b.HasIndex("EmptyLoadMovementId");

                    b.HasIndex("InverterId");

                    b.HasIndex("MaximumLoadMovementId");

                    b.ToTable("ElevatorAxes");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ElevatorStructuralProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BeltRigidity");

                    b.Property<double>("BeltSpacing");

                    b.Property<double>("HalfShaftLength");

                    b.Property<double>("MaximumLoadOnBoard");

                    b.Property<double>("PulleyDiameter");

                    b.Property<double>("ShaftDiameter");

                    b.Property<double>("ShaftElasticity");

                    b.HasKey("Id");

                    b.ToTable("ElevatorStructuralProperties");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BayNumber");

                    b.Property<int>("Code");

                    b.Property<DateTime>("OccurrenceDate");

                    b.Property<DateTime?>("ResolutionDate");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ErrorDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Reason");

                    b.Property<int>("Severity");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ErrorDefinitions");

                    b.HasData(
                        new
                        {
                            Id = 100032,
                            Code = 100032,
                            Description = "Cassetto non caricato completamente.",
                            Reason = "Il cassetto potrebbe essersi incastrato.",
                            Severity = 0
                        },
                        new
                        {
                            Id = 100033,
                            Code = 100033,
                            Description = "Condizioni per il posizionamento non soddisfatte.",
                            Reason = "Controllare che il nottolino sia a zero o che il cassetto sia completamente caricato a bordo elevatore.",
                            Severity = 0
                        },
                        new
                        {
                            Id = 100034,
                            Code = 100034,
                            Description = "Condizioni per la messa in marcia non soddisfatte.",
                            Reason = "Controllare che i funghi di mergenza siano disattivati e che tutti i sensori di sicurezza siano disattivi",
                            Severity = 0
                        },
                        new
                        {
                            Id = 100035,
                            Code = 100035,
                            Description = "CradleNotCorrectlyLoadedDuringPickup",
                            Reason = "CradleNotCorrectlyLoadedDuringPickup",
                            Severity = 0
                        },
                        new
                        {
                            Id = 100036,
                            Code = 100036,
                            Description = "CradleNotCorrectlyUnloadedDuringDeposit",
                            Reason = "CradleNotCorrectlyUnloadedDuringDeposit",
                            Severity = 0
                        },
                        new
                        {
                            Id = 100037,
                            Code = 100037,
                            Description = "ZeroSensorErrorAfterPickup",
                            Reason = "ZeroSensorErrorAfterPickup",
                            Severity = 0
                        },
                        new
                        {
                            Id = 100038,
                            Code = 100038,
                            Description = "ZeroSensorErrorAfterDeposit",
                            Reason = "ZeroSensorErrorAfterDeposit",
                            Severity = 0
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ErrorStatistic", b =>
                {
                    b.Property<int>("Code");

                    b.Property<int>("TotalErrors");

                    b.HasKey("Code");

                    b.ToTable("ErrorStatistics");

                    b.HasData(
                        new
                        {
                            Code = 100032,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 100033,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 100034,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 100035,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 100036,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 100037,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 100038,
                            TotalErrors = 0
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Inverter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("Index");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<int>("TcpPort");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("Inverters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.IoDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("Index");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<int>("TcpPort");

                    b.HasKey("Id");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("IoDevices");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LoadingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CellId");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<double>("GrossWeight");

                    b.Property<double>("Height");

                    b.Property<bool>("IsIntoMachine");

                    b.Property<double>("MaxNetWeight");

                    b.Property<int>("MissionsCount");

                    b.Property<long>("Status");

                    b.Property<double>("Tare");

                    b.HasKey("Id");

                    b.HasIndex("CellId")
                        .IsUnique();

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("LoadingUnits");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BayNumber");

                    b.Property<string>("Data");

                    b.Property<string>("Description");

                    b.Property<string>("Destination");

                    b.Property<string>("ErrorLevel");

                    b.Property<string>("Exception");

                    b.Property<string>("Level");

                    b.Property<string>("LoggerName");

                    b.Property<string>("Message");

                    b.Property<string>("Source");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ElevatorId");

                    b.Property<double>("Height");

                    b.Property<double>("MaxGrossWeight");

                    b.Property<string>("ModelName");

                    b.Property<string>("SerialNumber");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MachineStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("TotalAutomaticTime");

                    b.Property<int>("TotalBeltCycles");

                    b.Property<TimeSpan>("TotalMissionTime");

                    b.Property<int>("TotalMovedTrays");

                    b.Property<int>("TotalMovedTraysInBay1");

                    b.Property<int>("TotalMovedTraysInBay2");

                    b.Property<int>("TotalMovedTraysInBay3");

                    b.Property<TimeSpan>("TotalPowerOnTime");

                    b.Property<int>("TotalVerticalAxisCycles");

                    b.Property<double>("TotalVerticalAxisKilometers");

                    b.Property<double>("WeightCapacityPercentage");

                    b.HasKey("Id");

                    b.ToTable("MachineStatistics");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            TotalAutomaticTime = new TimeSpan(0, 0, 0, 0, 0),
                            TotalBeltCycles = 0,
                            TotalMissionTime = new TimeSpan(0, 0, 0, 0, 0),
                            TotalMovedTrays = 0,
                            TotalMovedTraysInBay1 = 0,
                            TotalMovedTraysInBay2 = 0,
                            TotalMovedTraysInBay3 = 0,
                            TotalPowerOnTime = new TimeSpan(0, 0, 0, 0, 0),
                            TotalVerticalAxisCycles = 0,
                            TotalVerticalAxisKilometers = 0.0,
                            WeightCapacityPercentage = 0.0
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MovementParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Acceleration");

                    b.Property<double>("Deceleration");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<double>("Speed");

                    b.HasKey("Id");

                    b.ToTable("MovementParameters");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MovementParameters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MovementProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Correction");

                    b.Property<int?>("ElevatorAxisId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TotalDistance");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorAxisId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MovementProfiles");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ServicingInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("InstallationDate");

                    b.Property<DateTime?>("LastServiceDate");

                    b.Property<DateTime?>("NextServiceDate");

                    b.Property<int>("ServiceStatus");

                    b.HasKey("Id");

                    b.ToTable("ServicingInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InstallationDate = new DateTime(2016, 12, 17, 14, 0, 12, 151, DateTimeKind.Local).AddTicks(3035),
                            ServiceStatus = 86
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.SetupProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<double>("FeedRate");

                    b.Property<bool>("IsCompleted");

                    b.HasKey("Id");

                    b.ToTable("SetupProcedures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SetupProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.SetupProceduresSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BayHeightCheckId");

                    b.Property<int?>("BeltBurnishingTestId");

                    b.Property<int?>("CarouselManualMovementsId");

                    b.Property<int?>("CellPanelsCheckId");

                    b.Property<int?>("CellsHeightCheckId");

                    b.Property<int?>("DepositAndPickUpTestId");

                    b.Property<int?>("HorizontalManualMovementsId");

                    b.Property<int?>("LoadFirstDrawerTestId");

                    b.Property<int?>("OffsetCalibrationId");

                    b.Property<int?>("ShutterHeightCheckId");

                    b.Property<int?>("ShutterManualMovementsId");

                    b.Property<int?>("ShutterTestId");

                    b.Property<int?>("VerticalManualMovementsId");

                    b.Property<int?>("VerticalResolutionCalibrationId");

                    b.Property<int?>("WeightCheckId");

                    b.HasKey("Id");

                    b.HasIndex("BayHeightCheckId");

                    b.HasIndex("BeltBurnishingTestId");

                    b.HasIndex("CarouselManualMovementsId");

                    b.HasIndex("CellPanelsCheckId");

                    b.HasIndex("CellsHeightCheckId");

                    b.HasIndex("DepositAndPickUpTestId");

                    b.HasIndex("HorizontalManualMovementsId");

                    b.HasIndex("LoadFirstDrawerTestId");

                    b.HasIndex("OffsetCalibrationId");

                    b.HasIndex("ShutterHeightCheckId");

                    b.HasIndex("ShutterManualMovementsId");

                    b.HasIndex("ShutterTestId");

                    b.HasIndex("VerticalManualMovementsId");

                    b.HasIndex("VerticalResolutionCalibrationId");

                    b.HasIndex("WeightCheckId");

                    b.ToTable("SetupProceduresSets");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.SetupStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllLoadingUnits");

                    b.Property<bool>("Bay1Check");

                    b.Property<bool>("Bay1FirstLoadingUnit");

                    b.Property<bool>("Bay1Laser");

                    b.Property<bool>("Bay1Shape");

                    b.Property<bool>("Bay1Shutter");

                    b.Property<bool>("Bay2Check");

                    b.Property<bool>("Bay2FirstLoadingUnit");

                    b.Property<bool>("Bay2Laser");

                    b.Property<bool>("Bay2Shape");

                    b.Property<bool>("Bay2Shutter");

                    b.Property<bool>("Bay3Check");

                    b.Property<bool>("Bay3FirstLoadingUnit");

                    b.Property<bool>("Bay3Laser");

                    b.Property<bool>("Bay3Shape");

                    b.Property<bool>("Bay3Shutter");

                    b.Property<bool>("BeltBurnishingCompleted");

                    b.Property<int>("BeltBurnishingCompletedCycles");

                    b.Property<int>("BeltBurnishingRequiredCycles");

                    b.Property<bool>("CellsHeightCheck");

                    b.Property<DateTime?>("CompletedDate");

                    b.Property<bool>("HorizontalHoming");

                    b.Property<bool>("PanelsCheck");

                    b.Property<bool>("VerticalOffsetCalibration");

                    b.Property<bool>("VerticalResolution");

                    b.Property<bool>("WeightMeasurement");

                    b.HasKey("Id");

                    b.ToTable("SetupStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllLoadingUnits = false,
                            Bay1Check = false,
                            Bay1FirstLoadingUnit = false,
                            Bay1Laser = false,
                            Bay1Shape = false,
                            Bay1Shutter = false,
                            Bay2Check = false,
                            Bay2FirstLoadingUnit = false,
                            Bay2Laser = false,
                            Bay2Shape = false,
                            Bay2Shutter = false,
                            Bay3Check = false,
                            Bay3FirstLoadingUnit = false,
                            Bay3Laser = false,
                            Bay3Shape = false,
                            Bay3Shutter = false,
                            BeltBurnishingCompleted = false,
                            BeltBurnishingCompletedCycles = 0,
                            BeltBurnishingRequiredCycles = 0,
                            CellsHeightCheck = false,
                            HorizontalHoming = false,
                            PanelsCheck = false,
                            VerticalOffsetCalibration = false,
                            VerticalResolution = false,
                            WeightMeasurement = false
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Shutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("InverterId");

                    b.Property<int>("TotalCycles");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InverterId");

                    b.ToTable("Shutter");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.TorqueCurrentMeasurementSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("LoadedNetWeight");

                    b.Property<int?>("LoadingUnitId");

                    b.HasKey("Id");

                    b.ToTable("TorqueCurrentMeasurementSessions");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.TorqueCurrentSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MeasurementSessionId");

                    b.Property<DateTime>("RequestTimeStamp");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementSessionId");

                    b.ToTable("TorqueCurrentSamples");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessLevel");

                    b.Property<string>("Name");

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("PasswordSalt")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AccessLevel = 0,
                            Name = "installer",
                            PasswordHash = "DsWpG30CTZweMD4Q+LlgzrsGOWM/jx6enmP8O7RIrvU=",
                            PasswordSalt = "2xw+hMIYBtLCoUqQGXSL0A=="
                        },
                        new
                        {
                            Id = -2,
                            AccessLevel = 2,
                            Name = "operator",
                            PasswordHash = "e1IrRSpcUNLIQAmdtSzQqrKT4DLcMaYMh662pgMh2xY=",
                            PasswordSalt = "iB+IdMnlzvXvitHWJff38A=="
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.StepMovementParameters", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.MovementParameters");

                    b.Property<int?>("MovementProfileId");

                    b.Property<int>("Number");

                    b.Property<double>("Position");

                    b.HasIndex("MovementProfileId");

                    b.HasDiscriminator().HasValue("StepMovementParameters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.HorizontalManualMovementsProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.SetupProcedure");

                    b.Property<double>("InitialTargetPosition");

                    b.Property<double>("RecoveryTargetPosition");

                    b.HasDiscriminator().HasValue("HorizontalManualMovementsProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.PositioningProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.SetupProcedure");

                    b.Property<double>("Step");

                    b.HasDiscriminator().HasValue("PositioningProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.SetupProcedure");

                    b.Property<int>("PerformedCycles");

                    b.Property<int>("RequiredCycles");

                    b.HasDiscriminator().HasValue("RepeatedTestProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ShutterManualMovementsProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.SetupProcedure");

                    b.Property<double>("HighSpeedDurationClose");

                    b.Property<double>("HighSpeedDurationOpen");

                    b.Property<double>("MaxSpeed");

                    b.Property<double>("MinSpeed");

                    b.HasDiscriminator().HasValue("ShutterManualMovementsProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.VerticalManualMovementsProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.SetupProcedure");

                    b.Property<double>("BrakeActivatePercent");

                    b.Property<double>("BrakeReleaseTime");

                    b.Property<double>("FeedRateAfterZero");

                    b.Property<double>("NegativeTargetDirection");

                    b.Property<double>("PositiveTargetDirection");

                    b.HasDiscriminator().HasValue("VerticalManualMovementsProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.VerticalResolutionCalibrationProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.SetupProcedure");

                    b.Property<double>("FinalPosition");

                    b.Property<double>("InitialPosition");

                    b.HasDiscriminator().HasValue("VerticalResolutionCalibrationProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.OffsetCalibrationProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.PositioningProcedure");

                    b.Property<int>("ReferenceCellId");

                    b.HasDiscriminator().HasValue("OffsetCalibrationProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Bay", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Carousel", "Carousel")
                        .WithMany()
                        .HasForeignKey("CarouselId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.IoDevice", "IoDevice")
                        .WithMany()
                        .HasForeignKey("IoDeviceId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Machine")
                        .WithMany("Bays")
                        .HasForeignKey("MachineId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Shutter", "Shutter")
                        .WithMany()
                        .HasForeignKey("ShutterId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.BayPosition", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Bay")
                        .WithMany("Positions")
                        .HasForeignKey("BayId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.LoadingUnit", "LoadingUnit")
                        .WithMany()
                        .HasForeignKey("LoadingUnitId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Cell", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.CellPanel", "Panel")
                        .WithMany("Cells")
                        .HasForeignKey("PanelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.CellPanel", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Machine")
                        .WithMany("Panels")
                        .HasForeignKey("MachineId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Elevator", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.LoadingUnit", "LoadingUnit")
                        .WithMany()
                        .HasForeignKey("LoadingUnitId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.ElevatorStructuralProperties", "StructuralProperties")
                        .WithMany()
                        .HasForeignKey("StructuralPropertiesId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ElevatorAxis", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Elevator")
                        .WithMany("Axes")
                        .HasForeignKey("ElevatorId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.MovementParameters", "EmptyLoadMovement")
                        .WithMany()
                        .HasForeignKey("EmptyLoadMovementId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.MovementParameters", "MaximumLoadMovement")
                        .WithMany()
                        .HasForeignKey("MaximumLoadMovementId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Error", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.ErrorDefinition", "Definition")
                        .WithMany("Occurrences")
                        .HasForeignKey("Code");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ErrorStatistic", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.ErrorDefinition", "Error")
                        .WithOne("Statistics")
                        .HasForeignKey("Ferretto.VW.MAS.DataModels.ErrorStatistic", "Code");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LoadingUnit", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Cell", "Cell")
                        .WithOne("LoadingUnit")
                        .HasForeignKey("Ferretto.VW.MAS.DataModels.LoadingUnit", "CellId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Machine", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Elevator", "Elevator")
                        .WithMany()
                        .HasForeignKey("ElevatorId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MovementProfile", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.ElevatorAxis")
                        .WithMany("Profiles")
                        .HasForeignKey("ElevatorAxisId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.SetupProceduresSet", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.PositioningProcedure", "BayHeightCheck")
                        .WithMany()
                        .HasForeignKey("BayHeightCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "BeltBurnishingTest")
                        .WithMany()
                        .HasForeignKey("BeltBurnishingTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "CarouselManualMovements")
                        .WithMany()
                        .HasForeignKey("CarouselManualMovementsId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.PositioningProcedure", "CellPanelsCheck")
                        .WithMany()
                        .HasForeignKey("CellPanelsCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.PositioningProcedure", "CellsHeightCheck")
                        .WithMany()
                        .HasForeignKey("CellsHeightCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "DepositAndPickUpTest")
                        .WithMany()
                        .HasForeignKey("DepositAndPickUpTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.HorizontalManualMovementsProcedure", "HorizontalManualMovements")
                        .WithMany()
                        .HasForeignKey("HorizontalManualMovementsId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "LoadFirstDrawerTest")
                        .WithMany()
                        .HasForeignKey("LoadFirstDrawerTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.OffsetCalibrationProcedure", "OffsetCalibration")
                        .WithMany()
                        .HasForeignKey("OffsetCalibrationId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "ShutterHeightCheck")
                        .WithMany()
                        .HasForeignKey("ShutterHeightCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.ShutterManualMovementsProcedure", "ShutterManualMovements")
                        .WithMany()
                        .HasForeignKey("ShutterManualMovementsId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "ShutterTest")
                        .WithMany()
                        .HasForeignKey("ShutterTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.VerticalManualMovementsProcedure", "VerticalManualMovements")
                        .WithMany()
                        .HasForeignKey("VerticalManualMovementsId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.VerticalResolutionCalibrationProcedure", "VerticalResolutionCalibration")
                        .WithMany()
                        .HasForeignKey("VerticalResolutionCalibrationId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "WeightCheck")
                        .WithMany()
                        .HasForeignKey("WeightCheckId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Shutter", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.TorqueCurrentSample", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.TorqueCurrentMeasurementSession", "MeasurementSession")
                        .WithMany("DataSamples")
                        .HasForeignKey("MeasurementSessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.StepMovementParameters", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.MovementProfile")
                        .WithMany("Steps")
                        .HasForeignKey("MovementProfileId");
                });
#pragma warning restore 612, 618
        }
    }
}
