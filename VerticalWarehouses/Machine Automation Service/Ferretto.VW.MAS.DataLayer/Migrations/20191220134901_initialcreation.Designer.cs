// <auto-generated />
using System;
using Ferretto.VW.MAS.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ferretto.VW.MAS.DataLayer.Migrations
{
    [DbContext(typeof(DataLayerContext))]
    [Migration("20191220134901_initialcreation")]
    partial class initialcreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Bay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CarouselId");

                    b.Property<double>("ChainOffset");

                    b.Property<int?>("CurrentMissionId");

                    b.Property<int?>("CurrentWmsMissionOperationId");

                    b.Property<int?>("EmptyLoadMovementId");

                    b.Property<int?>("FullLoadMovementId");

                    b.Property<int?>("InverterId");

                    b.Property<int?>("IoDeviceId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsExternal");

                    b.Property<int?>("MachineId");

                    b.Property<int>("Number");

                    b.Property<int>("Operation");

                    b.Property<double>("Resolution");

                    b.Property<int?>("ShutterId");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CarouselId");

                    b.HasIndex("CurrentMissionId");

                    b.HasIndex("EmptyLoadMovementId");

                    b.HasIndex("FullLoadMovementId");

                    b.HasIndex("InverterId");

                    b.HasIndex("IoDeviceId");

                    b.HasIndex("MachineId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ShutterId");

                    b.ToTable("Bays");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.BayPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BayId");

                    b.Property<double>("Height");

                    b.Property<int?>("LoadingUnitId");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BayId");

                    b.HasIndex("LoadingUnitId");

                    b.ToTable("BayPositions");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Carousel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssistedMovementsId");

                    b.Property<double>("ElevatorDistance");

                    b.Property<bool>("IsHomingExecuted");

                    b.Property<double>("LastIdealPosition");

                    b.Property<int?>("ManualMovementsId");

                    b.HasKey("Id");

                    b.HasIndex("AssistedMovementsId");

                    b.HasIndex("ManualMovementsId");

                    b.ToTable("Carousels");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.CarouselManualParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("FeedRate");

                    b.HasKey("Id");

                    b.ToTable("CarouselManualParameters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Cell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeactivated");

                    b.Property<bool>("IsUnusable");

                    b.Property<int>("PanelId");

                    b.Property<double>("Position");

                    b.Property<int>("Priority");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PanelId");

                    b.ToTable("Cells");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.CellPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MachineId");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.ToTable("CellPanels");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Elevator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BayPositionId");

                    b.Property<int?>("CellId");

                    b.Property<int?>("LoadingUnitId");

                    b.Property<int?>("StructuralPropertiesId");

                    b.HasKey("Id");

                    b.HasIndex("BayPositionId");

                    b.HasIndex("CellId");

                    b.HasIndex("LoadingUnitId");

                    b.HasIndex("StructuralPropertiesId");

                    b.ToTable("Elevators");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ElevatorAxis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssistedMovementsId");

                    b.Property<double>("BrakeActivatePercent");

                    b.Property<double>("BrakeReleaseTime");

                    b.Property<double>("ChainOffset");

                    b.Property<int?>("ElevatorId");

                    b.Property<int?>("EmptyLoadMovementId");

                    b.Property<int?>("FullLoadMovementId");

                    b.Property<int?>("InverterId");

                    b.Property<double>("LastIdealPosition");

                    b.Property<double>("LowerBound");

                    b.Property<int?>("ManualMovementsId");

                    b.Property<double>("Offset");

                    b.Property<int>("Orientation");

                    b.Property<double>("ProfileCalibrateLength");

                    b.Property<int>("ProfileCalibratePosition");

                    b.Property<double>("ProfileCalibrateSpeed");

                    b.Property<decimal>("Resolution");

                    b.Property<int>("TotalCycles");

                    b.Property<double>("UpperBound");

                    b.Property<int?>("WeightMeasurementId");

                    b.HasKey("Id");

                    b.HasIndex("AssistedMovementsId");

                    b.HasIndex("ElevatorId");

                    b.HasIndex("EmptyLoadMovementId");

                    b.HasIndex("FullLoadMovementId");

                    b.HasIndex("InverterId");

                    b.HasIndex("ManualMovementsId");

                    b.HasIndex("WeightMeasurementId");

                    b.ToTable("ElevatorAxes");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ElevatorAxisManualParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("FeedRate");

                    b.Property<double>("FeedRateAfterZero");

                    b.Property<double>("TargetDistance");

                    b.Property<double>("TargetDistanceAfterZero");

                    b.HasKey("Id");

                    b.ToTable("ElevatorAxisManualParameters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ElevatorStructuralProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BeltRigidity");

                    b.Property<double>("BeltSpacing");

                    b.Property<double>("ElevatorWeight");

                    b.Property<double>("HalfShaftLength");

                    b.Property<double>("PulleyDiameter");

                    b.Property<double>("ShaftDiameter");

                    b.Property<double>("ShaftElasticity");

                    b.HasKey("Id");

                    b.ToTable("ElevatorStructuralProperties");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ErrorDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Reason");

                    b.Property<int>("Severity");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ErrorDefinitions");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Code = -1,
                            Description = "NoError",
                            Reason = "NoError",
                            Severity = 0
                        },
                        new
                        {
                            Id = 1,
                            Code = 1,
                            Description = "Cassetto non caricato completamente.",
                            Reason = "Il cassetto potrebbe essersi incastrato.",
                            Severity = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            Description = "Condizioni per il posizionamento non soddisfatte.",
                            Reason = "Controllare che il nottolino sia a zero o che il cassetto sia completamente caricato a bordo elevatore.",
                            Severity = 0
                        },
                        new
                        {
                            Id = 3,
                            Code = 3,
                            Description = "Condizioni per la messa in marcia non soddisfatte.",
                            Reason = "Controllare che i funghi di emergenza siano disattivati e che tutti i sensori di sicurezza siano disattivi.",
                            Severity = 0
                        },
                        new
                        {
                            Id = 4,
                            Code = 4,
                            Description = "È scattata la funzione di sicurezza.",
                            Reason = "Controllare che i funghi di emergenza siano disattivati e che tutti i sensori di sicurezza siano disattivi.",
                            Severity = 0
                        },
                        new
                        {
                            Id = 5,
                            Code = 5,
                            Description = "SecurityButtonWasTriggered",
                            Reason = "SecurityButtonWasTriggered",
                            Severity = 0
                        },
                        new
                        {
                            Id = 6,
                            Code = 6,
                            Description = "SecurityBarrierWasTriggered",
                            Reason = "SecurityBarrierWasTriggered",
                            Severity = 0
                        },
                        new
                        {
                            Id = 7,
                            Code = 7,
                            Description = "SecuritySensorWasTriggered",
                            Reason = "SecuritySensorWasTriggered",
                            Severity = 0
                        },
                        new
                        {
                            Id = 8,
                            Code = 8,
                            Description = "È stato rilevato un errore in uno degli inverter.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 0
                        },
                        new
                        {
                            Id = 9,
                            Code = 9,
                            Description = "CradleNotCorrectlyLoadedDuringPickup",
                            Reason = "Il cassetto sembra non essere completamente a bordo elevatore dopo la fase di carico.",
                            Severity = 0
                        },
                        new
                        {
                            Id = 10,
                            Code = 10,
                            Description = "CradleNotCorrectlyUnloadedDuringDeposit",
                            Reason = "Il cassetto non sembra essere completamente fuori dall'elevatore dopo la fase di scarico.",
                            Severity = 0
                        },
                        new
                        {
                            Id = 11,
                            Code = 11,
                            Description = "ZeroSensorErrorAfterPickup",
                            Reason = "ZeroSensorErrorAfterPickup",
                            Severity = 0
                        },
                        new
                        {
                            Id = 12,
                            Code = 12,
                            Description = "ZeroSensorErrorAfterDeposit",
                            Reason = "ZeroSensorErrorAfterDeposit",
                            Severity = 0
                        },
                        new
                        {
                            Id = 13,
                            Code = 13,
                            Description = "InvalidPresenceSensors",
                            Reason = "Sensori di presenza invalidi",
                            Severity = 0
                        },
                        new
                        {
                            Id = 14,
                            Code = 14,
                            Description = "MissingZeroSensorWithEmptyElevator",
                            Reason = "MissingZeroSensorWithEmptyElevator",
                            Severity = 0
                        },
                        new
                        {
                            Id = 15,
                            Code = 15,
                            Description = "ZeroSensorActiveWithFullElevator",
                            Reason = "ZeroSensorActiveWithFullElevator",
                            Severity = 0
                        },
                        new
                        {
                            Id = 16,
                            Code = 16,
                            Description = "LoadUnitPresentOnEmptyElevator",
                            Reason = "Presenza a bordo elevatore con elevatore logicamente scarico.",
                            Severity = 0
                        },
                        new
                        {
                            Id = 17,
                            Code = 17,
                            Description = "TopLevelBayOccupied",
                            Reason = "Livello alto baia occupato",
                            Severity = 0
                        },
                        new
                        {
                            Id = 18,
                            Code = 18,
                            Description = "BottomLevelBayOccupied",
                            Reason = "Livello basso baia occupato.",
                            Severity = 0
                        },
                        new
                        {
                            Id = 19,
                            Code = 19,
                            Description = "TopLevelBayEmpty",
                            Reason = "TopLevelBayEmpty",
                            Severity = 0
                        },
                        new
                        {
                            Id = 20,
                            Code = 20,
                            Description = "BottomLevelBayEmpty",
                            Reason = "BottomLevelBayEmpty",
                            Severity = 0
                        },
                        new
                        {
                            Id = 21,
                            Code = 21,
                            Description = "SensorZeroBayNotActiveAtStart",
                            Reason = "SensorZeroBayNotActiveAtStart",
                            Severity = 0
                        },
                        new
                        {
                            Id = 22,
                            Code = 22,
                            Description = "Il peso massimo caricato sul cassetto è eccessivo.",
                            Reason = "Scaricare il cassetto in baia e rimuovere il peso in eccesso.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 23,
                            Code = 23,
                            Description = "LoadingUnitWeightTooLow",
                            Reason = "LoadingUnitWeightTooLow",
                            Severity = 1
                        },
                        new
                        {
                            Id = 24,
                            Code = 24,
                            Description = "MachineWeightExceeded",
                            Reason = "MachineWeightExceeded",
                            Severity = 1
                        },
                        new
                        {
                            Id = 25,
                            Code = 25,
                            Description = "DestinationBelowLowerBound",
                            Reason = "DestinationBelowLowerBound",
                            Severity = 1
                        },
                        new
                        {
                            Id = 26,
                            Code = 26,
                            Description = "DestinationOverUpperBound",
                            Reason = "DestinationOverUpperBound",
                            Severity = 1
                        },
                        new
                        {
                            Id = 27,
                            Code = 27,
                            Description = "BayInvertersBusy",
                            Reason = "BayInvertersBusy",
                            Severity = 1
                        },
                        new
                        {
                            Id = 28,
                            Code = 28,
                            Description = "IoDeviceError",
                            Reason = "IoDeviceError",
                            Severity = 1
                        },
                        new
                        {
                            Id = 29,
                            Code = 29,
                            Description = "MachineModeNotValid",
                            Reason = "MachineModeNotValid",
                            Severity = 1
                        },
                        new
                        {
                            Id = 30,
                            Code = 30,
                            Description = "AnotherMissionIsActiveForThisLoadUnit",
                            Reason = "AnotherMissionIsActiveForThisLoadUnit",
                            Severity = 1
                        },
                        new
                        {
                            Id = 31,
                            Code = 31,
                            Description = "AnotherMissionIsActiveForThisBay",
                            Reason = "AnotherMissionIsActiveForThisBay",
                            Severity = 1
                        },
                        new
                        {
                            Id = 32,
                            Code = 32,
                            Description = "AnotherMissionOfThisTypeIsActive",
                            Reason = "AnotherMissionOfThisTypeIsActive",
                            Severity = 1
                        },
                        new
                        {
                            Id = 33,
                            Code = 33,
                            Description = "WarehouseIsFull",
                            Reason = "WarehouseIsFull",
                            Severity = 1
                        },
                        new
                        {
                            Id = 200000,
                            Code = 200000,
                            Description = "Errore inverter.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 200001,
                            Code = 200001,
                            Description = "Paramentro inverter non valido.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 200002,
                            Code = 200002,
                            Description = "Dataset inverter non valido.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 200003,
                            Code = 200003,
                            Description = "Parametro inverter è in sola scrittura.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 200004,
                            Code = 200004,
                            Description = "Parametro inverter è in sola lettura.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 200005,
                            Code = 200005,
                            Description = "Errore lettura EEPROM dell'inverter.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 200006,
                            Code = 200006,
                            Description = "Errore scrittura EEPROM dell'inverter.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 200007,
                            Code = 200007,
                            Description = "Errore checksum EEPROM dell'inverter.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 200008,
                            Code = 200008,
                            Description = "Impossibile scrivere il parametro dell'inverter durante l'esecuzione.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 200009,
                            Code = 200009,
                            Description = "I dati del dataset dell'inverter non corrispondono.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 200011,
                            Code = 200011,
                            Description = "Parametro sconosciuto passato all'inverter.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 200013,
                            Code = 200013,
                            Description = "Errore di sintassi del messaggio inviato all'inverter.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 200014,
                            Code = 200014,
                            Description = "Incoerenza tra la lunghezza del messaggio all'inverter e il tipo di dato del messaggio.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 200020,
                            Code = 200020,
                            Description = "Il nodo specificato non è disponibile.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 200030,
                            Code = 200030,
                            Description = "Errore di sintassi del messaggio inviato all'inverter.",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300000,
                            Code = 300000,
                            Description = "Errore Machine Manager",
                            Reason = "Spegnere e riaccendere la macchina. Se il problema persiste, contattare l'assistenza.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300001,
                            Code = 300001,
                            Description = "Nessun cassetto presente nella baia indicata",
                            Reason = "Assicurarsi che un cassetto sia presente in baia e che i sensori di presenza funzionino correttamente",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300002,
                            Code = 300002,
                            Description = "Inconsistenza database posizione sorgente cassetto",
                            Reason = "Verificare che la posizione sorgente del cassetto all'interno del database sia correttamente configurata",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300003,
                            Code = 300003,
                            Description = "Inconsistenza database cella destinazione cassetto",
                            Reason = "Verificare che la cella destinazione del cassetto all'interno del database sia correttamente configurata",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300004,
                            Code = 300004,
                            Description = "Culla elevatore occupata",
                            Reason = "Verificare che la culla elevatore sia vuota. Verificare il corretto funzionamento dei sensori di presenza cassetto sulla culla.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300005,
                            Code = 300005,
                            Description = "Cassetto rilevato nella baia di estrazione",
                            Reason = "Se il cassetto è stato rimosso controllare i sensori di presenza cassetto in baia, altrimenti rimuovere il cassetto dalla baia.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300006,
                            Code = 300006,
                            Description = "Baia di destinazione del cassetto occupata",
                            Reason = "Verificare che la baia di destinazione del cassetto sia effettivamente vuota. Verificare che i sensori di presenza cassetto in baia funzionino correttamente.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300007,
                            Code = 300007,
                            Description = "Inconsistenza database cella sorgente cassetto",
                            Reason = "Verificare che la cella sorgent del cassetto all'interno del database sia correttamente configurata",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300008,
                            Code = 300008,
                            Description = "Inconsistenza database cassetto",
                            Reason = "Il cassetto selezionato non è presente nel database. Verificare il numero cassetto inserito e la corretta configurazione del database.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300009,
                            Code = 300009,
                            Description = "Il cassetto selezionato non risulta caricato in magazzino",
                            Reason = "Il cassetto selezionato risulta presente nel database ma non risulta caricato nel magazzino. Verificare la configurazione del database.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300010,
                            Code = 300010,
                            Description = "Baia sorgente del cassetto vuota",
                            Reason = "Verificare che il cassetto sia effettivamente presente nella baia sorgente. Verificare che i sensori di presenza cassetto in baia funzionino correttamente.",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300011,
                            Code = 300011,
                            Description = "MachineManagerErrorLoadingUnitShutterOpen",
                            Reason = "MachineManagerErrorLoadingUnitShutterOpen",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300012,
                            Code = 300012,
                            Description = "MachineManagerErrorLoadingUnitShutterClosed",
                            Reason = "MachineManagerErrorLoadingUnitShutterClosed",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300013,
                            Code = 300013,
                            Description = "MachineManagerErrorLoadingUnitPresentInCell",
                            Reason = "MachineManagerErrorLoadingUnitPresentInCell",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300014,
                            Code = 300014,
                            Description = "MachineManagerErrorLoadingUnitOtherBay",
                            Reason = "MachineManagerErrorLoadingUnitOtherBay",
                            Severity = 1
                        },
                        new
                        {
                            Id = 300015,
                            Code = 300015,
                            Description = "Cassetto non presente sull'Elevatore",
                            Reason = "MachineManagerErrorLoadingUnitSourceElevator",
                            Severity = 1
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ErrorStatistic", b =>
                {
                    b.Property<int>("Code");

                    b.Property<int>("TotalErrors");

                    b.HasKey("Code");

                    b.ToTable("ErrorStatistics");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 2,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 3,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 4,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 5,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 6,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 7,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 8,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 9,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 10,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 11,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 12,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 13,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 14,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 15,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 16,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 17,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 18,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 19,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 20,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 21,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 22,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 23,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 24,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 25,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 26,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 27,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 28,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 29,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 30,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 31,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 32,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 33,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 200000,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 200001,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 200002,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 200003,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 200004,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 200005,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 200006,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 200007,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 200008,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 200009,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 200011,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 200013,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 200014,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 200020,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 200030,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300000,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300001,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300002,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300003,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300004,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300005,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300006,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300007,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300008,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300009,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300010,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300011,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300012,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300013,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300014,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 300015,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = -1,
                            TotalErrors = 0
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Inverter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("Index");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<int>("TcpPort");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("Inverters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.IoDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("Index");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<int>("TcpPort");

                    b.HasKey("Id");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("IoDevices");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Laser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BayId");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<int>("TcpPort");

                    b.HasKey("Id");

                    b.HasIndex("BayId")
                        .IsUnique();

                    b.ToTable("Lasers");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LoadingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CellId");

                    b.Property<string>("Description");

                    b.Property<double>("GrossWeight");

                    b.Property<double>("Height");

                    b.Property<bool>("IsIntoMachine");

                    b.Property<double>("MaxNetWeight");

                    b.Property<int>("MissionsCount");

                    b.Property<long>("Status");

                    b.Property<double>("Tare");

                    b.HasKey("Id");

                    b.HasIndex("CellId")
                        .IsUnique();

                    b.ToTable("LoadingUnits");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BayNumber");

                    b.Property<string>("Data");

                    b.Property<string>("Description");

                    b.Property<int>("Destination");

                    b.Property<int>("ErrorLevel");

                    b.Property<int>("Source");

                    b.Property<int>("Status");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ElevatorId");

                    b.Property<double>("Height");

                    b.Property<double>("LoadUnitMaxHeight");

                    b.Property<double>("LoadUnitMaxNetWeight");

                    b.Property<double>("LoadUnitTare");

                    b.Property<double>("MaxGrossWeight");

                    b.Property<string>("ModelName");

                    b.Property<string>("SerialNumber");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MachineError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BayNumber");

                    b.Property<int>("Code");

                    b.Property<DateTime>("OccurrenceDate");

                    b.Property<DateTime?>("ResolutionDate");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MachineStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("TotalAutomaticTime");

                    b.Property<int>("TotalBeltCycles");

                    b.Property<TimeSpan>("TotalMissionTime");

                    b.Property<int>("TotalMovedTrays");

                    b.Property<int>("TotalMovedTraysInBay1");

                    b.Property<int>("TotalMovedTraysInBay2");

                    b.Property<int>("TotalMovedTraysInBay3");

                    b.Property<TimeSpan>("TotalPowerOnTime");

                    b.Property<int>("TotalVerticalAxisCycles");

                    b.Property<double>("TotalVerticalAxisKilometers");

                    b.Property<double>("WeightCapacityPercentage");

                    b.HasKey("Id");

                    b.ToTable("MachineStatistics");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            TotalAutomaticTime = new TimeSpan(0, 0, 0, 0, 0),
                            TotalBeltCycles = 0,
                            TotalMissionTime = new TimeSpan(0, 0, 0, 0, 0),
                            TotalMovedTrays = 0,
                            TotalMovedTraysInBay1 = 0,
                            TotalMovedTraysInBay2 = 0,
                            TotalMovedTraysInBay3 = 0,
                            TotalPowerOnTime = new TimeSpan(0, 0, 0, 0, 0),
                            TotalVerticalAxisCycles = 0,
                            TotalVerticalAxisKilometers = 0.0,
                            WeightCapacityPercentage = 0.0
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Mission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("DestinationCellId");

                    b.Property<Guid>("FsmId");

                    b.Property<string>("FsmRestoreStateName");

                    b.Property<string>("FsmStateName");

                    b.Property<int?>("LoadingUnitCellSourceId");

                    b.Property<int>("LoadingUnitDestination");

                    b.Property<int>("LoadingUnitId");

                    b.Property<string>("LoadingUnitSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MissionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NeedHomingAxis");

                    b.Property<bool>("NeedMovingBackward");

                    b.Property<int>("Priority");

                    b.Property<bool>("RestoreConditions");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TargetBay")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("WmsId");

                    b.HasKey("Id");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MovementParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Acceleration");

                    b.Property<double>("Deceleration");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<double>("Speed");

                    b.HasKey("Id");

                    b.ToTable("MovementParameters");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MovementParameters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MovementProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ElevatorAxisId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TotalDistance");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorAxisId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MovementProfiles");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ServicingInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("InstallationDate");

                    b.Property<DateTime?>("LastServiceDate");

                    b.Property<DateTime?>("NextServiceDate");

                    b.Property<int>("ServiceStatus");

                    b.HasKey("Id");

                    b.ToTable("ServicingInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InstallationDate = new DateTime(2017, 2, 20, 14, 49, 0, 764, DateTimeKind.Local).AddTicks(6360),
                            ServiceStatus = 86
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.SetupProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<double>("FeedRate");

                    b.Property<bool>("IsCompleted");

                    b.HasKey("Id");

                    b.ToTable("SetupProcedures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SetupProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.SetupProceduresSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BayHeightCheckId");

                    b.Property<int?>("BeltBurnishingTestId");

                    b.Property<int?>("CellPanelsCheckId");

                    b.Property<int?>("CellsHeightCheckId");

                    b.Property<int?>("DepositAndPickUpTestId");

                    b.Property<int?>("LoadFirstDrawerTestId");

                    b.Property<int?>("ShutterHeightCheckId");

                    b.Property<int?>("ShutterTestId");

                    b.Property<int?>("VerticalOffsetCalibrationId");

                    b.Property<int?>("VerticalResolutionCalibrationId");

                    b.HasKey("Id");

                    b.HasIndex("BayHeightCheckId");

                    b.HasIndex("BeltBurnishingTestId");

                    b.HasIndex("CellPanelsCheckId");

                    b.HasIndex("CellsHeightCheckId");

                    b.HasIndex("DepositAndPickUpTestId");

                    b.HasIndex("LoadFirstDrawerTestId");

                    b.HasIndex("ShutterHeightCheckId");

                    b.HasIndex("ShutterTestId");

                    b.HasIndex("VerticalOffsetCalibrationId");

                    b.HasIndex("VerticalResolutionCalibrationId");

                    b.ToTable("SetupProceduresSets");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.SetupStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllLoadingUnits");

                    b.Property<bool>("Bay1FirstLoadingUnit");

                    b.Property<bool>("Bay1HeightCheck");

                    b.Property<bool>("Bay1Laser");

                    b.Property<bool>("Bay1Shape");

                    b.Property<bool>("Bay1Shutter");

                    b.Property<bool>("Bay2FirstLoadingUnit");

                    b.Property<bool>("Bay2HeightCheck");

                    b.Property<bool>("Bay2Laser");

                    b.Property<bool>("Bay2Shape");

                    b.Property<bool>("Bay2Shutter");

                    b.Property<bool>("Bay3FirstLoadingUnit");

                    b.Property<bool>("Bay3HeightCheck");

                    b.Property<bool>("Bay3Laser");

                    b.Property<bool>("Bay3Shape");

                    b.Property<bool>("Bay3Shutter");

                    b.Property<DateTime?>("CompletedDate");

                    b.Property<bool>("HorizontalHoming");

                    b.Property<bool>("WeightMeasurement");

                    b.HasKey("Id");

                    b.ToTable("SetupStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllLoadingUnits = false,
                            Bay1FirstLoadingUnit = false,
                            Bay1HeightCheck = false,
                            Bay1Laser = false,
                            Bay1Shape = false,
                            Bay1Shutter = false,
                            Bay2FirstLoadingUnit = false,
                            Bay2HeightCheck = false,
                            Bay2Laser = false,
                            Bay2Shape = false,
                            Bay2Shutter = false,
                            Bay3FirstLoadingUnit = false,
                            Bay3HeightCheck = false,
                            Bay3Laser = false,
                            Bay3Shape = false,
                            Bay3Shutter = false,
                            HorizontalHoming = false,
                            WeightMeasurement = false
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Shutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssistedMovementsId");

                    b.Property<int?>("InverterId");

                    b.Property<int?>("ManualMovementsId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssistedMovementsId");

                    b.HasIndex("InverterId");

                    b.HasIndex("ManualMovementsId");

                    b.ToTable("Shutters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ShutterManualParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("FeedRate");

                    b.Property<double>("HighSpeedDurationClose");

                    b.Property<double>("HighSpeedDurationOpen");

                    b.Property<double>("MaxSpeed");

                    b.Property<double>("MinSpeed");

                    b.HasKey("Id");

                    b.ToTable("ShutterManualParameters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.TorqueCurrentMeasurementSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("LoadedNetWeight");

                    b.Property<int?>("LoadingUnitId");

                    b.HasKey("Id");

                    b.ToTable("TorqueCurrentMeasurementSessions");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.TorqueCurrentSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MeasurementSessionId");

                    b.Property<DateTime>("RequestTimeStamp");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementSessionId");

                    b.ToTable("TorqueCurrentSamples");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessLevel");

                    b.Property<string>("Name");

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("PasswordSalt")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.WeightMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("MeasureConst0");

                    b.Property<double>("MeasureConst1");

                    b.Property<double>("MeasureConst2");

                    b.Property<double>("MeasureSpeed");

                    b.Property<int>("MeasureTime");

                    b.HasKey("Id");

                    b.ToTable("WeightMeasurements");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.StepMovementParameters", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.MovementParameters");

                    b.Property<bool>("AdjustByWeight");

                    b.Property<int?>("MovementProfileId");

                    b.Property<int>("Number");

                    b.Property<double>("Position");

                    b.HasIndex("MovementProfileId");

                    b.HasDiscriminator().HasValue("StepMovementParameters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.PositioningProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.SetupProcedure");

                    b.Property<double>("Step");

                    b.HasDiscriminator().HasValue("PositioningProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.SetupProcedure");

                    b.Property<int>("PerformedCycles");

                    b.Property<int>("RequiredCycles");

                    b.HasDiscriminator().HasValue("RepeatedTestProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.VerticalResolutionCalibrationProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.SetupProcedure");

                    b.Property<double>("FinalPosition");

                    b.Property<double>("InitialPosition");

                    b.HasDiscriminator().HasValue("VerticalResolutionCalibrationProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.OffsetCalibrationProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.PositioningProcedure");

                    b.Property<int>("ReferenceCellId");

                    b.HasDiscriminator().HasValue("OffsetCalibrationProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Bay", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Carousel", "Carousel")
                        .WithMany()
                        .HasForeignKey("CarouselId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Mission", "CurrentMission")
                        .WithMany()
                        .HasForeignKey("CurrentMissionId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.MovementParameters", "EmptyLoadMovement")
                        .WithMany()
                        .HasForeignKey("EmptyLoadMovementId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.MovementParameters", "FullLoadMovement")
                        .WithMany()
                        .HasForeignKey("FullLoadMovementId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.IoDevice", "IoDevice")
                        .WithMany()
                        .HasForeignKey("IoDeviceId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Machine")
                        .WithMany("Bays")
                        .HasForeignKey("MachineId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Shutter", "Shutter")
                        .WithMany()
                        .HasForeignKey("ShutterId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.BayPosition", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Bay", "Bay")
                        .WithMany("Positions")
                        .HasForeignKey("BayId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.LoadingUnit", "LoadingUnit")
                        .WithMany()
                        .HasForeignKey("LoadingUnitId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Carousel", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.CarouselManualParameters", "AssistedMovements")
                        .WithMany()
                        .HasForeignKey("AssistedMovementsId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.CarouselManualParameters", "ManualMovements")
                        .WithMany()
                        .HasForeignKey("ManualMovementsId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Cell", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.CellPanel", "Panel")
                        .WithMany("Cells")
                        .HasForeignKey("PanelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.CellPanel", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Machine")
                        .WithMany("Panels")
                        .HasForeignKey("MachineId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Elevator", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.BayPosition", "BayPosition")
                        .WithMany()
                        .HasForeignKey("BayPositionId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Cell", "Cell")
                        .WithMany()
                        .HasForeignKey("CellId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.LoadingUnit", "LoadingUnit")
                        .WithMany()
                        .HasForeignKey("LoadingUnitId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.ElevatorStructuralProperties", "StructuralProperties")
                        .WithMany()
                        .HasForeignKey("StructuralPropertiesId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ElevatorAxis", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.ElevatorAxisManualParameters", "AssistedMovements")
                        .WithMany()
                        .HasForeignKey("AssistedMovementsId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Elevator")
                        .WithMany("Axes")
                        .HasForeignKey("ElevatorId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.MovementParameters", "EmptyLoadMovement")
                        .WithMany()
                        .HasForeignKey("EmptyLoadMovementId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.MovementParameters", "FullLoadMovement")
                        .WithMany()
                        .HasForeignKey("FullLoadMovementId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.ElevatorAxisManualParameters", "ManualMovements")
                        .WithMany()
                        .HasForeignKey("ManualMovementsId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.WeightMeasurement", "WeightMeasurement")
                        .WithMany()
                        .HasForeignKey("WeightMeasurementId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ErrorStatistic", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.ErrorDefinition", "Error")
                        .WithOne("Statistics")
                        .HasForeignKey("Ferretto.VW.MAS.DataModels.ErrorStatistic", "Code");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Laser", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Bay", "Bay")
                        .WithOne("Laser")
                        .HasForeignKey("Ferretto.VW.MAS.DataModels.Laser", "BayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LoadingUnit", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Cell", "Cell")
                        .WithOne("LoadingUnit")
                        .HasForeignKey("Ferretto.VW.MAS.DataModels.LoadingUnit", "CellId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Machine", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Elevator", "Elevator")
                        .WithMany()
                        .HasForeignKey("ElevatorId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MachineError", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.ErrorDefinition", "Definition")
                        .WithMany("Occurrences")
                        .HasForeignKey("Code");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MovementProfile", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.ElevatorAxis")
                        .WithMany("Profiles")
                        .HasForeignKey("ElevatorAxisId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.SetupProceduresSet", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.PositioningProcedure", "BayHeightCheck")
                        .WithMany()
                        .HasForeignKey("BayHeightCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "BeltBurnishingTest")
                        .WithMany()
                        .HasForeignKey("BeltBurnishingTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.PositioningProcedure", "CellPanelsCheck")
                        .WithMany()
                        .HasForeignKey("CellPanelsCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.PositioningProcedure", "CellsHeightCheck")
                        .WithMany()
                        .HasForeignKey("CellsHeightCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "DepositAndPickUpTest")
                        .WithMany()
                        .HasForeignKey("DepositAndPickUpTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "LoadFirstDrawerTest")
                        .WithMany()
                        .HasForeignKey("LoadFirstDrawerTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "ShutterHeightCheck")
                        .WithMany()
                        .HasForeignKey("ShutterHeightCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "ShutterTest")
                        .WithMany()
                        .HasForeignKey("ShutterTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.OffsetCalibrationProcedure", "VerticalOffsetCalibration")
                        .WithMany()
                        .HasForeignKey("VerticalOffsetCalibrationId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.VerticalResolutionCalibrationProcedure", "VerticalResolutionCalibration")
                        .WithMany()
                        .HasForeignKey("VerticalResolutionCalibrationId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Shutter", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.ShutterManualParameters", "AssistedMovements")
                        .WithMany()
                        .HasForeignKey("AssistedMovementsId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.ShutterManualParameters", "ManualMovements")
                        .WithMany()
                        .HasForeignKey("ManualMovementsId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.TorqueCurrentSample", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.TorqueCurrentMeasurementSession", "MeasurementSession")
                        .WithMany("DataSamples")
                        .HasForeignKey("MeasurementSessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.StepMovementParameters", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.MovementProfile")
                        .WithMany("Steps")
                        .HasForeignKey("MovementProfileId");
                });
#pragma warning restore 612, 618
        }
    }
}
