// <auto-generated />
using System;
using Ferretto.VW.MAS.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ferretto.VW.MAS.DataLayer.Migrations
{
    [DbContext(typeof(DataLayerContext))]
    [Migration("20221007091608_WaitingListPriorityHighlightedAndListConfirm")]
    partial class WaitingListPriorityHighlightedAndListConfirm
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25");

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Accessory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceInformationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IsConfigured")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsConfiguredNew")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IsEnabled")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabledNew")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceInformationId");

                    b.ToTable("Accessories");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Accessory");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.AutoCompactingSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("BeginTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOptimizeRotationClass")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AutoCompactingSettings");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Bay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccessoriesId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BarcodeAutomaticPut")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CarouselId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ChainOffset")
                        .HasColumnType("REAL");

                    b.Property<bool?>("CheckListContinueInOtherMachine")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CurrentMissionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CyclesToCalibrate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmptyLoadMovementId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FullLoadMovementId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Inventory")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InverterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IoDeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAdjustByWeight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCheckIntrusion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFastDepositToBay")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTelescopic")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastCalibrationCycles")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MachineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Operation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Pick")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ProfileConst0")
                        .HasColumnType("REAL");

                    b.Property<double>("ProfileConst1")
                        .HasColumnType("REAL");

                    b.Property<bool>("Put")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Resolution")
                        .HasColumnType("REAL");

                    b.Property<string>("RotationClass")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ShowBarcodeImage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShutterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Side")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalCycles")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("View")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccessoriesId");

                    b.HasIndex("CarouselId");

                    b.HasIndex("CurrentMissionId");

                    b.HasIndex("EmptyLoadMovementId");

                    b.HasIndex("ExternalId");

                    b.HasIndex("FullLoadMovementId");

                    b.HasIndex("InverterId");

                    b.HasIndex("IoDeviceId");

                    b.HasIndex("MachineId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ShutterId");

                    b.ToTable("Bays");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.BayAccessories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlphaNumericBarId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BarcodeReaderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CardReaderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LabelPrinterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LaserPointerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TokenReaderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WeightingScaleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AlphaNumericBarId");

                    b.HasIndex("BarcodeReaderId");

                    b.HasIndex("CardReaderId");

                    b.HasIndex("LabelPrinterId");

                    b.HasIndex("LaserPointerId");

                    b.HasIndex("TokenReaderId");

                    b.HasIndex("WeightingScaleId");

                    b.ToTable("BayAccessories");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.BayPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BayId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LoadingUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("MaxDoubleHeight")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxSingleHeight")
                        .HasColumnType("REAL");

                    b.Property<double>("ProfileOffset")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("BayId");

                    b.HasIndex("LoadingUnitId");

                    b.ToTable("BayPositions");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Carousel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssistedMovementsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BayFindZeroLimit")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ElevatorDistance")
                        .HasColumnType("REAL");

                    b.Property<double>("HomingCreepSpeed")
                        .HasColumnType("REAL");

                    b.Property<double>("HomingFastSpeed")
                        .HasColumnType("REAL");

                    b.Property<double>("LastIdealPosition")
                        .HasColumnType("REAL");

                    b.Property<int?>("ManualMovementsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssistedMovementsId");

                    b.HasIndex("ManualMovementsId");

                    b.ToTable("Carousels");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.CarouselManualParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("FeedRate")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("CarouselManualParameters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Cell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlockLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFree")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PanelId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Position")
                        .HasColumnType("REAL");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RotationClass")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PanelId");

                    b.ToTable("Cells");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.CellPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MachineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Side")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.ToTable("CellPanels");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.DeviceInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirmwareVersion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ManufactureDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DeviceInformation");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Elevator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BayPositionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CellId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LoadingUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StructuralPropertiesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BayPositionId");

                    b.HasIndex("CellId");

                    b.HasIndex("LoadingUnitId");

                    b.HasIndex("StructuralPropertiesId");

                    b.ToTable("Elevators");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ElevatorAxis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssistedMovementsId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("BrakeActivatePercent")
                        .HasColumnType("REAL");

                    b.Property<double>("BrakeReleaseTime")
                        .HasColumnType("REAL");

                    b.Property<int>("Center")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ChainOffset")
                        .HasColumnType("REAL");

                    b.Property<int?>("ElevatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmptyLoadMovementId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FullLoadMovementId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("HomingAcceleration")
                        .HasColumnType("REAL");

                    b.Property<double>("HomingCreepSpeed")
                        .HasColumnType("REAL");

                    b.Property<double>("HomingFastSpeed")
                        .HasColumnType("REAL");

                    b.Property<double>("HorizontalCalibrateSpeed")
                        .HasColumnType("REAL");

                    b.Property<int?>("InverterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastCalibrationCycles")
                        .HasColumnType("INTEGER");

                    b.Property<double>("LastIdealPosition")
                        .HasColumnType("REAL");

                    b.Property<double>("LowerBound")
                        .HasColumnType("REAL");

                    b.Property<int?>("ManualMovementsId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Offset")
                        .HasColumnType("REAL");

                    b.Property<int>("Orientation")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ProfileCalibrateLength")
                        .HasColumnType("REAL");

                    b.Property<int>("ProfileCalibratePosition")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ProfileCalibrateSpeed")
                        .HasColumnType("REAL");

                    b.Property<double>("Resolution")
                        .HasColumnType("REAL");

                    b.Property<double>("UpperBound")
                        .HasColumnType("REAL");

                    b.Property<int?>("VerticalDepositCompensationDelay")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("VerticalDepositOffset")
                        .HasColumnType("REAL");

                    b.Property<int?>("VerticalPickupCompensationDelay")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("VerticalPickupOffset")
                        .HasColumnType("REAL");

                    b.Property<int?>("WeightMeasurementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssistedMovementsId");

                    b.HasIndex("ElevatorId");

                    b.HasIndex("EmptyLoadMovementId");

                    b.HasIndex("FullLoadMovementId");

                    b.HasIndex("InverterId");

                    b.HasIndex("ManualMovementsId");

                    b.HasIndex("WeightMeasurementId");

                    b.ToTable("ElevatorAxes");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ElevatorAxisManualParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("FeedRate")
                        .HasColumnType("REAL");

                    b.Property<double>("FeedRateAfterZero")
                        .HasColumnType("REAL");

                    b.Property<double?>("TargetDistance")
                        .HasColumnType("REAL");

                    b.Property<double?>("TargetDistanceAfterZero")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ElevatorAxisManualParameters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ElevatorStructuralProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BeltRigidity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("BeltSpacing")
                        .HasColumnType("REAL");

                    b.Property<double>("ElevatorWeight")
                        .HasColumnType("REAL");

                    b.Property<double>("HalfShaftLength")
                        .HasColumnType("REAL");

                    b.Property<double>("PulleyDiameter")
                        .HasColumnType("REAL");

                    b.Property<int>("SecondTermMultiplier")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ShaftDiameter")
                        .HasColumnType("REAL");

                    b.Property<double>("ShaftElasticity")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ElevatorStructuralProperties");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ErrorStatistic", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalErrors")
                        .HasColumnType("INTEGER");

                    b.HasKey("Code");

                    b.ToTable("ErrorStatistics");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 2,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 3,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 4,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 5,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 6,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 7,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 8,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 9,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 10,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 11,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 12,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 13,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 14,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 15,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 16,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 17,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 18,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 19,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 20,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 21,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 22,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 23,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 24,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 25,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 26,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 27,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 28,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 29,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 30,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 31,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 32,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 33,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 34,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 35,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 36,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 37,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 38,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 39,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 40,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 41,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 42,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 43,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 44,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 45,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 46,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 47,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 48,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 49,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 50,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 51,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 52,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 53,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 54,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 55,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 56,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 57,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 58,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 59,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 60,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 61,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 62,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 63,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 64,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 65,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 66,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 67,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 68,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 69,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 70,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 71,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 72,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 73,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 74,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 75,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 76,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 77,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 78,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 79,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 80,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 81,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 82,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 83,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 84,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 85,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 86,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 87,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 88,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 89,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 90,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 91,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 92,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 93,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 94,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 95,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 1000,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 1001,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 1002,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 1003,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 1004,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 1005,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 1006,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 1007,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 1008,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 1009,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 1011,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 1013,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 1014,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 1020,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = 1030,
                            TotalErrors = 0
                        },
                        new
                        {
                            Code = -1,
                            TotalErrors = 0
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.External", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssistedMovementsId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ExtraRace")
                        .HasColumnType("REAL");

                    b.Property<double>("HomingCreepSpeed")
                        .HasColumnType("REAL");

                    b.Property<double>("HomingFastSpeed")
                        .HasColumnType("REAL");

                    b.Property<double>("LastIdealPosition")
                        .HasColumnType("REAL");

                    b.Property<int?>("ManualMovementsId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Race")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AssistedMovementsId");

                    b.HasIndex("ManualMovementsId");

                    b.ToTable("Externals");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ExternalBayManualParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("FeedRate")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ExternalBayManualParameters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Instruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DefinitionId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("DoubleCounter")
                        .HasColumnType("REAL");

                    b.Property<int>("InstructionStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IntCounter")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDone")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsToDo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("MaintenanceDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ServicingInfoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.HasIndex("ServicingInfoId");

                    b.ToTable("Instructions");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.InstructionDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Axis")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BayNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CounterName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Device")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InstructionType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCarousel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsShutter")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxDays")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxRelativeCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxTotalCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Operation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SetPoint")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("InstructionDefinitions");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Inverter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<int>("TcpPort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("Inverters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.InverterParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<short>("Code")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataSet")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DecimalCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Error")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InverterId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<short>("ReadCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StringValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("Um")
                        .HasColumnType("TEXT");

                    b.Property<short>("WriteCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InverterId");

                    b.ToTable("InverterParameter");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.IoDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<int>("TcpPort")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("IoDevices");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Laser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BayId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<int>("TcpPort")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BayId");

                    b.ToTable("Lasers");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LoadingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CellId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<double>("GrossWeight")
                        .HasColumnType("REAL");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsInFullTest")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsIntoMachine")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRotationClassFixed")
                        .HasColumnType("INTEGER");

                    b.Property<double>("LaserOffset")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxNetWeight")
                        .HasColumnType("REAL");

                    b.Property<int>("MissionsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MissionsCountRotation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RotationClass")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Tare")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CellId")
                        .IsUnique();

                    b.ToTable("LoadingUnits");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BayNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Destination")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ErrorLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Source")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LogoutSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("BeginTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RemainingTime")
                        .HasColumnType("REAL");

                    b.Property<int>("Timeout")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LogoutSettings");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackupServer")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackupServerPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackupServerUsername")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Box")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanUserEnableWms")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ElevatorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnabeNoteRules")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpireCountPrecent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpireDays")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FireAlarm")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<int>("HorizontalCyclesToCalibrate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HorizontalPositionToCalibrate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAddItemByList")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAxisChanged")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCarrefour")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDbSaveOnServer")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDbSaveOnTelemetry")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisableQtyItemEditingPick")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDoubleConfirmBarcodeInventory")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDoubleConfirmBarcodePick")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDoubleConfirmBarcodePut")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDrapery")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnableAddItem")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnableHandlingItemOperations")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHeartBeat")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocalMachineItems")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOrderList")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsQuantityLimited")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequestConfirmForLastOperationOnLoadingUnit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRotationClass")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUpdatingStockByDifference")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemUniqueIdLength")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ListPickConfirm")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ListPutConfirm")
                        .HasColumnType("INTEGER");

                    b.Property<double>("LoadUnitDepth")
                        .HasColumnType("REAL");

                    b.Property<double>("LoadUnitMaxHeight")
                        .HasColumnType("REAL");

                    b.Property<double>("LoadUnitMaxNetWeight")
                        .HasColumnType("REAL");

                    b.Property<double>("LoadUnitMinHeight")
                        .HasColumnType("REAL");

                    b.Property<double>("LoadUnitTare")
                        .HasColumnType("REAL");

                    b.Property<double>("LoadUnitVeryHeavyPercent")
                        .HasColumnType("REAL");

                    b.Property<double>("LoadUnitWidth")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxGrossWeight")
                        .HasColumnType("REAL");

                    b.Property<string>("ModelName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Simulation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToteBarcodeLength")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TouchHelper")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VerticalCyclesToCalibrate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WaitingListPriorityHighlighted")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MachineError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalText")
                        .HasColumnType("TEXT");

                    b.Property<int>("BayNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Code")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DetailCode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InverterIndex")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OccurrenceDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MachineStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TotalAutomaticTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalBayChainKilometers1")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalBayChainKilometers2")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalBayChainKilometers3")
                        .HasColumnType("REAL");

                    b.Property<int>("TotalHorizontalAxisCycles")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TotalHorizontalAxisKilometers")
                        .HasColumnType("REAL");

                    b.Property<int>("TotalLoadUnitsInBay1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalLoadUnitsInBay2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalLoadUnitsInBay3")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TotalMissionTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("TotalPowerOnTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalVerticalAxisCycles")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TotalVerticalAxisKilometers")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalWeightBack")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalWeightFront")
                        .HasColumnType("REAL");

                    b.Property<double>("WeightCapacityPercentage")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("MachineStatistics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TotalAutomaticTime = new TimeSpan(0, 0, 0, 0, 0),
                            TotalBayChainKilometers1 = 0.0,
                            TotalBayChainKilometers2 = 0.0,
                            TotalBayChainKilometers3 = 0.0,
                            TotalHorizontalAxisCycles = 0,
                            TotalHorizontalAxisKilometers = 0.0,
                            TotalLoadUnitsInBay1 = 0,
                            TotalLoadUnitsInBay2 = 0,
                            TotalLoadUnitsInBay3 = 0,
                            TotalMissionTime = new TimeSpan(0, 0, 0, 0, 0),
                            TotalPowerOnTime = new TimeSpan(0, 0, 0, 0, 0),
                            TotalVerticalAxisCycles = 0,
                            TotalVerticalAxisKilometers = 0.0,
                            TotalWeightBack = 0.0,
                            TotalWeightFront = 0.0,
                            WeightCapacityPercentage = 0.0
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Mission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BayNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CloseShutterBayNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CloseShutterPosition")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DestinationCellId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EjectLoadUnit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ErrorCode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ErrorMovements")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LoadUnitCellSourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoadUnitDestination")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoadUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoadUnitSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("MissionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MissionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NeedHomingAxis")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NeedMovingBackward")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OpenShutterPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RestoreConditions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RestoreStep")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Step")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StepTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("StopReason")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TargetBay")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("WmsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MovementParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Acceleration")
                        .HasColumnType("REAL");

                    b.Property<double>("Deceleration")
                        .HasColumnType("REAL");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Speed")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("MovementParameters");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MovementParameters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MovementProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ElevatorAxisId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TotalDistance")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorAxisId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MovementProfiles");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.RotationClassSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DaysCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastSchedule")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RotationClassSchedule");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ServicingInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastServiceDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MachineStatisticsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MaintainerName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextServiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TotalMissions")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MachineStatisticsId");

                    b.ToTable("ServicingInfo");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.SetupProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("FeedRate")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsBypassed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SetupProcedures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SetupProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.SetupProceduresSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay1CarouselCalibrationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay1ExternalCalibrationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay1FirstLoadingUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay1FullTestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay1HeightCheckId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay1LaserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay1ProfileCheckId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay1ShutterTestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay2CarouselCalibrationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay2ExternalCalibrationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay2FirstLoadingUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay2FullTestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay2HeightCheckId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay2LaserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay2ProfileCheckId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay2ShutterTestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay3CarouselCalibrationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay3ExternalCalibrationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay3FirstLoadingUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay3FullTestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay3HeightCheckId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay3LaserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay3ProfileCheckId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Bay3ShutterTestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BeltBurnishingTestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CellPanelsCheckId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CellsHeightCheckId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DepositAndPickUpTestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HorizontalChainCalibrationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HorizontalResolutionCalibrationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LoadFirstDrawerTestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShutterHeightCheckId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VerticalOffsetCalibrationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VerticalOriginCalibrationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VerticalResolutionCalibrationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WeightMeasurementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Bay1CarouselCalibrationId");

                    b.HasIndex("Bay1ExternalCalibrationId");

                    b.HasIndex("Bay1FirstLoadingUnitId");

                    b.HasIndex("Bay1FullTestId");

                    b.HasIndex("Bay1HeightCheckId");

                    b.HasIndex("Bay1LaserId");

                    b.HasIndex("Bay1ProfileCheckId");

                    b.HasIndex("Bay1ShutterTestId");

                    b.HasIndex("Bay2CarouselCalibrationId");

                    b.HasIndex("Bay2ExternalCalibrationId");

                    b.HasIndex("Bay2FirstLoadingUnitId");

                    b.HasIndex("Bay2FullTestId");

                    b.HasIndex("Bay2HeightCheckId");

                    b.HasIndex("Bay2LaserId");

                    b.HasIndex("Bay2ProfileCheckId");

                    b.HasIndex("Bay2ShutterTestId");

                    b.HasIndex("Bay3CarouselCalibrationId");

                    b.HasIndex("Bay3ExternalCalibrationId");

                    b.HasIndex("Bay3FirstLoadingUnitId");

                    b.HasIndex("Bay3FullTestId");

                    b.HasIndex("Bay3HeightCheckId");

                    b.HasIndex("Bay3LaserId");

                    b.HasIndex("Bay3ProfileCheckId");

                    b.HasIndex("Bay3ShutterTestId");

                    b.HasIndex("BeltBurnishingTestId");

                    b.HasIndex("CellPanelsCheckId");

                    b.HasIndex("CellsHeightCheckId");

                    b.HasIndex("DepositAndPickUpTestId");

                    b.HasIndex("HorizontalChainCalibrationId");

                    b.HasIndex("HorizontalResolutionCalibrationId");

                    b.HasIndex("LoadFirstDrawerTestId");

                    b.HasIndex("ShutterHeightCheckId");

                    b.HasIndex("VerticalOffsetCalibrationId");

                    b.HasIndex("VerticalOriginCalibrationId");

                    b.HasIndex("VerticalResolutionCalibrationId");

                    b.HasIndex("WeightMeasurementId");

                    b.ToTable("SetupProceduresSets");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Shutter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssistedMovementsId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InverterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ManualMovementsId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MaxSpeed")
                        .HasColumnType("REAL");

                    b.Property<double>("MinSpeed")
                        .HasColumnType("REAL");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssistedMovementsId");

                    b.HasIndex("InverterId");

                    b.HasIndex("ManualMovementsId");

                    b.ToTable("Shutters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ShutterManualParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("FeedRate")
                        .HasColumnType("REAL");

                    b.Property<double>("HighSpeedDurationClose")
                        .HasColumnType("REAL");

                    b.Property<double>("HighSpeedDurationOpen")
                        .HasColumnType("REAL");

                    b.Property<double?>("HighSpeedHalfDurationClose")
                        .HasColumnType("REAL");

                    b.Property<double?>("HighSpeedHalfDurationOpen")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxSpeed")
                        .HasColumnType("REAL");

                    b.Property<double>("MinSpeed")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ShutterManualParameters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.TorqueCurrentMeasurementSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("LoadedNetWeight")
                        .HasColumnType("REAL");

                    b.Property<int?>("LoadingUnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TorqueCurrentMeasurementSessions");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.TorqueCurrentSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MeasurementSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RequestTimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementSessionId");

                    b.ToTable("TorqueCurrentSamples");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.UserParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabledWithWMS")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLimited")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.WeightMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("MeasureConst0")
                        .HasColumnType("REAL");

                    b.Property<double>("MeasureConst1")
                        .HasColumnType("REAL");

                    b.Property<double>("MeasureConst2")
                        .HasColumnType("REAL");

                    b.Property<double>("MeasureSpeed")
                        .HasColumnType("REAL");

                    b.Property<int>("MeasureTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WeightMeasurements");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.WmsSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConnectionTimeout")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DelayTimeout")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTimeSyncEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastWmsTimeSync")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceUrl")
                        .HasColumnType("text");

                    b.Property<bool>("SocketLinkEndOfLine")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SocketLinkIsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SocketLinkPolling")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SocketLinkPort")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SocketLinkTimeout")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeSyncIntervalMilliseconds")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WmsSettings");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ConnectionTimeout = 5000,
                            DelayTimeout = 0,
                            IsConnected = false,
                            IsEnabled = false,
                            IsTimeSyncEnabled = false,
                            LastWmsTimeSync = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ServiceUrl = "http://127.0.0.1:10000/",
                            SocketLinkEndOfLine = false,
                            SocketLinkIsEnabled = false,
                            SocketLinkPolling = 120,
                            SocketLinkPort = 7075,
                            SocketLinkTimeout = 600,
                            TimeSyncIntervalMilliseconds = 60000
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.BarcodeReader", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.Accessory");

                    b.Property<string>("PortName")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("BarcodeReader");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.CardReader", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.Accessory");

                    b.Property<bool?>("IsLocal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TokenRegex")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("CardReader");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LabelPrinter", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.Accessory");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("LabelPrinter");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.TcpIpAccessory", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.Accessory");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<int>("TcpPort")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("TcpIpAccessory");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.TokenReader", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.Accessory");

                    b.Property<string>("PortName")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("TokenReader");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.StepMovementParameters", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.MovementParameters");

                    b.Property<bool>("AdjustAccelerationByWeight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AdjustSpeedByWeight")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MovementProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Position")
                        .HasColumnType("REAL");

                    b.HasIndex("MovementProfileId");

                    b.HasDiscriminator().HasValue("StepMovementParameters");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.BayProfileCheckProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.SetupProcedure");

                    b.Property<double>("ProfileCorrectDistance")
                        .HasColumnType("REAL");

                    b.Property<double>("ProfileDegrees")
                        .HasColumnType("REAL");

                    b.Property<double>("ProfileTotalDistance")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue("BayProfileCheckProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.PositioningProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.SetupProcedure");

                    b.Property<bool>("InProgress")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Step")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue("PositioningProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.SetupProcedure");

                    b.Property<bool>("InProgress")
                        .HasColumnName("RepeatedTestProcedure_InProgress")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerformedCycles")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredCycles")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("RepeatedTestProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.VerticalResolutionCalibrationProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.SetupProcedure");

                    b.Property<double>("FinalPosition")
                        .HasColumnType("REAL");

                    b.Property<double>("InitialPosition")
                        .HasColumnType("REAL");

                    b.Property<double>("StartPosition")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue("VerticalResolutionCalibrationProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.AlphaNumericBar", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.TcpIpAccessory");

                    b.Property<bool?>("ClearAlphaBarOnCloseView")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Field1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Field2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Field3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Field4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Field5")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxMessageLength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("UseGet")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("AlphaNumericBar");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LaserPointer", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.TcpIpAccessory");

                    b.Property<double>("XOffset")
                        .HasColumnType("REAL");

                    b.Property<double>("YOffset")
                        .HasColumnType("REAL");

                    b.Property<double>("ZOffsetLowerPosition")
                        .HasColumnType("REAL");

                    b.Property<double>("ZOffsetUpperPosition")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue("LaserPointer");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.WeightingScale", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.TcpIpAccessory");

                    b.Property<string>("PortName")
                        .HasColumnName("WeightingScale_PortName")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("WeightingScale");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.OffsetCalibrationProcedure", b =>
                {
                    b.HasBaseType("Ferretto.VW.MAS.DataModels.PositioningProcedure");

                    b.Property<int>("ReferenceCellId")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("OffsetCalibrationProcedure");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Accessory", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.DeviceInformation", "DeviceInformation")
                        .WithMany()
                        .HasForeignKey("DeviceInformationId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Bay", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.BayAccessories", "Accessories")
                        .WithMany()
                        .HasForeignKey("AccessoriesId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Carousel", "Carousel")
                        .WithMany()
                        .HasForeignKey("CarouselId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Mission", "CurrentMission")
                        .WithMany()
                        .HasForeignKey("CurrentMissionId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.MovementParameters", "EmptyLoadMovement")
                        .WithMany()
                        .HasForeignKey("EmptyLoadMovementId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.External", "External")
                        .WithMany()
                        .HasForeignKey("ExternalId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.MovementParameters", "FullLoadMovement")
                        .WithMany()
                        .HasForeignKey("FullLoadMovementId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.IoDevice", "IoDevice")
                        .WithMany()
                        .HasForeignKey("IoDeviceId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Machine", null)
                        .WithMany("Bays")
                        .HasForeignKey("MachineId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Shutter", "Shutter")
                        .WithMany()
                        .HasForeignKey("ShutterId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.BayAccessories", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.AlphaNumericBar", "AlphaNumericBar")
                        .WithMany()
                        .HasForeignKey("AlphaNumericBarId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.BarcodeReader", "BarcodeReader")
                        .WithMany()
                        .HasForeignKey("BarcodeReaderId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.CardReader", "CardReader")
                        .WithMany()
                        .HasForeignKey("CardReaderId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.LabelPrinter", "LabelPrinter")
                        .WithMany()
                        .HasForeignKey("LabelPrinterId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.LaserPointer", "LaserPointer")
                        .WithMany()
                        .HasForeignKey("LaserPointerId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.TokenReader", "TokenReader")
                        .WithMany()
                        .HasForeignKey("TokenReaderId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.WeightingScale", "WeightingScale")
                        .WithMany()
                        .HasForeignKey("WeightingScaleId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.BayPosition", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Bay", "Bay")
                        .WithMany("Positions")
                        .HasForeignKey("BayId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.LoadingUnit", "LoadingUnit")
                        .WithMany()
                        .HasForeignKey("LoadingUnitId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Carousel", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.CarouselManualParameters", "AssistedMovements")
                        .WithMany()
                        .HasForeignKey("AssistedMovementsId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.CarouselManualParameters", "ManualMovements")
                        .WithMany()
                        .HasForeignKey("ManualMovementsId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Cell", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.CellPanel", "Panel")
                        .WithMany("Cells")
                        .HasForeignKey("PanelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.CellPanel", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Machine", null)
                        .WithMany("Panels")
                        .HasForeignKey("MachineId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Elevator", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.BayPosition", "BayPosition")
                        .WithMany()
                        .HasForeignKey("BayPositionId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Cell", "Cell")
                        .WithMany()
                        .HasForeignKey("CellId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.LoadingUnit", "LoadingUnit")
                        .WithMany()
                        .HasForeignKey("LoadingUnitId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.ElevatorStructuralProperties", "StructuralProperties")
                        .WithMany()
                        .HasForeignKey("StructuralPropertiesId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ElevatorAxis", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.ElevatorAxisManualParameters", "AssistedMovements")
                        .WithMany()
                        .HasForeignKey("AssistedMovementsId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Elevator", null)
                        .WithMany("Axes")
                        .HasForeignKey("ElevatorId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.MovementParameters", "EmptyLoadMovement")
                        .WithMany()
                        .HasForeignKey("EmptyLoadMovementId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.MovementParameters", "FullLoadMovement")
                        .WithMany()
                        .HasForeignKey("FullLoadMovementId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.ElevatorAxisManualParameters", "ManualMovements")
                        .WithMany()
                        .HasForeignKey("ManualMovementsId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.WeightMeasurement", "WeightMeasurement")
                        .WithMany()
                        .HasForeignKey("WeightMeasurementId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.External", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.ExternalBayManualParameters", "AssistedMovements")
                        .WithMany()
                        .HasForeignKey("AssistedMovementsId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.ExternalBayManualParameters", "ManualMovements")
                        .WithMany()
                        .HasForeignKey("ManualMovementsId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Instruction", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.InstructionDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.ServicingInfo", "ServicingInfo")
                        .WithMany("Instructions")
                        .HasForeignKey("ServicingInfoId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.InverterParameter", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Inverter", "Inverter")
                        .WithMany("Parameters")
                        .HasForeignKey("InverterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Laser", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Bay", "Bay")
                        .WithMany()
                        .HasForeignKey("BayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LoadingUnit", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Cell", "Cell")
                        .WithOne("LoadingUnit")
                        .HasForeignKey("Ferretto.VW.MAS.DataModels.LoadingUnit", "CellId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Machine", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Elevator", "Elevator")
                        .WithMany()
                        .HasForeignKey("ElevatorId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MovementProfile", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.ElevatorAxis", null)
                        .WithMany("Profiles")
                        .HasForeignKey("ElevatorAxisId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ServicingInfo", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.MachineStatistics", "MachineStatistics")
                        .WithMany()
                        .HasForeignKey("MachineStatisticsId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.SetupProceduresSet", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "Bay1CarouselCalibration")
                        .WithMany()
                        .HasForeignKey("Bay1CarouselCalibrationId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "Bay1ExternalCalibration")
                        .WithMany()
                        .HasForeignKey("Bay1ExternalCalibrationId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "Bay1FirstLoadingUnit")
                        .WithMany()
                        .HasForeignKey("Bay1FirstLoadingUnitId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "Bay1FullTest")
                        .WithMany()
                        .HasForeignKey("Bay1FullTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "Bay1HeightCheck")
                        .WithMany()
                        .HasForeignKey("Bay1HeightCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "Bay1Laser")
                        .WithMany()
                        .HasForeignKey("Bay1LaserId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.BayProfileCheckProcedure", "Bay1ProfileCheck")
                        .WithMany()
                        .HasForeignKey("Bay1ProfileCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "Bay1ShutterTest")
                        .WithMany()
                        .HasForeignKey("Bay1ShutterTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "Bay2CarouselCalibration")
                        .WithMany()
                        .HasForeignKey("Bay2CarouselCalibrationId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "Bay2ExternalCalibration")
                        .WithMany()
                        .HasForeignKey("Bay2ExternalCalibrationId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "Bay2FirstLoadingUnit")
                        .WithMany()
                        .HasForeignKey("Bay2FirstLoadingUnitId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "Bay2FullTest")
                        .WithMany()
                        .HasForeignKey("Bay2FullTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "Bay2HeightCheck")
                        .WithMany()
                        .HasForeignKey("Bay2HeightCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "Bay2Laser")
                        .WithMany()
                        .HasForeignKey("Bay2LaserId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.BayProfileCheckProcedure", "Bay2ProfileCheck")
                        .WithMany()
                        .HasForeignKey("Bay2ProfileCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "Bay2ShutterTest")
                        .WithMany()
                        .HasForeignKey("Bay2ShutterTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "Bay3CarouselCalibration")
                        .WithMany()
                        .HasForeignKey("Bay3CarouselCalibrationId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "Bay3ExternalCalibration")
                        .WithMany()
                        .HasForeignKey("Bay3ExternalCalibrationId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "Bay3FirstLoadingUnit")
                        .WithMany()
                        .HasForeignKey("Bay3FirstLoadingUnitId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "Bay3FullTest")
                        .WithMany()
                        .HasForeignKey("Bay3FullTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "Bay3HeightCheck")
                        .WithMany()
                        .HasForeignKey("Bay3HeightCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "Bay3Laser")
                        .WithMany()
                        .HasForeignKey("Bay3LaserId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.BayProfileCheckProcedure", "Bay3ProfileCheck")
                        .WithMany()
                        .HasForeignKey("Bay3ProfileCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "Bay3ShutterTest")
                        .WithMany()
                        .HasForeignKey("Bay3ShutterTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "BeltBurnishingTest")
                        .WithMany()
                        .HasForeignKey("BeltBurnishingTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.PositioningProcedure", "CellPanelsCheck")
                        .WithMany()
                        .HasForeignKey("CellPanelsCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.PositioningProcedure", "CellsHeightCheck")
                        .WithMany()
                        .HasForeignKey("CellsHeightCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "DepositAndPickUpTest")
                        .WithMany()
                        .HasForeignKey("DepositAndPickUpTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "HorizontalChainCalibration")
                        .WithMany()
                        .HasForeignKey("HorizontalChainCalibrationId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.RepeatedTestProcedure", "HorizontalResolutionCalibration")
                        .WithMany()
                        .HasForeignKey("HorizontalResolutionCalibrationId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.PositioningProcedure", "LoadFirstDrawerTest")
                        .WithMany()
                        .HasForeignKey("LoadFirstDrawerTestId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "ShutterHeightCheck")
                        .WithMany()
                        .HasForeignKey("ShutterHeightCheckId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.OffsetCalibrationProcedure", "VerticalOffsetCalibration")
                        .WithMany()
                        .HasForeignKey("VerticalOffsetCalibrationId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "VerticalOriginCalibration")
                        .WithMany()
                        .HasForeignKey("VerticalOriginCalibrationId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.VerticalResolutionCalibrationProcedure", "VerticalResolutionCalibration")
                        .WithMany()
                        .HasForeignKey("VerticalResolutionCalibrationId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.SetupProcedure", "WeightMeasurement")
                        .WithMany()
                        .HasForeignKey("WeightMeasurementId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Shutter", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.ShutterManualParameters", "AssistedMovements")
                        .WithMany()
                        .HasForeignKey("AssistedMovementsId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId");

                    b.HasOne("Ferretto.VW.MAS.DataModels.ShutterManualParameters", "ManualMovements")
                        .WithMany()
                        .HasForeignKey("ManualMovementsId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.TorqueCurrentSample", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.TorqueCurrentMeasurementSession", "MeasurementSession")
                        .WithMany("DataSamples")
                        .HasForeignKey("MeasurementSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.StepMovementParameters", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.MovementProfile", null)
                        .WithMany("Steps")
                        .HasForeignKey("MovementProfileId");
                });
#pragma warning restore 612, 618
        }
    }
}
