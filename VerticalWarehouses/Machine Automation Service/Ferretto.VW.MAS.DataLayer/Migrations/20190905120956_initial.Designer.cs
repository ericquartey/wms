// <auto-generated />
using System;
using Ferretto.VW.MAS.DataLayer.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ferretto.VW.MAS.DataLayer.Migrations
{
    [DbContext(typeof(DataLayerContext))]
    [Migration("20190905120956_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Bay", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CurrentMissionId");

                    b.Property<int?>("CurrentMissionOperationId");

                    b.Property<int>("ExternalId");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LoadingUnitId");

                    b.Property<int>("Type");

                    b.HasKey("Number");

                    b.HasIndex("IpAddress")
                        .IsUnique();

                    b.HasIndex("LoadingUnitId");

                    b.ToTable("Bays");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Cell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PanelId");

                    b.Property<decimal>("Position");

                    b.Property<int>("Priority");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("PanelId");

                    b.ToTable("Cells");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.CellPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Side");

                    b.HasKey("Id");

                    b.ToTable("CellPanels");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ConfigurationValue", b =>
                {
                    b.Property<long>("CategoryName");

                    b.Property<long>("VarName");

                    b.Property<long>("VarType");

                    b.Property<string>("VarValue");

                    b.HasKey("CategoryName", "VarName");

                    b.ToTable("ConfigurationValues");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<DateTime>("OccurrenceDate");

                    b.Property<DateTime?>("ResolutionDate");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ErrorDefinition", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Reason");

                    b.Property<int>("Severity");

                    b.HasKey("Code");

                    b.ToTable("ErrorDefinitions");

                    b.HasData(
                        new
                        {
                            Code = 100032,
                            Description = "Cassetto non caricato completamente",
                            Reason = "Il cassetto potrebbe essersi incastrato.",
                            Severity = 0
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ErrorStatistic", b =>
                {
                    b.Property<int>("Code");

                    b.Property<int>("TotalErrors");

                    b.HasKey("Code");

                    b.ToTable("ErrorStatistics");

                    b.HasData(
                        new
                        {
                            Code = 100032,
                            TotalErrors = 0
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.FreeBlock", b =>
                {
                    b.Property<int>("FreeBlockId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BlockSize");

                    b.Property<int>("BookedCellsNumber");

                    b.Property<int>("LoadingUnitId");

                    b.Property<decimal>("Position");

                    b.Property<int>("Priority");

                    b.Property<int>("Side");

                    b.Property<int>("StartCell");

                    b.HasKey("FreeBlockId");

                    b.HasIndex("LoadingUnitId");

                    b.ToTable("FreeBlocks");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LoadingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CellId");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<decimal>("GrossWeight");

                    b.Property<decimal>("Height");

                    b.Property<bool>("IsIntoMachine");

                    b.Property<decimal>("MaxNetWeight");

                    b.Property<int>("MissionsCount");

                    b.Property<long>("Status");

                    b.Property<decimal>("Tare");

                    b.HasKey("Id");

                    b.HasIndex("CellId")
                        .IsUnique();

                    b.ToTable("LoadingUnits");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("Description");

                    b.Property<string>("Destination");

                    b.Property<string>("ErrorLevel");

                    b.Property<string>("Exception");

                    b.Property<string>("Level");

                    b.Property<string>("LoggerName");

                    b.Property<string>("Message");

                    b.Property<string>("Source");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MachineStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("TotalAutomaticTime");

                    b.Property<int>("TotalBeltCycles");

                    b.Property<TimeSpan>("TotalMissionTime");

                    b.Property<int>("TotalMovedTrays");

                    b.Property<int>("TotalMovedTraysInBay1");

                    b.Property<int>("TotalMovedTraysInBay2");

                    b.Property<int>("TotalMovedTraysInBay3");

                    b.Property<TimeSpan>("TotalPowerOnTime");

                    b.Property<int>("TotalShutter1Cycles");

                    b.Property<int>("TotalShutter2Cycles");

                    b.Property<int>("TotalShutter3Cycles");

                    b.Property<int>("TotalVerticalAxisCycles");

                    b.Property<double>("TotalVerticalAxisKilometers");

                    b.Property<double>("WeightCapacityPercentage");

                    b.HasKey("Id");

                    b.ToTable("MachineStatistics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TotalAutomaticTime = new TimeSpan(130, 0, 0, 0, 0),
                            TotalBeltCycles = 12352,
                            TotalMissionTime = new TimeSpan(30, 0, 0, 0, 0),
                            TotalMovedTrays = 534,
                            TotalMovedTraysInBay1 = 123,
                            TotalMovedTraysInBay2 = 456,
                            TotalMovedTraysInBay3 = 789,
                            TotalPowerOnTime = new TimeSpan(190, 0, 0, 0, 0),
                            TotalShutter1Cycles = 321,
                            TotalShutter2Cycles = 654,
                            TotalShutter3Cycles = 987,
                            TotalVerticalAxisCycles = 5232,
                            TotalVerticalAxisKilometers = 34.0,
                            WeightCapacityPercentage = 60.0
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ServicingInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("InstallationDate");

                    b.Property<DateTime?>("LastServiceDate");

                    b.Property<DateTime?>("NextServiceDate");

                    b.Property<int>("ServiceStatus");

                    b.HasKey("Id");

                    b.ToTable("ServicingInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InstallationDate = new DateTime(2016, 11, 5, 14, 9, 56, 100, DateTimeKind.Local).AddTicks(1507),
                            ServiceStatus = 86
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.SetupStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllLoadingUnits");

                    b.Property<bool>("Bay1Check");

                    b.Property<bool>("Bay1FirstLoadingUnit");

                    b.Property<bool>("Bay1Laser");

                    b.Property<bool>("Bay1Profile");

                    b.Property<bool>("Bay1Shutter");

                    b.Property<bool>("Bay2Check");

                    b.Property<bool>("Bay2FirstLoadingUnit");

                    b.Property<bool>("Bay2Laser");

                    b.Property<bool>("Bay2Profile");

                    b.Property<bool>("Bay2Shutter");

                    b.Property<bool>("Bay3Check");

                    b.Property<bool>("Bay3FirstLoadingUnit");

                    b.Property<bool>("Bay3Laser");

                    b.Property<bool>("Bay3Profile");

                    b.Property<bool>("Bay3Shutter");

                    b.Property<bool>("BeltBurnishing");

                    b.Property<bool>("CellsHeightCheck");

                    b.Property<DateTime?>("CompletedDate");

                    b.Property<bool>("HorizontalHoming");

                    b.Property<bool>("PanelsCheck");

                    b.Property<bool>("VerticalOffsetCalibration");

                    b.Property<bool>("VerticalResolution");

                    b.Property<bool>("WeightMeasurement");

                    b.HasKey("Id");

                    b.ToTable("SetupStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllLoadingUnits = false,
                            Bay1Check = false,
                            Bay1FirstLoadingUnit = false,
                            Bay1Laser = false,
                            Bay1Profile = false,
                            Bay1Shutter = false,
                            Bay2Check = false,
                            Bay2FirstLoadingUnit = false,
                            Bay2Laser = false,
                            Bay2Profile = false,
                            Bay2Shutter = false,
                            Bay3Check = false,
                            Bay3FirstLoadingUnit = false,
                            Bay3Laser = false,
                            Bay3Profile = false,
                            Bay3Shutter = false,
                            BeltBurnishing = false,
                            CellsHeightCheck = false,
                            HorizontalHoming = false,
                            PanelsCheck = false,
                            VerticalOffsetCalibration = false,
                            VerticalResolution = false,
                            WeightMeasurement = false
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.User", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessLevel");

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("PasswordSalt")
                        .IsRequired();

                    b.HasKey("Name");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Name = "installer",
                            AccessLevel = 0,
                            PasswordHash = "DsWpG30CTZweMD4Q+LlgzrsGOWM/jx6enmP8O7RIrvU=",
                            PasswordSalt = "2xw+hMIYBtLCoUqQGXSL0A=="
                        },
                        new
                        {
                            Name = "operator",
                            AccessLevel = 2,
                            PasswordHash = "e1IrRSpcUNLIQAmdtSzQqrKT4DLcMaYMh662pgMh2xY=",
                            PasswordSalt = "iB+IdMnlzvXvitHWJff38A=="
                        });
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Bay", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.LoadingUnit", "LoadingUnit")
                        .WithMany()
                        .HasForeignKey("LoadingUnitId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Cell", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.CellPanel", "Panel")
                        .WithMany("Cells")
                        .HasForeignKey("PanelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Error", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.ErrorDefinition", "Definition")
                        .WithMany("Occurrences")
                        .HasForeignKey("Code");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ErrorStatistic", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.ErrorDefinition", "Error")
                        .WithOne("Statistics")
                        .HasForeignKey("Ferretto.VW.MAS.DataModels.ErrorStatistic", "Code");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.FreeBlock", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.LoadingUnit", "LoadingUnit")
                        .WithMany()
                        .HasForeignKey("LoadingUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LoadingUnit", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Cell", "Cell")
                        .WithOne("LoadingUnit")
                        .HasForeignKey("Ferretto.VW.MAS.DataModels.LoadingUnit", "CellId");
                });
#pragma warning restore 612, 618
        }
    }
}
