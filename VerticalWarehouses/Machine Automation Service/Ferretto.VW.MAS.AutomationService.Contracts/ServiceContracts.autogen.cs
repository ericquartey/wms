//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using System.Net;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Ferretto.VW.MAS.AutomationService.Contracts
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineAboutWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> MissionTotalNumberAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> MissionTotalNumberAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineAccessoriesWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BayAccessories> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BayAccessories> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BayAccessories> GetAllWithBayNumberAsync(BayNumber bayNumber);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BayAccessories> GetAllWithBayNumberAsync(BayNumber bayNumber, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateAlphaNumericBarAsync(bool isEnabled, string ipAddress, int port);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateAlphaNumericBarAsync(bool isEnabled, string ipAddress, int port, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateBarcodeReaderDeviceInfoAsync(DeviceInformation deviceInformation);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateBarcodeReaderDeviceInfoAsync(DeviceInformation deviceInformation, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateBarcodeReaderSettingsAsync(bool isEnabled, string portName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateBarcodeReaderSettingsAsync(bool isEnabled, string portName, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateCardReaderSettingsAsync(bool isEnabled, string tokenRegex);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateCardReaderSettingsAsync(bool isEnabled, string tokenRegex, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateLabelPrinterSettingsAsync(bool isEnabled, string printerName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateLabelPrinterSettingsAsync(bool isEnabled, string printerName, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateLaserPointerAsync(bool isEnabled, string ipAddress, int port, double xOffset, double yOffset, double zOffsetLowerPosition, double zOffsetUpperPosition);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateLaserPointerAsync(bool isEnabled, string ipAddress, int port, double xOffset, double yOffset, double zOffsetLowerPosition, double zOffsetUpperPosition, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateTokenReaderSettingsAsync(bool isEnabled, string portName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateTokenReaderSettingsAsync(bool isEnabled, string portName, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateWeightingScaleDeviceInfoAsync(DeviceInformation deviceInformation);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateWeightingScaleDeviceInfoAsync(DeviceInformation deviceInformation, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateWeightingScaleSettingsAsync(bool isEnabled, string portName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateWeightingScaleSettingsAsync(bool isEnabled, string portName, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineBaysWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> ActivateAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> ActivateAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> DeactivateAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> DeactivateAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FindZeroAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FindZeroAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bay>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bay>> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> GetByNumberAsync(BayNumber bayNumber);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> GetByNumberAsync(BayNumber bayNumber, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> GetLightAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> GetLightAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HomingAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HomingAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveLoadUnitAsync(int loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveLoadUnitAsync(int loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetAllOpertionBayAsync(bool pick, bool put, bool view, bool inventory, int bayid);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetAllOpertionBayAsync(bool pick, bool put, bool view, bool inventory, int bayid, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetLightAsync(bool enable);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetLightAsync(bool enable, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetLoadUnitOnBayAsync(int bayPositionId, int loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetLoadUnitOnBayAsync(int bayPositionId, int loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> UpdateHeightAsync(int position, double height);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> UpdateHeightAsync(int position, double height, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineCarouselWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveAsync(VerticalMovementDirection direction, MovementCategory movementCategory);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveAsync(VerticalMovementDirection direction, MovementCategory movementCategory, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FindZeroAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FindZeroAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetPositionAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetPositionAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HomingAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HomingAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAsync(VerticalMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAsync(VerticalMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAssistedAsync(VerticalMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAssistedAsync(VerticalMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveManualAsync(VerticalMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveManualAsync(VerticalMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetCalibrationAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetCalibrationAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetCalibrationCompletedAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetCalibrationCompletedAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartCalibrationAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartCalibrationAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopCalibrationAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopCalibrationAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateElevatorChainDistanceAsync(double value);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateElevatorChainDistanceAsync(double value, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineCellPanelsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<CellPanel>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<CellPanel>> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PositioningProcedure> GetProcedureParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PositioningProcedure> GetProcedureParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CellPanel> UpdateHeightAsync(int cellPanelId, double heightDifference);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CellPanel> UpdateHeightAsync(int cellPanelId, double heightDifference, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineCellsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Cell>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Cell>> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PositioningProcedure> GetHeightCheckProcedureParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PositioningProcedure> GetHeightCheckProcedureParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CellStatisticsSummary> GetStatisticsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CellStatisticsSummary> GetStatisticsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaveCellAsync(Cell cell);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaveCellAsync(Cell cell, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Cell> UpdateHeightAsync(int id, double height);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Cell> UpdateHeightAsync(int id, double height, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Cell>> UpdatesHeightAsync(int fromid, int toid, WarehouseSide side, double height);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Cell>> UpdatesHeightAsync(int fromid, int toid, WarehouseSide side, double height, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineCompactingWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompactingAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompactingAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineConfigurationWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VertimagConfiguration> GetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VertimagConfiguration> GetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetAsync(VertimagConfiguration vertimagConfiguration);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetAsync(VertimagConfiguration vertimagConfiguration, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImportAsync(VertimagConfiguration vertimagConfiguration);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImportAsync(VertimagConfiguration vertimagConfiguration, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateAsync(Machine machineNew);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateAsync(Machine machineNew, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineDevicesWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ValueTupleOfIEnumerableOfInverterDeviceInfoAndIEnumerableOfIoDeviceInfo> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ValueTupleOfIEnumerableOfInverterDeviceInfoAndIEnumerableOfIoDeviceInfo> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<InverterParametersData>> GetParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<InverterParametersData>> GetParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProgramAllInvertersAsync(VertimagConfiguration vertimagConfiguration);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProgramAllInvertersAsync(VertimagConfiguration vertimagConfiguration, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProgramInverterAsync(byte index, VertimagConfiguration vertimagConfiguration);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProgramInverterAsync(byte index, VertimagConfiguration vertimagConfiguration, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineElevatorWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanExtractFromBayAsync(int bayPositionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanExtractFromBayAsync(int bayPositionId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanLoadFromBayAsync(int bayPositionId, bool isGuided);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanLoadFromBayAsync(int bayPositionId, bool isGuided, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanLoadFromCellAsync(int cellId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanLoadFromCellAsync(int cellId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveToBayPositionAsync(int bayPositionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveToBayPositionAsync(int bayPositionId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveToCellAsync(int cellId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveToCellAsync(int cellId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveToHeightAsync(double height);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveToHeightAsync(double height, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanUnloadToBayAsync(int bayPositionId, bool isGuided);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanUnloadToBayAsync(int bayPositionId, bool isGuided, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanUnloadToCellAsync(int cellId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanUnloadToCellAsync(int cellId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FindZeroAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FindZeroAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetHorizontalAssistedMovementsParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetHorizontalAssistedMovementsParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetHorizontalManualMovementsParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetHorizontalManualMovementsParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LoadingUnit> GetLoadingUnitOnBoardAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LoadingUnit> GetLoadingUnitOnBoardAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorPosition> GetPositionAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorPosition> GetPositionAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetVerticalAssistedMovementsParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetVerticalAssistedMovementsParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AxisBounds> GetVerticalBoundsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AxisBounds> GetVerticalBoundsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetVerticalManualMovementsParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetVerticalManualMovementsParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetVerticalOffsetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetVerticalOffsetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetVerticalResolutionAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetVerticalResolutionAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateVerticalResolutionAsync(double newResolution);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateVerticalResolutionAsync(double newResolution, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LoadFromBayAsync(int bayPositionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LoadFromBayAsync(int bayPositionId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LoadFromCellAsync(int cellId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LoadFromCellAsync(int cellId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveHorizontalCalibrationAsync(HorizontalMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveHorizontalCalibrationAsync(HorizontalMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveHorizontalManualAsync(HorizontalMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveHorizontalManualAsync(HorizontalMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveManualToVerticalPositionAsync(double targetPosition, bool performWeighting, bool computeElongation);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveManualToVerticalPositionAsync(double targetPosition, bool performWeighting, bool computeElongation, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToBayPositionAsync(int bayPositionId, bool computeElongation, bool performWeighting);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToBayPositionAsync(int bayPositionId, bool computeElongation, bool performWeighting, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToCellAsync(int cellId, bool computeElongation, bool performWeighting);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToCellAsync(int cellId, bool computeElongation, bool performWeighting, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToFreeCellAsync(int loadUnitId, bool computeElongation, bool performWeighting);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToFreeCellAsync(int loadUnitId, bool computeElongation, bool performWeighting, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToVerticalPositionAsync(double targetPosition, bool performWeighting);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToVerticalPositionAsync(double targetPosition, bool performWeighting, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveVerticalManualAsync(VerticalMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveVerticalManualAsync(VerticalMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveVerticalOfDistanceAsync(double distance);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveVerticalOfDistanceAsync(double distance, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SearchHorizontalZeroAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SearchHorizontalZeroAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetDepositAndPickUpTestCompletedAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetDepositAndPickUpTestCompletedAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetHorizontalChainCalibrationCompletedAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetHorizontalChainCalibrationCompletedAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetHorizontalChainCalibrationDistanceAsync(double distance);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetHorizontalChainCalibrationDistanceAsync(double distance, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetLoadUnitOnElevatorAsync(int loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetLoadUnitOnElevatorAsync(int loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopWeightCheckAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopWeightCheckAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnloadToBayAsync(int bayPositionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnloadToBayAsync(int bayPositionId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnloadToCellAsync(int cellId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnloadToCellAsync(int cellId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateVerticalLowerBoundAsync(double newLowerBound);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateVerticalLowerBoundAsync(double newLowerBound, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task WeightCheckAsync(int loadingUnitId, double runToTest, double weight);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task WeightCheckAsync(int loadingUnitId, double runToTest, double weight, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineEnduranceTestWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartHorizontalMovementsAsync(int bayPositionId, int loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartHorizontalMovementsAsync(int bayPositionId, int loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopTestAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopTestAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineErrorsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<MachineError>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<MachineError>> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> GetCurrentAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> GetCurrentAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ErrorStatisticsSummary> GetStatisticsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ErrorStatisticsSummary> GetStatisticsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> ResolveAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> ResolveAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> ResolveAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> ResolveAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> SetErrorPPCAsync(MachineErrorCode errorCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> SetErrorPPCAsync(MachineErrorCode errorCode, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineExternalBayWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveAsync(ExternalBayMovementDirection direction, MovementCategory movementCategory);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveAsync(ExternalBayMovementDirection direction, MovementCategory movementCategory, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FindZeroAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FindZeroAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetPositionAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetPositionAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HomingAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HomingAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAsync(ExternalBayMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAsync(ExternalBayMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAssistedAsync(ExternalBayMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAssistedAsync(ExternalBayMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveManualAsync(ExternalBayMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveManualAsync(ExternalBayMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MovementForExtractionAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MovementForExtractionAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MovementForInsertionAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MovementForInsertionAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetCalibrationAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetCalibrationAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetCalibrationCompletedAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetCalibrationCompletedAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartCalibrationAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartCalibrationAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopCalibrationAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopCalibrationAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateExtraRaceDistanceAsync(double value);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateExtraRaceDistanceAsync(double value, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateRaceDistanceAsync(double value);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateRaceDistanceAsync(double value, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineFirstTestWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(int loadunit);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(int loadunit, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineFullTestWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(System.Collections.Generic.IEnumerable<int> loadunits, int cycles);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(System.Collections.Generic.IEnumerable<int> loadunits, int cycles, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineIdentityWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineIdentity> GetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineIdentity> GetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineStatistics> GetStatisticsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineStatistics> GetStatisticsAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineLoadingUnitsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AbortAsync(int? missionId, BayNumber targetBay);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AbortAsync(int? missionId, BayNumber targetBay, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddTestUnitAsync(LoadingUnit loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddTestUnitAsync(LoadingUnit loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EjectLoadingUnitAsync(LoadingUnitLocation destination, int loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EjectLoadingUnitAsync(LoadingUnitLocation destination, int loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnit>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnit>> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnit>> GetAllNotTestUnitsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnit>> GetAllNotTestUnitsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetLoadUnitMaxHeightAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetLoadUnitMaxHeightAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnit>> GetAllTestUnitsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnit>> GetAllTestUnitsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<CompartmentDetails>> GetCompartmentsAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<CompartmentDetails>> GetCompartmentsAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnitSpaceStatistics>> GetSpaceStatisticsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnitSpaceStatistics>> GetSpaceStatisticsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnitWeightStatistics>> GetWeightStatisticsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnitWeightStatistics>> GetWeightStatisticsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LoadingUnitDetails> GetWmsDetailsByIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LoadingUnitDetails> GetWmsDetailsByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InsertLoadingUnitAsync(LoadingUnitLocation source, int? destinationCellId, int loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InsertLoadingUnitAsync(LoadingUnitLocation source, int? destinationCellId, int loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InsertLoadingUnitOnlyDbAsync(int loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InsertLoadingUnitOnlyDbAsync(int loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToBayAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToBayAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PauseAsync(int? missionId, BayNumber targetBay);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PauseAsync(int? missionId, BayNumber targetBay, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveFromBayAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveFromBayAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveLoadUnitAsync(int loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveLoadUnitAsync(int loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveTestUnitAsync(LoadingUnit loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveTestUnitAsync(LoadingUnit loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResumeAsync(int? missionId, BayNumber targetBay);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResumeAsync(int? missionId, BayNumber targetBay, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResumeWmsAsync(int id, int missionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResumeWmsAsync(int id, int missionId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaveLoadUnitAsync(LoadingUnit loadingUnit);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaveLoadUnitAsync(LoadingUnit loadingUnit, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartMovingLoadingUnitToBayAsync(int loadingUnitId, LoadingUnitLocation destination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartMovingLoadingUnitToBayAsync(int loadingUnitId, LoadingUnitLocation destination, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartMovingLoadingUnitToCellAsync(int loadingUnitId, int? destinationCellId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartMovingLoadingUnitToCellAsync(int loadingUnitId, int? destinationCellId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartMovingSourceDestinationAsync(LoadingUnitLocation source, LoadingUnitLocation destination, int? sourceCellId, int? destinationCellId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartMovingSourceDestinationAsync(LoadingUnitLocation source, LoadingUnitLocation destination, int? sourceCellId, int? destinationCellId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(int? missionId, BayNumber targetBay);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(int? missionId, BayNumber targetBay, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineBeltBurnishingProcedureWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(double upperPosition, double lowerPosition, int delayStart);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(double upperPosition, double lowerPosition, int delayStart, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineDepositAndPickupProcedureWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<int> IncreasePerformedCyclesAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<int> IncreasePerformedCyclesAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineSetupStatusWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BayCarouselCalibrationBypassAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BayCarouselCalibrationBypassAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BayExternalCalibrationBypassAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BayExternalCalibrationBypassAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BayHeightCheckBypassAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BayHeightCheckBypassAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BayLaserBypassAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BayLaserBypassAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BayProfileCheckBypassAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BayProfileCheckBypassAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BayShutterTestBypassAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BayShutterTestBypassAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BeltBurnishingTestBypassAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> BeltBurnishingTestBypassAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CellsHeightCheckBypassAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CellsHeightCheckBypassAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CellsPanelCheckBypassAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CellsPanelCheckBypassAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DepositAndPickUpTestBypassAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DepositAndPickUpTestBypassAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> FullTestBypassAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> FullTestBypassAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SetupStatusCapabilities> GetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SetupStatusCapabilities> GetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> HorizontalChainCalibrationBypassAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> HorizontalChainCalibrationBypassAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> LoadFirstDrawerTestBypassAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> LoadFirstDrawerTestBypassAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ShutterHeightCheckBypassAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ShutterHeightCheckBypassAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineVerticalOffsetProcedureWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CompleteProcedureAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CompleteProcedureAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OffsetCalibrationProcedure> GetParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OffsetCalibrationProcedure> GetParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveDownAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveDownAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveUpAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveUpAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateVerticalOffsetAsync(double newOffset);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateVerticalOffsetAsync(double newOffset, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateVerticalOffsetAndCompleteAsync(double newOffset);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateVerticalOffsetAndCompleteAsync(double newOffset, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineVerticalOriginProcedureWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HomingProcedureParameters> GetParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HomingProcedureParameters> GetParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineVerticalResolutionCalibrationProcedureWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetAdjustedResolutionAsync(double measuredDistance, double expectedDistance);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetAdjustedResolutionAsync(double measuredDistance, double expectedDistance, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VerticalResolutionCalibrationProcedure> GetParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VerticalResolutionCalibrationProcedure> GetParametersAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineWeightAnalysisProcedureWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SetupProcedure> GetParametersAsync(Orientation orientation);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SetupProcedure> GetParametersAsync(Orientation orientation, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(double displacement, double netWeight, int? loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(double displacement, double netWeight, int? loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineMissionsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Mission>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Mission>> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<int>> GetAllUnitGoBayAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<int>> GetAllUnitGoBayAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<int>> GetAllUnitGoCellAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<int>> GetAllUnitGoCellAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MissionInfo> GetByWmsIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MissionInfo> GetByWmsIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MissionWithLoadingUnitDetails> GetWmsDetailsByIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MissionWithLoadingUnitDetails> GetWmsDetailsByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ResetMachineAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ResetMachineAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineModeWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineMode> GetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineMode> GetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetAutomaticAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetAutomaticAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetLoadUnitOperationsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetLoadUnitOperationsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetManualAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetManualAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachinePowerWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachinePowerState> GetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachinePowerState> GetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<BayNumber, bool>> GetIsHomingAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<BayNumber, bool>> GetIsHomingAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PowerOffAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PowerOffAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PowerOnAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PowerOnAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineProfileProcedureWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CalibrationAsync(int bayPositionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CalibrationAsync(int bayPositionId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BayProfileCheckProcedure> GetParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BayProfileCheckProcedure> GetParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaveAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaveAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineSensorsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<bool>> GetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<bool>> GetAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineServicingWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ConfirmInstructionAsync(int instructionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ConfirmInstructionAsync(int instructionId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ConfirmServiceAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ConfirmServiceAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ConfirmSetupAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ConfirmSetupAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServicingInfo> GetActualAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServicingInfo> GetActualAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServicingInfo>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServicingInfo>> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServicingInfo> GetByIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServicingInfo> GetByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServicingInfo> GetInstallationInfoAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServicingInfo> GetInstallationInfoAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServicingInfo> GetLastConfirmedAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServicingInfo> GetLastConfirmedAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServicingInfo> GetLastValidAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServicingInfo> GetLastValidAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsInstructionExpiredAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsInstructionExpiredAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsInstructionExpiringAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsInstructionExpiringAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> RefreshDescriptionAsync(int servicingInfoId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> RefreshDescriptionAsync(int servicingInfoId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetIsToDoAsync(int instructionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetIsToDoAsync(int instructionId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateServiceStatusAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateServiceStatusAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineShuttersWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShutterPosition> GetShutterPositionAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShutterPosition> GetShutterPositionAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetTestParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetTestParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAsync(ShutterMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAsync(ShutterMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToAsync(ShutterPosition targetPosition);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToAsync(ShutterPosition targetPosition, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetTestAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetTestAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RunTestAsync(int delayInSeconds, int testCycleCount);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RunTestAsync(int delayInSeconds, int testCycleCount, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineStatisticsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> ConfirmStatisticsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> ConfirmStatisticsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineStatistics> GetActualAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineStatistics> GetActualAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<MachineStatistics>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<MachineStatistics>> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineStatistics> GetByIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineStatistics> GetByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineStatistics> GetLastConfirmedAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineStatistics> GetLastConfirmedAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineUsersWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserClaims> AuthenticateWithBearerTokenAsync(string bearerToken);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserClaims> AuthenticateWithBearerTokenAsync(string bearerToken, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserClaims> AuthenticateWithResourceOwnerPasswordAsync(string userName, string password);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserClaims> AuthenticateWithResourceOwnerPasswordAsync(string userName, string password, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserClaims> AuthenticateWithSupportTokenAsync(string userName, string password, string supportToken);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserClaims> AuthenticateWithSupportTokenAsync(string userName, string password, string supportToken, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<User>> GetAllUsersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<User>> GetAllUsersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetSupportTokenAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetSupportTokenAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetMASCultureAsync(string culture);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetMASCultureAsync(string culture, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineUtcTimeWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> CanEnableWmsAutoSyncModeAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> CanEnableWmsAutoSyncModeAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.DateTimeOffset> GetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.DateTimeOffset> GetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetAsync(System.DateTimeOffset dateTime);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetAsync(System.DateTimeOffset dateTime, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsWmsAutoSyncEnabledAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsWmsAutoSyncEnabledAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetWmsAutoSyncAsync(bool isEnabled);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetWmsAutoSyncAsync(bool isEnabled, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineAreasWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ItemList>> GetItemListsAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ItemList>> GetItemListsAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ProductInMachine>> GetProductsAsync(int id, int? skip, int? take, string search, bool? groupByLot, bool? distinctBySerialNumber);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ProductInMachine>> GetProductsAsync(int id, int? skip, int? take, string search, bool? groupByLot, bool? distinctBySerialNumber, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineBarcodesWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<BarcodeRule>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<BarcodeRule>> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineCompartmentsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateItemStockAsync(int id, int itemId, double stock, int? reasonId, string reasonNotes);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateItemStockAsync(int id, int itemId, double stock, int? reasonId, string reasonNotes, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineImagesWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadAsync(string id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadAsync(string id, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineItemListsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemListDetails> ExecuteAsync(int id, int areaId, int? bayId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemListDetails> ExecuteAsync(int id, int areaId, int? bayId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemListDetails> GetByIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemListDetails> GetByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ItemListRow>> GetRowsAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ItemListRow>> GetRowsAsync(int id, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineItemsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Item> GetByBarcodeAsync(string code);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Item> GetByBarcodeAsync(string code, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemDetails> GetByIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemDetails> GetByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Compartment>> GetCompartmentsAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Compartment>> GetCompartmentsAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> PickAsync(int id, ItemOptions itemOptions);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> PickAsync(int id, ItemOptions itemOptions, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> PutAsync(int id, ItemOptions itemOptions);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> PutAsync(int id, ItemOptions itemOptions, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateAverageWeightAsync(int id, double weight);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateAverageWeightAsync(int id, double weight, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineMissionOperationsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> AbortAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> AbortAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CompleteAsync(int id, double quantity, string printerName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CompleteAsync(int id, double quantity, string printerName, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MissionOperation> ExecuteAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MissionOperation> ExecuteAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<OperationReason>> GetAllReasonsAsync(MissionOperationType type);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<OperationReason>> GetAllReasonsAsync(MissionOperationType type, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetByBayCountAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetByBayCountAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetUnitIdAsync(int missionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetUnitIdAsync(int missionId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MissionOperation> GetByIdAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MissionOperation> GetByIdAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> PartiallyCompleteAsync(int id, double quantity, string printerName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> PartiallyCompleteAsync(int id, double quantity, string printerName, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachinePutToLightWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AssociateBasketToShelfAsync(string basketCode, string shelfCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AssociateBasketToShelfAsync(string basketCode, string shelfCode, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompleteBasketAsync(string basketCode, string shelfCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompleteBasketAsync(string basketCode, string shelfCode, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveFullBasketAsync(string basketCode, string shelfCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveFullBasketAsync(string basketCode, string shelfCode, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineWmsStatusWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetHealthAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetHealthAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetIpEndpointAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetIpEndpointAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetSocketLinkPollingAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetSocketLinkPollingAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetSocketLinkPortAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetSocketLinkPortAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetSocketLinkTimeoutAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetSocketLinkTimeoutAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetTimeSyncIntervalMillisecondsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetTimeSyncIntervalMillisecondsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsEnabledAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsEnabledAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsTimeSyncEnabledAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsTimeSyncEnabledAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> SocketLinkIsEnabledAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> SocketLinkIsEnabledAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateAsync(bool isEnabled, string httpUrl, bool socketLinkIsEnabled, int socketLinkPort, int socketLinkTimeout, int socketLinkPolling);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateAsync(bool isEnabled, string httpUrl, bool socketLinkIsEnabled, int socketLinkPort, int socketLinkTimeout, int socketLinkPolling, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateIsTimeSyncEnabledAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateIsTimeSyncEnabledAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateTimeSyncIntervalMillisecondsAsync(int seconds);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateTimeSyncIntervalMillisecondsAsync(int seconds, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BayAccessories : DataModel
    {
        [Newtonsoft.Json.JsonProperty("AlphaNumericBar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlphaNumericBar AlphaNumericBar { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BarcodeReader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BarcodeReader BarcodeReader { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CardReader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CardReader CardReader { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LabelPrinter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelPrinter LabelPrinter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LaserPointer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LaserPointer LaserPointer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TokenReader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TokenReader TokenReader { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WeightingScale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeightingScale WeightingScale { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static BayAccessories FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BayAccessories>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlphaNumericBar : TcpIpAccessory
    {
        [Newtonsoft.Json.JsonProperty("Size", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlphaNumericBarSize Size { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static AlphaNumericBar FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AlphaNumericBar>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AlphaNumericBarSize
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ExtraSmall")]
        ExtraSmall = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Small")]
        Small = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Medium")]
        Medium = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Large")]
        Large = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExtraLarge")]
        ExtraLarge = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TcpIpAccessory : Accessory
    {
        [Newtonsoft.Json.JsonProperty("IpAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IPAddress IpAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TcpPort", Required = Newtonsoft.Json.Required.Always)]
        public int TcpPort { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static TcpIpAccessory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TcpIpAccessory>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AddressFamily
    {
        Unspecified = 0,
    
        Unix = 1,
    
        InterNetwork = 2,
    
        ImpLink = 3,
    
        Pup = 4,
    
        Chaos = 5,
    
        Ipx = 6,
    
        NS = 6,
    
        Iso = 7,
    
        Osi = 7,
    
        Ecma = 8,
    
        DataKit = 9,
    
        Ccitt = 10,
    
        Sna = 11,
    
        DecNet = 12,
    
        DataLink = 13,
    
        Lat = 14,
    
        HyperChannel = 15,
    
        AppleTalk = 16,
    
        NetBios = 17,
    
        VoiceView = 18,
    
        FireFox = 19,
    
        Banyan = 21,
    
        Atm = 22,
    
        InterNetworkV6 = 23,
    
        Cluster = 24,
    
        Ieee12844 = 25,
    
        Irda = 26,
    
        NetworkDesigners = 28,
    
        Max = 29,
    
        Unknown = -1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Accessory : DataModel
    {
        [Newtonsoft.Json.JsonProperty("DeviceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceInformation DeviceInformation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsConfiguredNew", Required = Newtonsoft.Json.Required.Always)]
        public bool IsConfiguredNew { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsEnabledNew", Required = Newtonsoft.Json.Required.Always)]
        public bool IsEnabledNew { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Accessory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Accessory>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceInformation : DataModel
    {
        [Newtonsoft.Json.JsonProperty("FirmwareVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirmwareVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManufactureDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ManufactureDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModelNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static DeviceInformation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeviceInformation>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataModel 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static DataModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataModel>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BarcodeReader : SerialPortAccessory
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static BarcodeReader FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BarcodeReader>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SerialPortAccessory : Accessory
    {
        [Newtonsoft.Json.JsonProperty("PortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PortName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static SerialPortAccessory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SerialPortAccessory>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CardReader : Accessory
    {
        [Newtonsoft.Json.JsonProperty("TokenRegex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TokenRegex { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static CardReader FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CardReader>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LabelPrinter : Accessory
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static LabelPrinter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LabelPrinter>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LaserPointer : TcpIpAccessory
    {
        [Newtonsoft.Json.JsonProperty("XOffset", Required = Newtonsoft.Json.Required.Always)]
        public double XOffset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("YOffset", Required = Newtonsoft.Json.Required.Always)]
        public double YOffset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ZOffsetLowerPosition", Required = Newtonsoft.Json.Required.Always)]
        public double ZOffsetLowerPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ZOffsetUpperPosition", Required = Newtonsoft.Json.Required.Always)]
        public double ZOffsetUpperPosition { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static LaserPointer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LaserPointer>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TokenReader : SerialPortAccessory
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static TokenReader FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TokenReader>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeightingScale : SerialPortAccessory
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static WeightingScale FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeightingScale>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProblemDetails 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ProblemDetails FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BayNumber
    {
        None = 0,
    
        BayOne = 1,
    
        BayTwo = 2,
    
        BayThree = 3,
    
        ElevatorBay = 4,
    
        All = 10,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Bay : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Accessories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BayAccessories Accessories { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Carousel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Carousel Carousel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChainOffset", Required = Newtonsoft.Json.Required.Always)]
        public double ChainOffset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CurrentMission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mission CurrentMission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CyclesToCalibrate", Required = Newtonsoft.Json.Required.Always)]
        public int CyclesToCalibrate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EmptyLoadMovement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MovementParameters EmptyLoadMovement { get; set; }
    
        [Newtonsoft.Json.JsonProperty("External", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public External External { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FullLoadMovement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MovementParameters FullLoadMovement { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Inventory", Required = Newtonsoft.Json.Required.Always)]
        public bool Inventory { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Inverter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Inverter Inverter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IoDevice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IoDevice IoDevice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsActive", Required = Newtonsoft.Json.Required.Always)]
        public bool IsActive { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsAdjustByWeight", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAdjustByWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsCheckIntrusion", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCheckIntrusion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsDouble", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDouble { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsExternal", Required = Newtonsoft.Json.Required.Always)]
        public bool IsExternal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsFastDepositToBay", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFastDepositToBay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastCalibrationCycles", Required = Newtonsoft.Json.Required.Always)]
        public int LastCalibrationCycles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Number", Required = Newtonsoft.Json.Required.Always)]
        public BayNumber Number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Operation", Required = Newtonsoft.Json.Required.Always)]
        public BayOperation Operation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Pick", Required = Newtonsoft.Json.Required.Always)]
        public bool Pick { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Positions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<BayPosition> Positions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Put", Required = Newtonsoft.Json.Required.Always)]
        public bool Put { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Resolution", Required = Newtonsoft.Json.Required.Always)]
        public double Resolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Shutter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Shutter Shutter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Side", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WarehouseSide Side { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        public BayStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCycles", Required = Newtonsoft.Json.Required.Always)]
        public int TotalCycles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("View", Required = Newtonsoft.Json.Required.Always)]
        public bool View { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Bay FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Bay>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Carousel : DataModel
    {
        [Newtonsoft.Json.JsonProperty("AssistedMovements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CarouselManualParameters AssistedMovements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ElevatorDistance", Required = Newtonsoft.Json.Required.Always)]
        public double ElevatorDistance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HomingCreepSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double HomingCreepSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HomingFastSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double HomingFastSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastIdealPosition", Required = Newtonsoft.Json.Required.Always)]
        public double LastIdealPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManualMovements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CarouselManualParameters ManualMovements { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Carousel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Carousel>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CarouselManualParameters : DataModel
    {
        [Newtonsoft.Json.JsonProperty("FeedRate", Required = Newtonsoft.Json.Required.Always)]
        public double FeedRate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static CarouselManualParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CarouselManualParameters>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Mission : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Always)]
        public CommandAction Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BayNotifications", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MissionBayNotifications BayNotifications { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CloseShutterBayNumber", Required = Newtonsoft.Json.Required.Always)]
        public BayNumber CloseShutterBayNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CloseShutterPosition", Required = Newtonsoft.Json.Required.Always)]
        public ShutterPosition CloseShutterPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DestinationCellId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DestinationCellId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeviceNotifications", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MissionDeviceNotifications DeviceNotifications { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Direction", Required = Newtonsoft.Json.Required.Always)]
        public HorizontalMovementDirection Direction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EjectLoadUnit", Required = Newtonsoft.Json.Required.Always)]
        public bool EjectLoadUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Always)]
        public MachineErrorCode ErrorCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ErrorMovements", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MissionErrorMovements ErrorMovements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitCellSourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LoadUnitCellSourceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitDestination", Required = Newtonsoft.Json.Required.Always)]
        public LoadingUnitLocation LoadUnitDestination { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitId", Required = Newtonsoft.Json.Required.Always)]
        public int LoadUnitId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitSource", Required = Newtonsoft.Json.Required.Always)]
        public LoadingUnitLocation LoadUnitSource { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MissionType", Required = Newtonsoft.Json.Required.Always)]
        public MissionType MissionType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NeedHomingAxis", Required = Newtonsoft.Json.Required.Always)]
        public Axis NeedHomingAxis { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NeedMovingBackward", Required = Newtonsoft.Json.Required.Always)]
        public bool NeedMovingBackward { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OpenShutterPosition", Required = Newtonsoft.Json.Required.Always)]
        public ShutterPosition OpenShutterPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RestoreConditions", Required = Newtonsoft.Json.Required.Always)]
        public bool RestoreConditions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RestoreStep", Required = Newtonsoft.Json.Required.Always)]
        public MissionStep RestoreStep { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MissionStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Step", Required = Newtonsoft.Json.Required.Always)]
        public MissionStep Step { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StepTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StepTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StopReason", Required = Newtonsoft.Json.Required.Always)]
        public StopRequestReason StopReason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetBay", Required = Newtonsoft.Json.Required.Always)]
        public BayNumber TargetBay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WmsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WmsId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Mission FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mission>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CommandAction
    {
        Start = 0,
    
        Activate = 1,
    
        Pause = 2,
    
        Resume = 3,
    
        Abort = 4,
    
        Stop = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    [System.Flags]
    public enum MissionBayNotifications
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BayOne")]
        BayOne = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BayTwo")]
        BayTwo = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BayThree")]
        BayThree = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElevatorBay")]
        ElevatorBay = 16,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShutterPosition
    {
        NotSpecified = 0,
    
        Opened = 1,
    
        Half = 2,
    
        Closed = 3,
    
        Intermediate = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    [System.Flags]
    public enum MissionDeviceNotifications
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Positioning")]
        Positioning = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Shutter")]
        Shutter = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Homing")]
        Homing = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CombinedMovements")]
        CombinedMovements = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CheckIntrusion")]
        CheckIntrusion = 32,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum HorizontalMovementDirection
    {
        NotSpecified = 0,
    
        Forwards = 1,
    
        Backwards = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MachineErrorCode
    {
        CradleNotCompletelyLoaded = 1,
    
        ConditionsNotMetForPositioning = 2,
    
        ConditionsNotMetForRunning = 3,
    
        ConditionsNotMetForHoming = 4,
    
        SecurityWasTriggered = 5,
    
        SecurityButtonWasTriggered = 6,
    
        SecurityBarrierWasTriggered = 7,
    
        SecurityLeftSensorWasTriggered = 8,
    
        InverterFaultStateDetected = 9,
    
        CradleNotCorrectlyLoadedDuringPickup = 10,
    
        CradleNotCorrectlyUnloadedDuringDeposit = 11,
    
        ZeroSensorErrorAfterPickup = 12,
    
        ZeroSensorErrorAfterDeposit = 13,
    
        InvalidPresenceSensors = 14,
    
        MissingZeroSensorWithEmptyElevator = 15,
    
        ZeroSensorActiveWithFullElevator = 16,
    
        LoadUnitPresentOnEmptyElevator = 17,
    
        TopLevelBayOccupied = 18,
    
        BottomLevelBayOccupied = 19,
    
        TopLevelBayEmpty = 20,
    
        BottomLevelBayEmpty = 21,
    
        SensorZeroBayNotActiveAtStart = 22,
    
        InverterConnectionError = 23,
    
        IoDeviceConnectionError = 24,
    
        LaserConnectionError = 25,
    
        LoadUnitWeightExceeded = 26,
    
        LoadUnitHeightFromBayExceeded = 27,
    
        LoadUnitHeightToBayExceeded = 28,
    
        LoadUnitWeightTooLow = 29,
    
        MachineWeightExceeded = 30,
    
        DestinationBelowLowerBound = 31,
    
        DestinationOverUpperBound = 32,
    
        BayInvertersBusy = 33,
    
        IoDeviceError = 34,
    
        MachineModeNotValid = 35,
    
        AnotherMissionIsActiveForThisLoadUnit = 36,
    
        AnotherMissionIsActiveForThisBay = 37,
    
        AnotherMissionOfThisTypeIsActive = 38,
    
        WarehouseIsFull = 39,
    
        CellLogicallyOccupied = 40,
    
        MoveBayChainNotAllowed = 41,
    
        AutomaticRestoreNotAllowed = 42,
    
        DestinationTypeNotValid = 43,
    
        MissionTypeNotValid = 44,
    
        ResumeCommandNotValid = 45,
    
        DestinationBayNotCalibrated = 46,
    
        NoLoadUnitInSource = 47,
    
        LoadUnitSourceDb = 48,
    
        LoadUnitDestinationCell = 49,
    
        LoadUnitElevator = 50,
    
        LoadUnitNotRemoved = 51,
    
        LoadUnitDestinationBay = 52,
    
        LoadUnitSourceCell = 53,
    
        LoadUnitNotFound = 54,
    
        LoadUnitNotLoaded = 55,
    
        LoadUnitSourceBay = 56,
    
        LoadUnitShutterOpen = 57,
    
        LoadUnitShutterInvalid = 58,
    
        LoadUnitShutterClosed = 59,
    
        LoadUnitPresentInCell = 60,
    
        LoadUnitOtherBay = 61,
    
        LoadUnitSourceElevator = 62,
    
        LoadUnitMissingOnElevator = 63,
    
        LoadUnitMissingOnBay = 64,
    
        LoadUnitUndefinedUpper = 65,
    
        LoadUnitUndefinedBottom = 66,
    
        FirstTestFailed = 67,
    
        FullTestFailed = 68,
    
        WarehouseNotEmpty = 69,
    
        SensorZeroBayNotActiveAtEnd = 70,
    
        SecurityRightSensorWasTriggered = 71,
    
        VerticalPositionChanged = 72,
    
        InvalidBay = 73,
    
        InvalidPositionBay = 74,
    
        ElevatorOverrunDetected = 75,
    
        ElevatorUnderrunDetected = 76,
    
        ExternalBayEmpty = 77,
    
        ExternalBayOccupied = 78,
    
        WmsError = 79,
    
        BayPositionDisabled = 80,
    
        InverterErrorBaseCode = 1000,
    
        InverterErrorInvalidParameter = 1001,
    
        InverterErrorInvalidDataset = 1002,
    
        InverterErrorParameterIsWriteOnly = 1003,
    
        InverterErrorParameterIsReadOnly = 1004,
    
        InverterErrorEepromReadError = 1005,
    
        InverterErrorEepromWriteError = 1006,
    
        InverterErrorEepromChecksumError = 1007,
    
        InverterErrorCannotWriteParameterWhileRunning = 1008,
    
        InverterErrorDatasetValuesAreDifferent = 1009,
    
        InverterErrorUnknownParameter = 1011,
    
        InverterErrorSyntaxError = 1013,
    
        InverterErrorWrongPayloadLength = 1014,
    
        InverterErrorNodeNotAvailable = 1020,
    
        InverterErrorSyntaxError2 = 1030,
    
        NoError = -1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    [System.Flags]
    public enum MissionErrorMovements
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MoveForward")]
        MoveForward = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MoveBackward")]
        MoveBackward = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MoveShutterOpen")]
        MoveShutterOpen = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MoveShutterClosed")]
        MoveShutterClosed = 16,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LoadingUnitLocation
    {
        NoLocation = 0,
    
        InternalBay1Up = 1,
    
        InternalBay1Down = 2,
    
        InternalBay2Up = 3,
    
        InternalBay2Down = 4,
    
        InternalBay3Up = 5,
    
        InternalBay3Down = 6,
    
        ExternalBay1Up = 7,
    
        ExternalBay1Down = 8,
    
        ExternalBay2Up = 9,
    
        ExternalBay2Down = 10,
    
        ExternalBay3Up = 11,
    
        ExternalBay3Down = 12,
    
        CarouselBay1Up = 13,
    
        CarouselBay1Down = 14,
    
        CarouselBay2Up = 15,
    
        CarouselBay2Down = 16,
    
        CarouselBay3Up = 17,
    
        CarouselBay3Down = 18,
    
        Cell = 19,
    
        LoadUnit = 20,
    
        Elevator = 21,
    
        Up = 22,
    
        Down = 23,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MissionType
    {
        NoType = 0,
    
        Manual = 1,
    
        LoadUnitOperation = 2,
    
        WMS = 3,
    
        IN = 4,
    
        OUT = 5,
    
        FirstTest = 6,
    
        FullTestIN = 7,
    
        FullTestOUT = 8,
    
        Compact = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Axis
    {
        None = 0,
    
        Horizontal = 1,
    
        Vertical = 2,
    
        HorizontalAndVertical = 3,
    
        BayChain = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MissionStep
    {
        NotDefined = 0,
    
        New = 1,
    
        Start = 2,
    
        LoadElevator = 3,
    
        ToTarget = 4,
    
        DepositUnit = 5,
    
        WaitPick = 6,
    
        BayChain = 7,
    
        CloseShutter = 8,
    
        BackToBay = 9,
    
        WaitChain = 10,
    
        WaitDepositCell = 11,
    
        WaitDepositBay = 12,
    
        ExtBay = 13,
    
        End = 14,
    
        Error = 101,
    
        ErrorLoad = 102,
    
        ErrorDeposit = 103,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MissionStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Executing")]
        Executing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Waiting")]
        Waiting = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Aborted")]
        Aborted = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Completing")]
        Completing = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StopRequestReason
    {
        NoReason = 0,
    
        Stop = 1,
    
        Error = 2,
    
        Abort = 3,
    
        RunningStateChanged = 4,
    
        FaultStateChanged = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MovementParameters : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Acceleration", Required = Newtonsoft.Json.Required.Always)]
        public double Acceleration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Deceleration", Required = Newtonsoft.Json.Required.Always)]
        public double Deceleration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Speed", Required = Newtonsoft.Json.Required.Always)]
        public double Speed { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MovementParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MovementParameters>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class External : DataModel
    {
        [Newtonsoft.Json.JsonProperty("AssistedMovements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalBayManualParameters AssistedMovements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtraRace", Required = Newtonsoft.Json.Required.Always)]
        public double ExtraRace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HomingCreepSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double HomingCreepSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HomingFastSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double HomingFastSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastIdealPosition", Required = Newtonsoft.Json.Required.Always)]
        public double LastIdealPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManualMovements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalBayManualParameters ManualMovements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Race", Required = Newtonsoft.Json.Required.Always)]
        public double Race { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static External FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<External>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalBayManualParameters : DataModel
    {
        [Newtonsoft.Json.JsonProperty("FeedRate", Required = Newtonsoft.Json.Required.Always)]
        public double FeedRate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ExternalBayManualParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExternalBayManualParameters>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Inverter : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Index", Required = Newtonsoft.Json.Required.Always)]
        public InverterIndex Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IpAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IPAddress IpAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<InverterParameter> Parameters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TcpPort", Required = Newtonsoft.Json.Required.Always)]
        public int TcpPort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        public InverterType Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Inverter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Inverter>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InverterIndex
    {
        MainInverter = 0,
    
        Slave1 = 1,
    
        Slave2 = 2,
    
        Slave3 = 3,
    
        Slave4 = 4,
    
        Slave5 = 5,
    
        Slave6 = 6,
    
        Slave7 = 7,
    
        All = 16,
    
        None = 255,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InverterParameter : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Always)]
        public int Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DataSet", Required = Newtonsoft.Json.Required.Always)]
        public int DataSet { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsReadOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool IsReadOnly { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Payload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Payload { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StringValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StringValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Always)]
        public int Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static InverterParameter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InverterParameter>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InverterType
    {
        Undefined = 0,
    
        Ang = 1,
    
        Agl = 2,
    
        Acu = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IoDevice : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Index", Required = Newtonsoft.Json.Required.Always)]
        public IoIndex Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IpAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IPAddress IpAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TcpPort", Required = Newtonsoft.Json.Required.Always)]
        public int TcpPort { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static IoDevice FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IoDevice>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IoIndex
    {
        IoDevice1 = 0,
    
        IoDevice2 = 1,
    
        IoDevice3 = 2,
    
        All = 16,
    
        None = 255,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BayOperation
    {
        Idle = 0,
    
        ExecutingMission = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BayPosition : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public double Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsBlocked", Required = Newtonsoft.Json.Required.Always)]
        public bool IsBlocked { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsUpper", Required = Newtonsoft.Json.Required.Always)]
        public bool IsUpper { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadingUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoadingUnit LoadingUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Always)]
        public LoadingUnitLocation Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LocationUpDown", Required = Newtonsoft.Json.Required.Always)]
        public LoadingUnitLocation LocationUpDown { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxDoubleHeight", Required = Newtonsoft.Json.Required.Always)]
        public double MaxDoubleHeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxSingleHeight", Required = Newtonsoft.Json.Required.Always)]
        public double MaxSingleHeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProfileOffset", Required = Newtonsoft.Json.Required.Always)]
        public double ProfileOffset { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static BayPosition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BayPosition>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LoadingUnit : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Cell", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Cell Cell { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CellId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CellId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GrossWeight", Required = Newtonsoft.Json.Required.Always)]
        public double GrossWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public double Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsInFullTest", Required = Newtonsoft.Json.Required.Always)]
        public bool IsInFullTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsIntoMachine", Required = Newtonsoft.Json.Required.Always)]
        public bool IsIntoMachine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxNetWeight", Required = Newtonsoft.Json.Required.Always)]
        public double MaxNetWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MissionsCount", Required = Newtonsoft.Json.Required.Always)]
        public int MissionsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NetWeight", Required = Newtonsoft.Json.Required.Always)]
        public double NetWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        public LoadingUnitStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Tare", Required = Newtonsoft.Json.Required.Always)]
        public double Tare { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static LoadingUnit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoadingUnit>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Cell : DataModel
    {
        [Newtonsoft.Json.JsonProperty("BlockLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BlockLevel BlockLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsFree", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFree { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PanelId", Required = Newtonsoft.Json.Required.Always)]
        public int PanelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Position", Required = Newtonsoft.Json.Required.Always)]
        public double Position { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Side", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WarehouseSide Side { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Cell FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Cell>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BlockLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
        Undefined = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SpaceOnly")]
        SpaceOnly = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Blocked")]
        Blocked = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NeedsTest")]
        NeedsTest = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UnderWeight")]
        UnderWeight = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WarehouseSide
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NotSpecified")]
        NotSpecified = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Front")]
        Front = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Back")]
        Back = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LoadingUnitStatus
    {
        Undefined = 0,
    
        InBay = 1,
    
        OnMovementToLocation = 2,
    
        OnMovementToBay = 3,
    
        InLocation = 4,
    
        InElevator = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Shutter : DataModel
    {
        [Newtonsoft.Json.JsonProperty("AssistedMovements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShutterManualParameters AssistedMovements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Inverter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Inverter Inverter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManualMovements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShutterManualParameters ManualMovements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        public ShutterType Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Shutter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Shutter>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShutterManualParameters : DataModel
    {
        [Newtonsoft.Json.JsonProperty("FeedRate", Required = Newtonsoft.Json.Required.Always)]
        public double FeedRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HighSpeedDurationClose", Required = Newtonsoft.Json.Required.Always)]
        public double HighSpeedDurationClose { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HighSpeedDurationOpen", Required = Newtonsoft.Json.Required.Always)]
        public double HighSpeedDurationOpen { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HighSpeedHalfDurationClose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HighSpeedHalfDurationClose { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HighSpeedHalfDurationOpen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HighSpeedHalfDurationOpen { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double MaxSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double MinSpeed { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ShutterManualParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShutterManualParameters>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShutterType
    {
        NotSpecified = 0,
    
        TwoSensors = 1,
    
        ThreeSensors = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BayStatus
    {
        Disconnected = 0,
    
        Idle = 1,
    
        Busy = 2,
    
        Errored = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ActionPolicy 
    {
        [Newtonsoft.Json.JsonProperty("IsAllowed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAllowed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReasonType", Required = Newtonsoft.Json.Required.Always)]
        public ReasonType ReasonType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ActionPolicy FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActionPolicy>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ReasonType
    {
        None = 0,
    
        ElevatorInPosition = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum VerticalMovementDirection
    {
        Up = 0,
    
        Down = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MovementCategory
    {
        None = 0,
    
        Manual = 1,
    
        Assisted = 2,
    
        Automatic = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RepeatedTestProcedure : SetupProcedure
    {
        [Newtonsoft.Json.JsonProperty("InProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool InProgress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PerformedCycles", Required = Newtonsoft.Json.Required.Always)]
        public int PerformedCycles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequiredCycles", Required = Newtonsoft.Json.Required.Always)]
        public int RequiredCycles { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static RepeatedTestProcedure FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RepeatedTestProcedure>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SetupProcedure : DataModel
    {
        [Newtonsoft.Json.JsonProperty("FeedRate", Required = Newtonsoft.Json.Required.Always)]
        public double FeedRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsBypassed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsBypassed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsCompleted", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCompleted { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static SetupProcedure FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetupProcedure>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CellPanel : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Cells", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<Cell> Cells { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsChecked", Required = Newtonsoft.Json.Required.Always)]
        public bool IsChecked { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Side", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WarehouseSide Side { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static CellPanel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CellPanel>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PositioningProcedure : SetupProcedure
    {
        [Newtonsoft.Json.JsonProperty("InProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool InProgress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Step", Required = Newtonsoft.Json.Required.Always)]
        public double Step { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static PositioningProcedure FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PositioningProcedure>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CellStatisticsSummary 
    {
        [Newtonsoft.Json.JsonProperty("CellOccupationPercentage", Required = Newtonsoft.Json.Required.Always)]
        public double CellOccupationPercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CellStatusStatistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<CellStatusStatistics> CellStatusStatistics { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FragmentBackPercent", Required = Newtonsoft.Json.Required.Always)]
        public double FragmentBackPercent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FragmentFrontPercent", Required = Newtonsoft.Json.Required.Always)]
        public double FragmentFrontPercent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FragmentTotalPercent", Required = Newtonsoft.Json.Required.Always)]
        public double FragmentTotalPercent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxSolidSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<WarehouseSide, double> MaxSolidSpace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalBackCells", Required = Newtonsoft.Json.Required.Always)]
        public int TotalBackCells { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCells", Required = Newtonsoft.Json.Required.Always)]
        public int TotalCells { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalFrontCells", Required = Newtonsoft.Json.Required.Always)]
        public int TotalFrontCells { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static CellStatisticsSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CellStatisticsSummary>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CellStatusStatistics 
    {
        [Newtonsoft.Json.JsonProperty("IsFree", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFree { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RatioBackCells", Required = Newtonsoft.Json.Required.Always)]
        public double RatioBackCells { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RatioFrontCells", Required = Newtonsoft.Json.Required.Always)]
        public double RatioFrontCells { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalBackCells", Required = Newtonsoft.Json.Required.Always)]
        public int TotalBackCells { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalFrontCells", Required = Newtonsoft.Json.Required.Always)]
        public int TotalFrontCells { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static CellStatusStatistics FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CellStatusStatistics>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VertimagConfiguration 
    {
        [Newtonsoft.Json.JsonProperty("LoadingUnits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<LoadingUnit> LoadingUnits { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Machine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Machine Machine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MachineStatistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<MachineStatistics> MachineStatistics { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ServicingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<ServicingInfo> ServicingInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SetupProcedures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProceduresSet SetupProcedures { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Wms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WmsSettings Wms { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static VertimagConfiguration FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VertimagConfiguration>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Machine : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Bays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<Bay> Bays { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Elevator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Elevator Elevator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExpireCountPrecent", Required = Newtonsoft.Json.Required.Always)]
        public int ExpireCountPrecent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExpireDays", Required = Newtonsoft.Json.Required.Always)]
        public int ExpireDays { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public double Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HorizontalCyclesToCalibrate", Required = Newtonsoft.Json.Required.Always)]
        public int HorizontalCyclesToCalibrate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HorizontalPositionToCalibrate", Required = Newtonsoft.Json.Required.Always)]
        public int HorizontalPositionToCalibrate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitDepth", Required = Newtonsoft.Json.Required.Always)]
        public double LoadUnitDepth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitMaxHeight", Required = Newtonsoft.Json.Required.Always)]
        public double LoadUnitMaxHeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitMaxNetWeight", Required = Newtonsoft.Json.Required.Always)]
        public double LoadUnitMaxNetWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitMinHeight", Required = Newtonsoft.Json.Required.Always)]
        public double LoadUnitMinHeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitTare", Required = Newtonsoft.Json.Required.Always)]
        public double LoadUnitTare { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitVeryHeavyPercent", Required = Newtonsoft.Json.Required.Always)]
        public double LoadUnitVeryHeavyPercent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitWidth", Required = Newtonsoft.Json.Required.Always)]
        public double LoadUnitWidth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxGrossWeight", Required = Newtonsoft.Json.Required.Always)]
        public double MaxGrossWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Panels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<CellPanel> Panels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Simulation", Required = Newtonsoft.Json.Required.Always)]
        public bool Simulation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Machine FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Machine>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Elevator : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Axes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<ElevatorAxis> Axes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BayPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BayPosition BayPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Cell", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Cell Cell { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadingUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoadingUnit LoadingUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadingUnitId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LoadingUnitId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StructuralProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElevatorStructuralProperties StructuralProperties { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Elevator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Elevator>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ElevatorAxis : DataModel
    {
        [Newtonsoft.Json.JsonProperty("AssistedMovements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElevatorAxisManualParameters AssistedMovements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BrakeActivatePercent", Required = Newtonsoft.Json.Required.Always)]
        public double BrakeActivatePercent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BrakeReleaseTime", Required = Newtonsoft.Json.Required.Always)]
        public double BrakeReleaseTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChainOffset", Required = Newtonsoft.Json.Required.Always)]
        public double ChainOffset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EmptyLoadMovement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MovementParameters EmptyLoadMovement { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FullLoadMovement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MovementParameters FullLoadMovement { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HomingCreepSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double HomingCreepSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HomingFastSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double HomingFastSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Inverter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Inverter Inverter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastCalibrationCycles", Required = Newtonsoft.Json.Required.Always)]
        public int LastCalibrationCycles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastIdealPosition", Required = Newtonsoft.Json.Required.Always)]
        public double LastIdealPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LowerBound", Required = Newtonsoft.Json.Required.Always)]
        public double LowerBound { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManualMovements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElevatorAxisManualParameters ManualMovements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Offset", Required = Newtonsoft.Json.Required.Always)]
        public double Offset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Orientation", Required = Newtonsoft.Json.Required.Always)]
        public Orientation Orientation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProfileCalibrateLength", Required = Newtonsoft.Json.Required.Always)]
        public double ProfileCalibrateLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProfileCalibratePosition", Required = Newtonsoft.Json.Required.Always)]
        public int ProfileCalibratePosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProfileCalibrateSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double ProfileCalibrateSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Profiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<MovementProfile> Profiles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Resolution", Required = Newtonsoft.Json.Required.Always)]
        public double Resolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UpperBound", Required = Newtonsoft.Json.Required.Always)]
        public double UpperBound { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalDepositOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VerticalDepositOffset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalPickupOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VerticalPickupOffset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WeightMeasurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeightMeasurement WeightMeasurement { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ElevatorAxis FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ElevatorAxis>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ElevatorAxisManualParameters : DataModel
    {
        [Newtonsoft.Json.JsonProperty("FeedRate", Required = Newtonsoft.Json.Required.Always)]
        public double FeedRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FeedRateAfterZero", Required = Newtonsoft.Json.Required.Always)]
        public double FeedRateAfterZero { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TargetDistance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetDistanceAfterZero", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TargetDistanceAfterZero { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ElevatorAxisManualParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ElevatorAxisManualParameters>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Orientation
    {
        Undefined = 0,
    
        Vertical = 1,
    
        Horizontal = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MovementProfile : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        public MovementProfileType Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Steps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<StepMovementParameters> Steps { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalDistance", Required = Newtonsoft.Json.Required.Always)]
        public double TotalDistance { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MovementProfile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MovementProfile>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MovementProfileType
    {
        Undefined = 0,
    
        ShortPickup = 1,
    
        ShortDeposit = 2,
    
        LongDeposit = 3,
    
        LongPickup = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StepMovementParameters : MovementParameters
    {
        [Newtonsoft.Json.JsonProperty("AdjustAccelerationByWeight", Required = Newtonsoft.Json.Required.Always)]
        public bool AdjustAccelerationByWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AdjustSpeedByWeight", Required = Newtonsoft.Json.Required.Always)]
        public bool AdjustSpeedByWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Number", Required = Newtonsoft.Json.Required.Always)]
        public int Number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Position", Required = Newtonsoft.Json.Required.Always)]
        public double Position { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static StepMovementParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StepMovementParameters>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeightMeasurement : DataModel
    {
        [Newtonsoft.Json.JsonProperty("MeasureConst0", Required = Newtonsoft.Json.Required.Always)]
        public double MeasureConst0 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MeasureConst1", Required = Newtonsoft.Json.Required.Always)]
        public double MeasureConst1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MeasureConst2", Required = Newtonsoft.Json.Required.Always)]
        public double MeasureConst2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MeasureSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double MeasureSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MeasureTime", Required = Newtonsoft.Json.Required.Always)]
        public int MeasureTime { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static WeightMeasurement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeightMeasurement>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ElevatorStructuralProperties : DataModel
    {
        [Newtonsoft.Json.JsonProperty("BeltRigidity", Required = Newtonsoft.Json.Required.Always)]
        public int BeltRigidity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BeltSpacing", Required = Newtonsoft.Json.Required.Always)]
        public double BeltSpacing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ElevatorWeight", Required = Newtonsoft.Json.Required.Always)]
        public double ElevatorWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HalfShaftLength", Required = Newtonsoft.Json.Required.Always)]
        public double HalfShaftLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PulleyDiameter", Required = Newtonsoft.Json.Required.Always)]
        public double PulleyDiameter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SecondTermMultiplier", Required = Newtonsoft.Json.Required.Always)]
        public int SecondTermMultiplier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShaftDiameter", Required = Newtonsoft.Json.Required.Always)]
        public double ShaftDiameter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShaftElasticity", Required = Newtonsoft.Json.Required.Always)]
        public double ShaftElasticity { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ElevatorStructuralProperties FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ElevatorStructuralProperties>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MachineStatistics : DataModel
    {
        [Newtonsoft.Json.JsonProperty("AreaFillPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AreaFillPercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AutomaticTimePercentage", Required = Newtonsoft.Json.Required.Always)]
        public double AutomaticTimePercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalAutomaticTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan TotalAutomaticTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalBayChainKilometers1", Required = Newtonsoft.Json.Required.Always)]
        public double TotalBayChainKilometers1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalBayChainKilometers2", Required = Newtonsoft.Json.Required.Always)]
        public double TotalBayChainKilometers2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalBayChainKilometers3", Required = Newtonsoft.Json.Required.Always)]
        public double TotalBayChainKilometers3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalHorizontalAxisCycles", Required = Newtonsoft.Json.Required.Always)]
        public int TotalHorizontalAxisCycles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalHorizontalAxisKilometers", Required = Newtonsoft.Json.Required.Always)]
        public double TotalHorizontalAxisKilometers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalLoadUnitsInBay1", Required = Newtonsoft.Json.Required.Always)]
        public int TotalLoadUnitsInBay1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalLoadUnitsInBay2", Required = Newtonsoft.Json.Required.Always)]
        public int TotalLoadUnitsInBay2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalLoadUnitsInBay3", Required = Newtonsoft.Json.Required.Always)]
        public int TotalLoadUnitsInBay3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalMissions", Required = Newtonsoft.Json.Required.Always)]
        public int TotalMissions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalMissionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan TotalMissionTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalPowerOnTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan TotalPowerOnTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalVerticalAxisCycles", Required = Newtonsoft.Json.Required.Always)]
        public int TotalVerticalAxisCycles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalVerticalAxisKilometers", Required = Newtonsoft.Json.Required.Always)]
        public double TotalVerticalAxisKilometers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalWeightBack", Required = Newtonsoft.Json.Required.Always)]
        public double TotalWeightBack { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalWeightFront", Required = Newtonsoft.Json.Required.Always)]
        public double TotalWeightFront { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UsageTimePercentage", Required = Newtonsoft.Json.Required.Always)]
        public double UsageTimePercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WeightCapacityPercentage", Required = Newtonsoft.Json.Required.Always)]
        public double WeightCapacityPercentage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MachineStatistics FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MachineStatistics>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServicingInfo : DataModel
    {
        [Newtonsoft.Json.JsonProperty("InstallationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InstallationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Instructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<Instruction> Instructions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsHandOver", Required = Newtonsoft.Json.Required.Always)]
        public bool IsHandOver { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastServiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastServiceDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MachineStatistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MachineStatistics MachineStatistics { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MachineStatisticsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MachineStatisticsId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NextServiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextServiceDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ServiceStatus", Required = Newtonsoft.Json.Required.Always)]
        public MachineServiceStatus ServiceStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalMissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalMissions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ServicingInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServicingInfo>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Instruction : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Definition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InstructionDefinition Definition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DoubleCounter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DoubleCounter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InstructionStatus", Required = Newtonsoft.Json.Required.Always)]
        public MachineServiceStatus InstructionStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IntCounter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IntCounter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsDone", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsToDo", Required = Newtonsoft.Json.Required.Always)]
        public bool IsToDo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaintenanceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MaintenanceDate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Instruction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Instruction>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InstructionDefinition : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Axis", Required = Newtonsoft.Json.Required.Always)]
        public Axis Axis { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BayNumber", Required = Newtonsoft.Json.Required.Always)]
        public BayNumber BayNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CounterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CounterName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InstructionType", Required = Newtonsoft.Json.Required.Always)]
        public InstructionType InstructionType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsCarousel", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCarousel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsShutter", Required = Newtonsoft.Json.Required.Always)]
        public bool IsShutter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsSystem", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSystem { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxDays { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxRelativeCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxRelativeCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxTotalCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxTotalCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static InstructionDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InstructionDefinition>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstructionType
    {
        Undefined = 0,
    
        AirFiltersCheck = 1,
    
        BearingsCheck = 2,
    
        BearingsGrease = 3,
    
        BeltAdjust = 4,
    
        BeltFasten = 5,
    
        BeltSubstitute = 6,
    
        CableChainCheck = 7,
    
        CablesCheck = 8,
    
        ChainAdjust = 9,
    
        ChainGrease = 10,
    
        ChainSubstitute = 11,
    
        ContactorsSubstitute = 12,
    
        ElectricalComponentsCheck = 13,
    
        FirstCellCheck = 14,
    
        GuidesCheck = 15,
    
        GuidesSubstitute = 16,
    
        LampsCheck = 17,
    
        LinkCheck = 18,
    
        LinksGrease = 19,
    
        LinkSubstitute = 20,
    
        MicroSwitchesCheck = 21,
    
        MicroSwitchesMount = 22,
    
        MicroSwitchesSubstitute = 23,
    
        MotorChainAdjust = 24,
    
        MotorChainGrease = 25,
    
        MotorChainSubstitute = 26,
    
        MotorGearOil = 27,
    
        MotorGearSubstitute = 28,
    
        OpticalSensorsClean = 29,
    
        OpticalSensorsMount = 30,
    
        PinPawlFastenersCheck = 31,
    
        PinPawlFastenersSubstitute = 32,
    
        PlasticCamsCheck = 33,
    
        RandomCellCheck = 34,
    
        SensorsClean = 35,
    
        SensorCheck = 36,
    
        SensorsMount = 37,
    
        ShaftCheck = 38,
    
        SupportsCheck = 39,
    
        WheelsCheck = 40,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MachineServiceStatus
    {
        Undefined = 0,
    
        Completed = 67,
    
        Expiring = 71,
    
        Valid = 86,
    
        Expired = 88,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SetupProceduresSet : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Bay1CarouselCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure Bay1CarouselCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay1ExternalCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure Bay1ExternalCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay1FirstLoadingUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure Bay1FirstLoadingUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay1FullTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure Bay1FullTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay1HeightCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure Bay1HeightCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay1Laser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure Bay1Laser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay1ProfileCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BayProfileCheckProcedure Bay1ProfileCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay1ShutterTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure Bay1ShutterTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay2CarouselCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure Bay2CarouselCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay2ExternalCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure Bay2ExternalCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay2FirstLoadingUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure Bay2FirstLoadingUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay2FullTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure Bay2FullTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay2HeightCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure Bay2HeightCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay2Laser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure Bay2Laser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay2ProfileCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BayProfileCheckProcedure Bay2ProfileCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay2ShutterTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure Bay2ShutterTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay3CarouselCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure Bay3CarouselCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay3ExternalCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure Bay3ExternalCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay3FirstLoadingUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure Bay3FirstLoadingUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay3FullTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure Bay3FullTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay3HeightCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure Bay3HeightCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay3Laser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure Bay3Laser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay3ProfileCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BayProfileCheckProcedure Bay3ProfileCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay3ShutterTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure Bay3ShutterTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BeltBurnishingTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure BeltBurnishingTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CellPanelsCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PositioningProcedure CellPanelsCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CellsHeightCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PositioningProcedure CellsHeightCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DepositAndPickUpTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure DepositAndPickUpTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HorizontalChainCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure HorizontalChainCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadFirstDrawerTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PositioningProcedure LoadFirstDrawerTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShutterHeightCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure ShutterHeightCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalOffsetCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OffsetCalibrationProcedure VerticalOffsetCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalOriginCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure VerticalOriginCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalResolutionCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VerticalResolutionCalibrationProcedure VerticalResolutionCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WeightMeasurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure WeightMeasurement { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static SetupProceduresSet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetupProceduresSet>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BayProfileCheckProcedure : SetupProcedure
    {
        [Newtonsoft.Json.JsonProperty("ProfileCorrectDistance", Required = Newtonsoft.Json.Required.Always)]
        public double ProfileCorrectDistance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProfileDegrees", Required = Newtonsoft.Json.Required.Always)]
        public double ProfileDegrees { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProfileTotalDistance", Required = Newtonsoft.Json.Required.Always)]
        public double ProfileTotalDistance { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static BayProfileCheckProcedure FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BayProfileCheckProcedure>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OffsetCalibrationProcedure : PositioningProcedure
    {
        [Newtonsoft.Json.JsonProperty("ReferenceCellId", Required = Newtonsoft.Json.Required.Always)]
        public int ReferenceCellId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static OffsetCalibrationProcedure FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OffsetCalibrationProcedure>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VerticalResolutionCalibrationProcedure : SetupProcedure
    {
        [Newtonsoft.Json.JsonProperty("FinalPosition", Required = Newtonsoft.Json.Required.Always)]
        public double FinalPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InitialPosition", Required = Newtonsoft.Json.Required.Always)]
        public double InitialPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StartPosition", Required = Newtonsoft.Json.Required.Always)]
        public double StartPosition { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static VerticalResolutionCalibrationProcedure FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VerticalResolutionCalibrationProcedure>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WmsSettings : DataModel
    {
        [Newtonsoft.Json.JsonProperty("IsConnected", Required = Newtonsoft.Json.Required.Always)]
        public bool IsConnected { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool IsEnabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsTimeSyncEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool IsTimeSyncEnabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastWmsTimeSync", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastWmsTimeSync { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ServiceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri ServiceUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SocketLinkIsEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool SocketLinkIsEnabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SocketLinkPolling", Required = Newtonsoft.Json.Required.Always)]
        public int SocketLinkPolling { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SocketLinkPort", Required = Newtonsoft.Json.Required.Always)]
        public int SocketLinkPort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SocketLinkTimeout", Required = Newtonsoft.Json.Required.Always)]
        public int SocketLinkTimeout { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeSyncIntervalMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public int TimeSyncIntervalMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static WmsSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WmsSettings>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ValueTupleOfIEnumerableOfInverterDeviceInfoAndIEnumerableOfIoDeviceInfo 
    {
        [Newtonsoft.Json.JsonProperty("Item1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<InverterDeviceInfo> Item1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Item2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<IoDeviceInfo> Item2 { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ValueTupleOfIEnumerableOfInverterDeviceInfoAndIEnumerableOfIoDeviceInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ValueTupleOfIEnumerableOfInverterDeviceInfoAndIEnumerableOfIoDeviceInfo>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InverterDeviceInfo : DeviceBase
    {
        [Newtonsoft.Json.JsonProperty("ControlWords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<BitInfo> ControlWords { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DigitalInputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<BitInfo> DigitalInputs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusWords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<BitInfo> StatusWords { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static InverterDeviceInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InverterDeviceInfo>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BitInfo 
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsUsed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsUsed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Always)]
        public bool Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static BitInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BitInfo>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceBase 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static DeviceBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeviceBase>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IoDeviceInfo : DeviceBase
    {
        [Newtonsoft.Json.JsonProperty("Inputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<BitInfo> Inputs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IoStatuses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<BitInfo> IoStatuses { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Outputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<BitInfo> Outputs { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static IoDeviceInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IoDeviceInfo>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InverterParametersData 
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InverterIndex", Required = Newtonsoft.Json.Required.Always)]
        public byte InverterIndex { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsCheckInverterVersion", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCheckInverterVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<object> Parameters { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static InverterParametersData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InverterParametersData>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ElevatorPosition 
    {
        [Newtonsoft.Json.JsonProperty("BayPositionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BayPositionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BayPositionUpper", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BayPositionUpper { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CellId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CellId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Horizontal", Required = Newtonsoft.Json.Required.Always)]
        public double Horizontal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Vertical", Required = Newtonsoft.Json.Required.Always)]
        public double Vertical { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ElevatorPosition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ElevatorPosition>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AxisBounds 
    {
        [Newtonsoft.Json.JsonProperty("Lower", Required = Newtonsoft.Json.Required.Always)]
        public double Lower { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Upper", Required = Newtonsoft.Json.Required.Always)]
        public double Upper { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static AxisBounds FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AxisBounds>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MachineError : DataModel
    {
        [Newtonsoft.Json.JsonProperty("AdditionalText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdditionalText { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BayNumber", Required = Newtonsoft.Json.Required.Always)]
        public BayNumber BayNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Always)]
        public int Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DetailCode", Required = Newtonsoft.Json.Required.Always)]
        public int DetailCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InverterIndex", Required = Newtonsoft.Json.Required.Always)]
        public int InverterIndex { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OccurrenceDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurrenceDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ResolutionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ResolutionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Severity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Severity { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MachineError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MachineError>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorStatisticsSummary 
    {
        [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<ErrorStatisticsDetail> Errors { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReliabilityPercentage", Required = Newtonsoft.Json.Required.Always)]
        public double ReliabilityPercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalErrors", Required = Newtonsoft.Json.Required.Always)]
        public int TotalErrors { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalLoadingUnits", Required = Newtonsoft.Json.Required.Always)]
        public int TotalLoadingUnits { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalLoadingUnitsBetweenErrors", Required = Newtonsoft.Json.Required.Always)]
        public int TotalLoadingUnitsBetweenErrors { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ErrorStatisticsSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorStatisticsSummary>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorStatisticsDetail 
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Always)]
        public int Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RatioTotal", Required = Newtonsoft.Json.Required.Always)]
        public double RatioTotal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Total", Required = Newtonsoft.Json.Required.Always)]
        public int Total { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ErrorStatisticsDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorStatisticsDetail>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ExternalBayMovementDirection
    {
        TowardOperator = 0,
    
        TowardMachine = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MachineIdentity 
    {
        [Newtonsoft.Json.JsonProperty("AreaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AreaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Depth", Required = Newtonsoft.Json.Required.Always)]
        public double Depth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InstallationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InstallationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsOneTonMachine", Required = Newtonsoft.Json.Required.Always)]
        public bool IsOneTonMachine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastServiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastServiceDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadingUnitDepth", Required = Newtonsoft.Json.Required.Always)]
        public double LoadingUnitDepth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadingUnitWidth", Required = Newtonsoft.Json.Required.Always)]
        public double LoadingUnitWidth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxGrossWeight", Required = Newtonsoft.Json.Required.Always)]
        public double MaxGrossWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NextServiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextServiceDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ServiceStatus", Required = Newtonsoft.Json.Required.Always)]
        public MachineServiceStatus ServiceStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TrayCount", Required = Newtonsoft.Json.Required.Always)]
        public int TrayCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public double Width { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MachineIdentity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MachineIdentity>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CompartmentDetails : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("aisleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisleName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allowedItemsCount", Required = Newtonsoft.Json.Required.Always)]
        public int AllowedItemsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("areaName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AreaName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("compartmentStatusDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompartmentStatusDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("compartmentStatusId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CompartmentStatusId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("compartmentTypeId", Required = Newtonsoft.Json.Required.Always)]
        public int CompartmentTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Always)]
        public double Depth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fifoStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FifoStartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasRotation", Required = Newtonsoft.Json.Required.Always)]
        public bool HasRotation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inventoryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InventoryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isItemPairingFixed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsItemPairingFixed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemMeasureUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemMeasureUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastPickDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPickDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastPutDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPutDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loadingUnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoadingUnitCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loadingUnitHasCompartments", Required = Newtonsoft.Json.Required.Always)]
        public bool LoadingUnitHasCompartments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loadingUnitId", Required = Newtonsoft.Json.Required.Always)]
        public int LoadingUnitId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lot { get; set; }
    
        [Newtonsoft.Json.JsonProperty("materialStatusId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaterialStatusId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxCapacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxCapacity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("otherMissionOperationCount", Required = Newtonsoft.Json.Required.Always)]
        public int OtherMissionOperationCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("packageTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PackageTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickMissionOperationCount", Required = Newtonsoft.Json.Required.Always)]
        public int PickMissionOperationCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("putMissionOperationCount", Required = Newtonsoft.Json.Required.Always)]
        public int PutMissionOperationCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistrationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reservedForPick", Required = Newtonsoft.Json.Required.Always)]
        public double ReservedForPick { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reservedToPut", Required = Newtonsoft.Json.Required.Always)]
        public double ReservedToPut { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stock", Required = Newtonsoft.Json.Required.Always)]
        public double Stock { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sub1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sub2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public double Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xPosition", Required = Newtonsoft.Json.Required.Always)]
        public double XPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("yPosition", Required = Newtonsoft.Json.Required.Always)]
        public double YPosition { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static CompartmentDetails FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompartmentDetails>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BaseModelOfInt32 : BasePolicyModel
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static BaseModelOfInt32 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseModelOfInt32>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BasePolicyModel 
    {
        [Newtonsoft.Json.JsonProperty("policies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<Policy> Policies { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static BasePolicyModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BasePolicyModel>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Policy 
    {
        [Newtonsoft.Json.JsonProperty("isAllowed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAllowed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public PolicyType Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Policy FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Policy>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PolicyType
    {
        NotSpecified = 0,
    
        Operation = 1,
    
        Property = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LoadingUnitSpaceStatistics 
    {
        [Newtonsoft.Json.JsonProperty("AreaFillPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AreaFillPercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CompartmentsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CompartmentsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MissionsCount", Required = Newtonsoft.Json.Required.Always)]
        public int MissionsCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static LoadingUnitSpaceStatistics FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoadingUnitSpaceStatistics>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LoadingUnitWeightStatistics 
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CompartmentsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CompartmentsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GrossWeight", Required = Newtonsoft.Json.Required.Always)]
        public double GrossWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public double Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxNetWeight", Required = Newtonsoft.Json.Required.Always)]
        public double MaxNetWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxWeightPercentage", Required = Newtonsoft.Json.Required.Always)]
        public double MaxWeightPercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Tare", Required = Newtonsoft.Json.Required.Always)]
        public double Tare { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static LoadingUnitWeightStatistics FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoadingUnitWeightStatistics>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LoadingUnitDetails : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("abcClassDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AbcClassDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("abcClassId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AbcClassId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aisleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AisleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("areaFillRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AreaFillRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("areaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AreaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("areaName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AreaName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cellId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CellId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cellPositionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CellPositionDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cellPositionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CellPositionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cellSide", Required = Newtonsoft.Json.Required.Always)]
        public Side CellSide { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("compartmentsCount", Required = Newtonsoft.Json.Required.Always)]
        public int CompartmentsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Always)]
        public double Depth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emptyWeight", Required = Newtonsoft.Json.Required.Always)]
        public double EmptyWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("handlingParametersCorrection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HandlingParametersCorrection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public double Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inventoryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InventoryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isCellPairingFixed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCellPairingFixed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastHandlingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastHandlingDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastModificationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastPickDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPickDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastPutDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPutDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loadingUnitStatusDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoadingUnitStatusDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loadingUnitStatusId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoadingUnitStatusId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loadingUnitTypeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoadingUnitTypeDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loadingUnitTypeHasCompartments", Required = Newtonsoft.Json.Required.Always)]
        public bool LoadingUnitTypeHasCompartments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loadingUnitTypeId", Required = Newtonsoft.Json.Required.Always)]
        public int LoadingUnitTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxNetWeight", Required = Newtonsoft.Json.Required.Always)]
        public int MaxNetWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("missionsCount", Required = Newtonsoft.Json.Required.Always)]
        public int MissionsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Always)]
        public ReferenceType ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        public int Weight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public double Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("machineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MachineId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static LoadingUnitDetails FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoadingUnitDetails>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Side
    {
        NotSpecified = 0,
    
        Back = 66,
    
        Front = 70,
    
        Left = 76,
    
        Right = 82,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ReferenceType
    {
        NotSpecified = 0,
    
        MonoReference = 77,
    
        PluriReference = 80,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SetupStatusCapabilities 
    {
        [Newtonsoft.Json.JsonProperty("AllLoadingUnits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus AllLoadingUnits { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaySetupStatus Bay1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaySetupStatus Bay2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaySetupStatus Bay3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BeltBurnishing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus BeltBurnishing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CellPanelsCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus CellPanelsCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CellsHeightCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus CellsHeightCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CompletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DepositAndPickUpTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus DepositAndPickUpTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HorizontalChainCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus HorizontalChainCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HorizontalHoming", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus HorizontalHoming { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsComplete", Required = Newtonsoft.Json.Required.Always)]
        public bool IsComplete { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadFirstDrawerTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus LoadFirstDrawerTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalOffsetCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus VerticalOffsetCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalOriginCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus VerticalOriginCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalResolutionCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus VerticalResolutionCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WeightMeasurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus WeightMeasurement { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FullTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus FullTest { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static SetupStatusCapabilities FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetupStatusCapabilities>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SetupStepStatus 
    {
        [Newtonsoft.Json.JsonProperty("CanBePerformed", Required = Newtonsoft.Json.Required.Always)]
        public bool CanBePerformed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool InProgress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsBypassed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsBypassed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsCompleted", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCompleted { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static SetupStepStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetupStepStatus>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BaySetupStatus 
    {
        [Newtonsoft.Json.JsonProperty("CarouselCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus CarouselCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Check", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus Check { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalBayCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus ExternalBayCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsAllTestCompleted", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAllTestCompleted { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Laser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus Laser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus Profile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Shutter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus Shutter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FullTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus FullTest { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static BaySetupStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaySetupStatus>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HomingProcedureParameters 
    {
        [Newtonsoft.Json.JsonProperty("IsCompleted", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCompleted { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LowerBound", Required = Newtonsoft.Json.Required.Always)]
        public double LowerBound { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Offset", Required = Newtonsoft.Json.Required.Always)]
        public double Offset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Resolution", Required = Newtonsoft.Json.Required.Always)]
        public double Resolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UpperBound", Required = Newtonsoft.Json.Required.Always)]
        public double UpperBound { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static HomingProcedureParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HomingProcedureParameters>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MissionInfo : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("areaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AreaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("areaName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AreaName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bayDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BayDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bayId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BayId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastModificationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loadingUnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoadingUnitCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loadingUnitId", Required = Newtonsoft.Json.Required.Always)]
        public int LoadingUnitId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<MissionOperationInfo> Operations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public MissionStatus2 Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MissionInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MissionInfo>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MissionOperationInfo : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("compartmentDepth", Required = Newtonsoft.Json.Required.Always)]
        public double CompartmentDepth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("compartmentId", Required = Newtonsoft.Json.Required.Always)]
        public int CompartmentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("compartmentWidth", Required = Newtonsoft.Json.Required.Always)]
        public double CompartmentWidth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dispatchedQuantity", Required = Newtonsoft.Json.Required.Always)]
        public double DispatchedQuantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemImage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemListCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemListDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemListId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListRowCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemListRowCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListShipmentUnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemListShipmentUnitCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListShipmentUnitDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemListShipmentUnitDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemMeasureUnitDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemMeasureUnitDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemNotes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemProductionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ItemProductionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastModificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lot { get; set; }
    
        [Newtonsoft.Json.JsonProperty("materialStatusDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaterialStatusDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("missionId", Required = Newtonsoft.Json.Required.Always)]
        public int MissionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("packageTypeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackageTypeDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistrationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestedQuantity", Required = Newtonsoft.Json.Required.Always)]
        public double RequestedQuantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public MissionOperationStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sub1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sub2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public MissionOperationType Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MissionOperationInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MissionOperationInfo>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MissionOperationStatus
    {
        NotSpecified = 0,
    
        Completed = 67,
    
        Error = 69,
    
        Incomplete = 73,
    
        New = 78,
    
        Executing = 88,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MissionOperationType
    {
        NotSpecified = 0,
    
        Bypass = 66,
    
        LoadingUnitCheck = 67,
    
        Inventory = 73,
    
        Reorder = 79,
    
        Pick = 80,
    
        Replace = 82,
    
        Put = 84,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MissionStatus2
    {
        NotSpecified = 0,
    
        Completed = 67,
    
        Error = 69,
    
        Incomplete = 73,
    
        New = 78,
    
        Executing = 88,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MissionWithLoadingUnitDetails : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("aisleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisleName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bayDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BayDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bayId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BayId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loadingUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoadingUnitMissionInfo LoadingUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<MissionOperationInfo> Operations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public MissionStatus2 Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MissionWithLoadingUnitDetails FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MissionWithLoadingUnitDetails>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LoadingUnitMissionInfo 
    {
        [Newtonsoft.Json.JsonProperty("compartments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<CompartmentMissionInfo> Compartments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Always)]
        public double Depth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public double Width { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static LoadingUnitMissionInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoadingUnitMissionInfo>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CompartmentMissionInfo 
    {
        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Depth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxCapacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxCapacity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stock", Required = Newtonsoft.Json.Required.Always)]
        public double Stock { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? XPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("yPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? YPosition { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static CompartmentMissionInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompartmentMissionInfo>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MachineMode
    {
        NotSpecified = 0,
    
        Automatic = 1,
    
        Manual = 2,
    
        LoadUnitOperations = 3,
    
        Test = 4,
    
        Compact = 5,
    
        FullTest = 6,
    
        FirstTest = 7,
    
        SwitchingToAutomatic = 8,
    
        SwitchingToManual = 9,
    
        SwitchingToLoadUnitOperations = 10,
    
        SwitchingToCompact = 11,
    
        SwitchingToFullTest = 12,
    
        SwitchingToFirstTest = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MachinePowerState
    {
        NotSpecified = 0,
    
        Unpowered = 1,
    
        PoweringUp = 2,
    
        Powered = 3,
    
        PoweringDown = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShutterMovementDirection
    {
        NotSpecified = 0,
    
        Up = 1,
    
        Down = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserClaims 
    {
        [Newtonsoft.Json.JsonProperty("AccessLevel", Required = Newtonsoft.Json.Required.Always)]
        public UserAccessLevel AccessLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static UserClaims FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserClaims>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UserAccessLevel
    {
        NoAccess = 0,
    
        Operator = 1,
    
        Installer = 2,
    
        Support = 3,
    
        Admin = 99,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class User : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Login { get; set; }
    
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Password { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static User FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ItemList : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("completedRowsCount", Required = Newtonsoft.Json.Required.Always)]
        public int CompletedRowsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListRowsCount", Required = Newtonsoft.Json.Required.Always)]
        public int ItemListRowsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListType", Required = Newtonsoft.Json.Required.Always)]
        public ItemListType ItemListType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("machines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<Machine2> Machines { get; set; }
    
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentUnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentUnitCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentUnitDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentUnitDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public ItemListStatus Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ItemList FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemList>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ItemListType
    {
        NotSpecified = 0,
    
        Inventory = 73,
    
        Pick = 80,
    
        Put = 85,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Machine2 : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("aisleId", Required = Newtonsoft.Json.Required.Always)]
        public int AisleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aisleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisleName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("areaName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AreaName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("automaticTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AutomaticTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("buildDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? BuildDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cradlesCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CradlesCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerCity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerCountry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("errorTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ErrorTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("areaFillRate", Required = Newtonsoft.Json.Required.Always)]
        public int AreaFillRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("grossMaxWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GrossMaxWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("grossWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GrossWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inputLoadingUnitsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? InputLoadingUnitsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("installationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InstallationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isOnLine", Required = Newtonsoft.Json.Required.Always)]
        public bool IsOnLine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastPowerOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPowerOn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastServiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastServiceDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Latitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loadingUnitsPerCradle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LoadingUnitsPerCradle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Longitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("machineTypeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MachineTypeDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("machineTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MachineTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maintenanceStatus", Required = Newtonsoft.Json.Required.Always)]
        public MaintenanceStatus MaintenanceStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("manualTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ManualTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("missionTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MissionTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model { get; set; }
    
        [Newtonsoft.Json.JsonProperty("movedLoadingUnitsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MovedLoadingUnitsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("netMaxWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NetMaxWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("netWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NetWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nextServiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextServiceDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nickname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nickname { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputLoadingUnitsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? OutputLoadingUnitsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("powerOnTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? PowerOnTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistrationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public MachineStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("testDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TestDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalMaxWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TotalMaxWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weightFillRate", Required = Newtonsoft.Json.Required.Always)]
        public int WeightFillRate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Machine2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Machine2>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MaintenanceStatus
    {
        NotSpecified = 0,
    
        Expiring = 71,
    
        Valid = 86,
    
        Expired = 88,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MachineStatus
    {
        NotSpecified = 0,
    
        Automatic = 65,
    
        Error = 69,
    
        Manual = 77,
    
        Offline = 79,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ItemListStatus
    {
        NotSpecified = 0,
    
        Completed = 67,
    
        Error = 69,
    
        Incomplete = 73,
    
        New = 78,
    
        Ready = 82,
    
        Suspended = 83,
    
        Waiting = 87,
    
        Executing = 88,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProductInMachine 
    {
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Item Item { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lot { get; set; }
    
        [Newtonsoft.Json.JsonProperty("machines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<MachineItemInfo> Machines { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ProductInMachine FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductInMachine>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Item : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("abcClassDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AbcClassDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("abcClassId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AbcClassId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("averageWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AverageWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("compartmentsCount", Required = Newtonsoft.Json.Required.Always)]
        public int CompartmentsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fifoTimePick", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FifoTimePick { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fifoTimePut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FifoTimePut { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasAssociatedAreas", Required = Newtonsoft.Json.Required.Always)]
        public bool HasAssociatedAreas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasCompartmentTypes", Required = Newtonsoft.Json.Required.Always)]
        public bool HasCompartmentTypes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inventoryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InventoryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inventoryTolerance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InventoryTolerance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemCategoryDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemCategoryDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemCategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemCategoryId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListRowsCount", Required = Newtonsoft.Json.Required.Always)]
        public int ItemListRowsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastModificationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastPickDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPickDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastPutDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPutDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Depth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("machines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<MachinePick> Machines { get; set; }
    
        [Newtonsoft.Json.JsonProperty("managementType", Required = Newtonsoft.Json.Required.Always)]
        public ItemManagementType ManagementType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("measureUnitDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MeasureUnitDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("measureUnitId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MeasureUnitId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("missionOperationsCount", Required = Newtonsoft.Json.Required.Always)]
        public int MissionOperationsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickTolerance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PickTolerance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("putTolerance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PutTolerance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reorderPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReorderPoint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reorderQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReorderQuantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schedulerRequestsCount", Required = Newtonsoft.Json.Required.Always)]
        public int SchedulerRequestsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalAvailable", Required = Newtonsoft.Json.Required.Always)]
        public double TotalAvailable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalReservedForPick", Required = Newtonsoft.Json.Required.Always)]
        public double TotalReservedForPick { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalReservedToPut", Required = Newtonsoft.Json.Required.Always)]
        public double TotalReservedToPut { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalStock", Required = Newtonsoft.Json.Required.Always)]
        public double TotalStock { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Item FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Item>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MachinePick : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("availableQuantityItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AvailableQuantityItem { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nickname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nickname { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MachinePick FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MachinePick>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ItemManagementType
    {
        NotSpecified = 0,
    
        FIFO = 70,
    
        Volume = 86,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MachineItemInfo 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemAvailableQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? ItemAvailableQuantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nickname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nickname { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MachineItemInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MachineItemInfo>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BarcodeRule : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contextName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContextName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nextRuleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NextRuleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("restartOnMismatch", Required = Newtonsoft.Json.Required.Always)]
        public bool RestartOnMismatch { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static BarcodeRule FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BarcodeRule>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ItemListDetails : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("areaName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AreaName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerOrderCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerOrderCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerOrderDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerOrderDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("executionEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExecutionEndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstExecutionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FirstExecutionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListRowsCount", Required = Newtonsoft.Json.Required.Always)]
        public int ItemListRowsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListType", Required = Newtonsoft.Json.Required.Always)]
        public ItemListType ItemListType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListTypeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemListTypeDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("job", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Job { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastModificationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentUnitAssociated", Required = Newtonsoft.Json.Required.Always)]
        public bool ShipmentUnitAssociated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentUnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentUnitCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentUnitDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentUnitDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public ItemListStatus Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ItemListDetails FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemListDetails>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ItemListRow : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dispatchedQuantity", Required = Newtonsoft.Json.Required.Always)]
        public double DispatchedQuantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListId", Required = Newtonsoft.Json.Required.Always)]
        public int ItemListId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemUnitMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemUnitMeasure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("machines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<Machine2> Machines { get; set; }
    
        [Newtonsoft.Json.JsonProperty("materialStatusDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaterialStatusDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestedQuantity", Required = Newtonsoft.Json.Required.Always)]
        public double RequestedQuantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public ItemListRowStatus Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ItemListRow FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemListRow>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ItemListRowStatus
    {
        NotSpecified = 0,
    
        Completed = 67,
    
        Error = 69,
    
        Incomplete = 73,
    
        New = 78,
    
        Ready = 82,
    
        Suspended = 83,
    
        Waiting = 87,
    
        Executing = 88,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ItemDetails : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("abcClassId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AbcClassId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("averageWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AverageWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("compartmentsCount", Required = Newtonsoft.Json.Required.Always)]
        public int CompartmentsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fifoTimePick", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FifoTimePick { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fifoTimePut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FifoTimePut { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasAssociatedAreas", Required = Newtonsoft.Json.Required.Always)]
        public bool HasAssociatedAreas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasCompartmentTypes", Required = Newtonsoft.Json.Required.Always)]
        public bool HasCompartmentTypes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inventoryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InventoryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inventoryTolerance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InventoryTolerance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemCategoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemCategoryId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListRowsCount", Required = Newtonsoft.Json.Required.Always)]
        public int ItemListRowsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastModificationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastPickDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPickDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastPutDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPutDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Depth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("managementType", Required = Newtonsoft.Json.Required.Always)]
        public ItemManagementType ManagementType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("measureUnitDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MeasureUnitDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("measureUnitId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MeasureUnitId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("missionOperationsCount", Required = Newtonsoft.Json.Required.Always)]
        public int MissionOperationsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickTolerance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PickTolerance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("putTolerance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PutTolerance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reorderPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReorderPoint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reorderQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReorderQuantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schedulerRequestsCount", Required = Newtonsoft.Json.Required.Always)]
        public int SchedulerRequestsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalAvailable", Required = Newtonsoft.Json.Required.Always)]
        public double TotalAvailable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uploadImageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] UploadImageData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uploadImageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UploadImageName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ItemDetails FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemDetails>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Compartment : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("aisleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AisleName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("areaName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AreaName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("compartmentStatusDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompartmentStatusDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Always)]
        public double Depth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasRotation", Required = Newtonsoft.Json.Required.Always)]
        public bool HasRotation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isItemPairingFixed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsItemPairingFixed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemMeasureUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemMeasureUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loadingUnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoadingUnitCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loadingUnitId", Required = Newtonsoft.Json.Required.Always)]
        public int LoadingUnitId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lot { get; set; }
    
        [Newtonsoft.Json.JsonProperty("materialStatusDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaterialStatusDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stock", Required = Newtonsoft.Json.Required.Always)]
        public double Stock { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sub1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sub2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public double Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xPosition", Required = Newtonsoft.Json.Required.Always)]
        public double XPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("yPosition", Required = Newtonsoft.Json.Required.Always)]
        public double YPosition { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Compartment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Compartment>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ItemOptions 
    {
        [Newtonsoft.Json.JsonProperty("areaId", Required = Newtonsoft.Json.Required.Always)]
        public int AreaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bayId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BayId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lot { get; set; }
    
        [Newtonsoft.Json.JsonProperty("machineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MachineId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("materialStatusId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaterialStatusId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("packageTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PackageTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reasonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReasonId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reasonNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonNotes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistrationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestedQuantity", Required = Newtonsoft.Json.Required.Always)]
        public double RequestedQuantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("runImmediately", Required = Newtonsoft.Json.Required.Always)]
        public bool RunImmediately { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sub1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sub2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub2 { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ItemOptions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemOptions>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MissionOperation : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("compartmentId", Required = Newtonsoft.Json.Required.Always)]
        public int CompartmentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dispatchedQuantity", Required = Newtonsoft.Json.Required.Always)]
        public double DispatchedQuantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ItemHeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Always)]
        public int ItemId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemListCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemListDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemListId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListRowCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemListRowCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListRowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemListRowId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListShipmentUnitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemListShipmentUnitCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemListShipmentUnitDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemListShipmentUnitDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemNotes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemProductionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ItemProductionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastModificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lot { get; set; }
    
        [Newtonsoft.Json.JsonProperty("materialStatusId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaterialStatusId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("missionId", Required = Newtonsoft.Json.Required.Always)]
        public int MissionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("packageTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PackageTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("packingListCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackingListCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("packingListDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackingListDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quantityRemainingToDispatch", Required = Newtonsoft.Json.Required.Always)]
        public double QuantityRemainingToDispatch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistrationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requestedQuantity", Required = Newtonsoft.Json.Required.Always)]
        public double RequestedQuantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requiresDestinationCode", Required = Newtonsoft.Json.Required.Always)]
        public bool RequiresDestinationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public MissionOperationStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sub1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sub2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public MissionOperationType Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MissionOperation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MissionOperation>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OperationReason : BaseModelOfInt32
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static OperationReason FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OperationReason>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client; 
        private System.IDisposable _response; 

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode; 
            Headers = headers; 
            Stream = stream; 
            _client = client; 
            _response = response;
        }

        public void Dispose() 
        {
            if (Stream != null)
                Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MasWebApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public MasWebApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MasWebApiException<TResult> : MasWebApiException
    {
        public TResult Result { get; private set; }

        public MasWebApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108