//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using System.Net;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Ferretto.VW.MAS.AutomationService.Contracts
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineBaysWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> ActivateAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> ActivateAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> DeactivateAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> DeactivateAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FindZeroAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FindZeroAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bay>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bay>> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> GetByNumberAsync(BayNumber bayNumber);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> GetByNumberAsync(BayNumber bayNumber, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PositioningProcedure> GetHeightCheckParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PositioningProcedure> GetHeightCheckParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> GetLightAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> GetLightAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HomingAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HomingAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveLoadUnitAsync(int loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveLoadUnitAsync(int loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetLightAsync(bool enable);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetLightAsync(bool enable, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> UpdateHeightAsync(int position, double height);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Bay> UpdateHeightAsync(int position, double height, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineCarouselWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveAsync(VerticalMovementDirection direction, MovementCategory movementCategory);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveAsync(VerticalMovementDirection direction, MovementCategory movementCategory, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FindZeroAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FindZeroAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetPositionAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetPositionAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HomingAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task HomingAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAsync(VerticalMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAsync(VerticalMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAssistedAsync(VerticalMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAssistedAsync(VerticalMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveManualAsync(VerticalMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveManualAsync(VerticalMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineCellPanelsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<CellPanel>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<CellPanel>> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PositioningProcedure> GetProcedureParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PositioningProcedure> GetProcedureParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CellPanel> UpdateHeightAsync(int cellPanelId, double heightDifference);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CellPanel> UpdateHeightAsync(int cellPanelId, double heightDifference, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineCellsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Cell>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Cell>> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PositioningProcedure> GetHeightCheckProcedureParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PositioningProcedure> GetHeightCheckProcedureParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CellStatisticsSummary> GetStatisticsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CellStatisticsSummary> GetStatisticsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Cell> UpdateHeightAsync(int id, double height);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Cell> UpdateHeightAsync(int id, double height, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Cell>> UpdatesHeightAsync(int fromid, int toid, WarehouseSide side, double height);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Cell>> UpdatesHeightAsync(int fromid, int toid, WarehouseSide side, double height, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineCompactingWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompactingAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompactingAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineConfigurationWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VertimagConfiguration> GetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VertimagConfiguration> GetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetAsync(VertimagConfiguration vertimagConfiguration);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetAsync(VertimagConfiguration vertimagConfiguration, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImportAsync(VertimagConfiguration vertimagConfiguration);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImportAsync(VertimagConfiguration vertimagConfiguration, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineDevicesWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ValueTupleOfIEnumerableOfInverterDeviceInfoAndIEnumerableOfIoDeviceInfo> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ValueTupleOfIEnumerableOfInverterDeviceInfoAndIEnumerableOfIoDeviceInfo> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineElevatorWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanExtractFromBayAsync(int bayPositionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanExtractFromBayAsync(int bayPositionId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanLoadFromBayAsync(int bayPositionId, bool isGuided);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanLoadFromBayAsync(int bayPositionId, bool isGuided, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanLoadFromCellAsync(int cellId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanLoadFromCellAsync(int cellId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveToBayPositionAsync(int bayPositionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveToBayPositionAsync(int bayPositionId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveToCellAsync(int cellId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanMoveToCellAsync(int cellId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanUnloadToBayAsync(int bayPositionId, bool isGuided);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanUnloadToBayAsync(int bayPositionId, bool isGuided, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanUnloadToCellAsync(int cellId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActionPolicy> CanUnloadToCellAsync(int cellId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FindZeroAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FindZeroAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetHorizontalAssistedMovementsParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetHorizontalAssistedMovementsParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetHorizontalManualMovementsParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetHorizontalManualMovementsParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LoadingUnit> GetLoadingUnitOnBoardAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LoadingUnit> GetLoadingUnitOnBoardAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorPosition> GetPositionAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorPosition> GetPositionAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetVerticalAssistedMovementsParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetVerticalAssistedMovementsParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AxisBounds> GetVerticalBoundsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AxisBounds> GetVerticalBoundsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetVerticalManualMovementsParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ElevatorAxisManualParameters> GetVerticalManualMovementsParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetVerticalOffsetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetVerticalOffsetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetVerticalResolutionAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetVerticalResolutionAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateVerticalResolutionAsync(double newResolution);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UpdateVerticalResolutionAsync(double newResolution, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LoadFromBayAsync(int bayPositionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LoadFromBayAsync(int bayPositionId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LoadFromCellAsync(int cellId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LoadFromCellAsync(int cellId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveHorizontalManualAsync(HorizontalMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveHorizontalManualAsync(HorizontalMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveManualToVerticalPositionAsync(double targetPosition, bool performWeighting, bool computeElongation);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveManualToVerticalPositionAsync(double targetPosition, bool performWeighting, bool computeElongation, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToBayPositionAsync(int bayPositionId, bool computeElongation, bool performWeighting);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToBayPositionAsync(int bayPositionId, bool computeElongation, bool performWeighting, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToCellAsync(int cellId, bool computeElongation, bool performWeighting);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToCellAsync(int cellId, bool computeElongation, bool performWeighting, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToFreeCellAsync(int loadUnitId, bool computeElongation, bool performWeighting);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToFreeCellAsync(int loadUnitId, bool computeElongation, bool performWeighting, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToVerticalPositionAsync(double targetPosition, bool performWeighting);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToVerticalPositionAsync(double targetPosition, bool performWeighting, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveVerticalManualAsync(VerticalMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveVerticalManualAsync(VerticalMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveVerticalOfDistanceAsync(double distance);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveVerticalOfDistanceAsync(double distance, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SearchHorizontalZeroAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SearchHorizontalZeroAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopWeightCheckAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopWeightCheckAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnloadToBayAsync(int bayPositionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnloadToBayAsync(int bayPositionId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnloadToCellAsync(int cellId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnloadToCellAsync(int cellId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task WeightCheckAsync(int loadingUnitId, double runToTest, double weight);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task WeightCheckAsync(int loadingUnitId, double runToTest, double weight, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineErrorsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> GetCurrentAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> GetCurrentAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ErrorStatisticsSummary> GetStatisticsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ErrorStatisticsSummary> GetStatisticsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> ResolveAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> ResolveAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> ResolveAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> ResolveAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> SetErrorPPCAsync(MachineErrorCode errorCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineError> SetErrorPPCAsync(MachineErrorCode errorCode, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineFullTestWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(System.Collections.Generic.IEnumerable<int> loadunits, int cycle);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(System.Collections.Generic.IEnumerable<int> loadunits, int cycle, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineIdentityWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineIdentity> GetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineIdentity> GetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineStatistics> GetStatisticsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineStatistics> GetStatisticsAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineLoadingUnitsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AbortAsync(int? missionId, BayNumber targetBay);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AbortAsync(int? missionId, BayNumber targetBay, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EjectLoadingUnitAsync(LoadingUnitLocation destination, int loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EjectLoadingUnitAsync(LoadingUnitLocation destination, int loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnit>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnit>> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnitSpaceStatistics>> GetSpaceStatisticsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnitSpaceStatistics>> GetSpaceStatisticsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnitWeightStatistics>> GetWeightStatisticsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LoadingUnitWeightStatistics>> GetWeightStatisticsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InsertLoadingUnitAsync(LoadingUnitLocation source, int? destinationCellId, int loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InsertLoadingUnitAsync(LoadingUnitLocation source, int? destinationCellId, int loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InsertLoadingUnitOnlyDbAsync(int loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InsertLoadingUnitOnlyDbAsync(int loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToBayAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToBayAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PauseAsync(int? missionId, BayNumber targetBay);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PauseAsync(int? missionId, BayNumber targetBay, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveFromBayAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveFromBayAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResumeAsync(int? missionId, BayNumber targetBay);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResumeAsync(int? missionId, BayNumber targetBay, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartMovingLoadingUnitToBayAsync(int loadingUnitId, LoadingUnitLocation destination);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartMovingLoadingUnitToBayAsync(int loadingUnitId, LoadingUnitLocation destination, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartMovingLoadingUnitToCellAsync(int loadingUnitId, int destinationCellId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartMovingLoadingUnitToCellAsync(int loadingUnitId, int destinationCellId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartMovingSourceDestinationAsync(LoadingUnitLocation source, LoadingUnitLocation destination, int? sourceCellId, int? destinationCellId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartMovingSourceDestinationAsync(LoadingUnitLocation source, LoadingUnitLocation destination, int? sourceCellId, int? destinationCellId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(int? missionId, BayNumber targetBay);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(int? missionId, BayNumber targetBay, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineBeltBurnishingProcedureWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(double upperPosition, double lowerPosition, int delayStart);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(double upperPosition, double lowerPosition, int delayStart, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineDepositAndPickupProcedureWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<int> IncreasePerformedCyclesAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<int> IncreasePerformedCyclesAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineSetupStatusWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SetupStatusCapabilities> GetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SetupStatusCapabilities> GetAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineVerticalOffsetProcedureWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CompleteAsync(double newOffset);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CompleteAsync(double newOffset, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OffsetCalibrationProcedure> GetParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OffsetCalibrationProcedure> GetParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveDownAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveDownAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveUpAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveUpAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineVerticalOriginProcedureWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HomingProcedureParameters> GetParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HomingProcedureParameters> GetParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineVerticalResolutionCalibrationProcedureWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetAdjustedResolutionAsync(double measuredDistance, double expectedDistance);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<double> GetAdjustedResolutionAsync(double measuredDistance, double expectedDistance, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VerticalResolutionCalibrationProcedure> GetParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VerticalResolutionCalibrationProcedure> GetParametersAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineWeightAnalysisProcedureWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SetupProcedure> GetParametersAsync(Orientation orientation);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SetupProcedure> GetParametersAsync(Orientation orientation, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(double displacement, double netWeight, int? loadingUnitId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartAsync(double displacement, double netWeight, int? loadingUnitId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineMissionOperationsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> AbortAsync(int id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> AbortAsync(int id, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CancelAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CancelAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CompleteAsync(int id, double quantity, string printerName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CompleteAsync(int id, double quantity, string printerName, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetByBayCountAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> GetByBayCountAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> PartiallyCompleteAsync(int id, double quantity, string printerName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> PartiallyCompleteAsync(int id, double quantity, string printerName, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<FileResponse> ResetMachineAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<FileResponse> ResetMachineAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineMissionsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Mission>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Mission>> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineModeWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineMode> GetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachineMode> GetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetAutomaticAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetAutomaticAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetManualAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SetManualAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachinePowerWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachinePowerState> GetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MachinePowerState> GetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> GetIsHomingAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> GetIsHomingAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PowerOffAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PowerOffAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PowerOnAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PowerOnAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineProfileProcedureWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CalibrationAsync(int bayPositionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CalibrationAsync(int bayPositionId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaveAsync(int bayNumber);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SaveAsync(int bayNumber, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineSensorsWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<bool>> GetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<bool>> GetAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineShuttersWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShutterPosition> GetShutterPositionAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShutterPosition> GetShutterPositionAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetTestParametersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepeatedTestProcedure> GetTestParametersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAsync(ShutterMovementDirection direction);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAsync(ShutterMovementDirection direction, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToAsync(ShutterPosition targetPosition);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToAsync(ShutterPosition targetPosition, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetTestAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetTestAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RunTestAsync(int delayInSeconds, int testCycleCount);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RunTestAsync(int delayInSeconds, int testCycleCount, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineUsersWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserClaims> AuthenticateWithResourceOwnerPasswordAsync(string userName, string password, string supportToken);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserClaims> AuthenticateWithResourceOwnerPasswordAsync(string userName, string password, string supportToken, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetSupportTokenAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetSupportTokenAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMachineUtcTimeWebService
    {
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> CanEnableWmsAutoSyncModeAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> CanEnableWmsAutoSyncModeAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.DateTimeOffset> GetAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.DateTimeOffset> GetAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetAsync(System.DateTimeOffset dateTime);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetAsync(System.DateTimeOffset dateTime, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsWmsAutoSyncEnabledAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsWmsAutoSyncEnabledAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetWmsAutoSyncAsync(bool isEnabled);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="MasWebApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> SetWmsAutoSyncAsync(bool isEnabled, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Bay : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Carousel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Carousel Carousel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChainOffset", Required = Newtonsoft.Json.Required.Always)]
        public double ChainOffset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CurrentMission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mission CurrentMission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CurrentWmsMissionOperationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentWmsMissionOperationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EmptyLoadMovement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MovementParameters EmptyLoadMovement { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FullLoadMovement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MovementParameters FullLoadMovement { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Inverter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Inverter Inverter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IoDevice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IoDevice IoDevice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsActive", Required = Newtonsoft.Json.Required.Always)]
        public bool IsActive { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsDouble", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDouble { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsExternal", Required = Newtonsoft.Json.Required.Always)]
        public bool IsExternal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Laser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Laser Laser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BayNumber Number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Operation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BayOperation Operation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Positions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<BayPosition> Positions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Resolution", Required = Newtonsoft.Json.Required.Always)]
        public double Resolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Shutter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Shutter Shutter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Side", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WarehouseSide Side { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BayStatus Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Bay FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Bay>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Carousel : DataModel
    {
        [Newtonsoft.Json.JsonProperty("AssistedMovements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CarouselManualParameters AssistedMovements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ElevatorDistance", Required = Newtonsoft.Json.Required.Always)]
        public double ElevatorDistance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HomingCreepSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double HomingCreepSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HomingFastSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double HomingFastSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastIdealPosition", Required = Newtonsoft.Json.Required.Always)]
        public double LastIdealPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManualMovements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CarouselManualParameters ManualMovements { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Carousel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Carousel>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CarouselManualParameters : DataModel
    {
        [Newtonsoft.Json.JsonProperty("FeedRate", Required = Newtonsoft.Json.Required.Always)]
        public double FeedRate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static CarouselManualParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CarouselManualParameters>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataModel 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static DataModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataModel>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Mission : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommandAction Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BayNotifications", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MissionBayNotifications BayNotifications { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CloseShutterBayNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BayNumber CloseShutterBayNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DestinationCellId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DestinationCellId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeviceNotifications", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MissionDeviceNotifications DeviceNotifications { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Direction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HorizontalMovementDirection Direction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EjectLoadUnit", Required = Newtonsoft.Json.Required.Always)]
        public bool EjectLoadUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ErrorMovements", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MissionErrorMovements ErrorMovements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitCellSourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LoadUnitCellSourceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitDestination", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LoadingUnitLocation LoadUnitDestination { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitId", Required = Newtonsoft.Json.Required.Always)]
        public int LoadUnitId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitSource", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LoadingUnitLocation LoadUnitSource { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MissionType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MissionType MissionType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NeedHomingAxis", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Axis NeedHomingAxis { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NeedMovingBackward", Required = Newtonsoft.Json.Required.Always)]
        public bool NeedMovingBackward { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OpenShutterPosition", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShutterPosition OpenShutterPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RestoreConditions", Required = Newtonsoft.Json.Required.Always)]
        public bool RestoreConditions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RestoreStep", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MissionStep RestoreStep { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MissionStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Step", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MissionStep Step { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StopReason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StopRequestReason StopReason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetBay", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BayNumber TargetBay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WmsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WmsId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Mission FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mission>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CommandAction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Start")]
        Start = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Activate")]
        Activate = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pause")]
        Pause = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Resume")]
        Resume = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Abort")]
        Abort = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Test")]
        Test = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stop")]
        Stop = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    [System.Flags]
    public enum MissionBayNotifications
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BayOne")]
        BayOne = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BayTwo")]
        BayTwo = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BayThree")]
        BayThree = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElevatorBay")]
        ElevatorBay = 16,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BayNumber
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BayOne")]
        BayOne = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BayTwo")]
        BayTwo = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BayThree")]
        BayThree = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElevatorBay")]
        ElevatorBay = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    [System.Flags]
    public enum MissionDeviceNotifications
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Positioning")]
        Positioning = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Shutter")]
        Shutter = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Homing")]
        Homing = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum HorizontalMovementDirection
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NotSpecified")]
        NotSpecified = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Forwards")]
        Forwards = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Backwards")]
        Backwards = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    [System.Flags]
    public enum MissionErrorMovements
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MoveForward")]
        MoveForward = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MoveBackward")]
        MoveBackward = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MoveShutterOpen")]
        MoveShutterOpen = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MoveShutterClosed")]
        MoveShutterClosed = 16,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LoadingUnitLocation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NoLocation")]
        NoLocation = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InternalBay1Up")]
        InternalBay1Up = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InternalBay1Down")]
        InternalBay1Down = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InternalBay2Up")]
        InternalBay2Up = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InternalBay2Down")]
        InternalBay2Down = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InternalBay3Up")]
        InternalBay3Up = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InternalBay3Down")]
        InternalBay3Down = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExternalBay1Up")]
        ExternalBay1Up = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExternalBay1Down")]
        ExternalBay1Down = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExternalBay2Up")]
        ExternalBay2Up = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExternalBay2Down")]
        ExternalBay2Down = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExternalBay3Up")]
        ExternalBay3Up = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExternalBay3Down")]
        ExternalBay3Down = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CarouselBay1Up")]
        CarouselBay1Up = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CarouselBay1Down")]
        CarouselBay1Down = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CarouselBay2Up")]
        CarouselBay2Up = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CarouselBay2Down")]
        CarouselBay2Down = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CarouselBay3Up")]
        CarouselBay3Up = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CarouselBay3Down")]
        CarouselBay3Down = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cell")]
        Cell = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnit")]
        LoadUnit = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Elevator")]
        Elevator = 21,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MissionType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NoType")]
        NoType = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WMS")]
        WMS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OUT")]
        OUT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FullTest")]
        FullTest = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Compact")]
        Compact = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Axis
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Horizontal")]
        Horizontal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vertical")]
        Vertical = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HorizontalAndVertical")]
        HorizontalAndVertical = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BayChain")]
        BayChain = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShutterPosition
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NotSpecified")]
        NotSpecified = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Opened")]
        Opened = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Half")]
        Half = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Intermediate")]
        Intermediate = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MissionStep
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NotDefined")]
        NotDefined = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Start")]
        Start = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadElevator")]
        LoadElevator = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ToTarget")]
        ToTarget = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DepositUnit")]
        DepositUnit = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WaitPick")]
        WaitPick = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BayChain")]
        BayChain = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CloseShutter")]
        CloseShutter = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BackToTarget")]
        BackToTarget = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"End")]
        End = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ErrorLoad")]
        ErrorLoad = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ErrorDeposit")]
        ErrorDeposit = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MissionStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Executing")]
        Executing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Waiting")]
        Waiting = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Aborted")]
        Aborted = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Completing")]
        Completing = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StopRequestReason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NoReason")]
        NoReason = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stop")]
        Stop = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Abort")]
        Abort = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RunningStateChanged")]
        RunningStateChanged = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FaultStateChanged")]
        FaultStateChanged = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MovementParameters : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Acceleration", Required = Newtonsoft.Json.Required.Always)]
        public double Acceleration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Deceleration", Required = Newtonsoft.Json.Required.Always)]
        public double Deceleration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Speed", Required = Newtonsoft.Json.Required.Always)]
        public double Speed { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MovementParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MovementParameters>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Inverter : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Index", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InverterIndex Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IpAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IPAddress IpAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TcpPort", Required = Newtonsoft.Json.Required.Always)]
        public int TcpPort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InverterType Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Inverter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Inverter>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InverterIndex
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MainInverter")]
        MainInverter = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Slave1")]
        Slave1 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Slave2")]
        Slave2 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Slave3")]
        Slave3 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Slave4")]
        Slave4 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Slave5")]
        Slave5 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Slave6")]
        Slave6 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Slave7")]
        Slave7 = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AddressFamily
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unspecified")]
        Unspecified = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unix")]
        Unix = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InterNetwork")]
        InterNetwork = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ImpLink")]
        ImpLink = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pup")]
        Pup = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Chaos")]
        Chaos = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NS")]
        Ipx = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NS")]
        NS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Osi")]
        Iso = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Osi")]
        Osi = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ecma")]
        Ecma = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DataKit")]
        DataKit = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ccitt")]
        Ccitt = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sna")]
        Sna = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DecNet")]
        DecNet = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DataLink")]
        DataLink = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lat")]
        Lat = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HyperChannel")]
        HyperChannel = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AppleTalk")]
        AppleTalk = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NetBios")]
        NetBios = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VoiceView")]
        VoiceView = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FireFox")]
        FireFox = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Banyan")]
        Banyan = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Atm")]
        Atm = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InterNetworkV6")]
        InterNetworkV6 = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cluster")]
        Cluster = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ieee12844")]
        Ieee12844 = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Irda")]
        Irda = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NetworkDesigners")]
        NetworkDesigners = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Max")]
        Max = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 30,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InverterType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
        Undefined = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ang")]
        Ang = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Agl")]
        Agl = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Acu")]
        Acu = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IoDevice : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Index", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IoIndex Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IpAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IPAddress IpAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TcpPort", Required = Newtonsoft.Json.Required.Always)]
        public int TcpPort { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static IoDevice FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IoDevice>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IoIndex
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IoDevice1")]
        IoDevice1 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IoDevice2")]
        IoDevice2 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IoDevice3")]
        IoDevice3 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Laser : DataModel
    {
        [Newtonsoft.Json.JsonProperty("BayId", Required = Newtonsoft.Json.Required.Always)]
        public int BayId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IpAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IPAddress IpAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TcpPort", Required = Newtonsoft.Json.Required.Always)]
        public int TcpPort { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Laser FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Laser>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BayOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Idle")]
        Idle = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExecutingMission")]
        ExecutingMission = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BayPosition : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public double Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsUpper", Required = Newtonsoft.Json.Required.Always)]
        public bool IsUpper { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadingUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoadingUnit LoadingUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LoadingUnitLocation Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxDoubleHeight", Required = Newtonsoft.Json.Required.Always)]
        public double MaxDoubleHeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxSingleHeight", Required = Newtonsoft.Json.Required.Always)]
        public double MaxSingleHeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProfileOffset", Required = Newtonsoft.Json.Required.Always)]
        public double ProfileOffset { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static BayPosition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BayPosition>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LoadingUnit : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Cell", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Cell Cell { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CellId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CellId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GrossWeight", Required = Newtonsoft.Json.Required.Always)]
        public double GrossWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public double Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsIntoMachine", Required = Newtonsoft.Json.Required.Always)]
        public bool IsIntoMachine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxNetWeight", Required = Newtonsoft.Json.Required.Always)]
        public double MaxNetWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MissionsCount", Required = Newtonsoft.Json.Required.Always)]
        public int MissionsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NetWeight", Required = Newtonsoft.Json.Required.Always)]
        public double NetWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LoadingUnitStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Tare", Required = Newtonsoft.Json.Required.Always)]
        public double Tare { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static LoadingUnit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoadingUnit>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Cell : DataModel
    {
        [Newtonsoft.Json.JsonProperty("BlockLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BlockLevel BlockLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsFree", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFree { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PanelId", Required = Newtonsoft.Json.Required.Always)]
        public int PanelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Position", Required = Newtonsoft.Json.Required.Always)]
        public double Position { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Side", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WarehouseSide Side { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Cell FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Cell>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BlockLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
        Undefined = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SpaceOnly")]
        SpaceOnly = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Blocked")]
        Blocked = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WarehouseSide
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NotSpecified")]
        NotSpecified = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Front")]
        Front = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Back")]
        Back = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LoadingUnitStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
        Undefined = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InBay")]
        InBay = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OnMovementToLocation")]
        OnMovementToLocation = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OnMovementToBay")]
        OnMovementToBay = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InLocation")]
        InLocation = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Shutter : DataModel
    {
        [Newtonsoft.Json.JsonProperty("AssistedMovements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShutterManualParameters AssistedMovements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Inverter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Inverter Inverter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManualMovements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShutterManualParameters ManualMovements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShutterType Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Shutter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Shutter>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShutterManualParameters : DataModel
    {
        [Newtonsoft.Json.JsonProperty("FeedRate", Required = Newtonsoft.Json.Required.Always)]
        public double FeedRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HighSpeedDurationClose", Required = Newtonsoft.Json.Required.Always)]
        public double HighSpeedDurationClose { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HighSpeedDurationOpen", Required = Newtonsoft.Json.Required.Always)]
        public double HighSpeedDurationOpen { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double MaxSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double MinSpeed { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ShutterManualParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShutterManualParameters>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShutterType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NotSpecified")]
        NotSpecified = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TwoSensors")]
        TwoSensors = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ThreeSensors")]
        ThreeSensors = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BayStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Disconnected")]
        Disconnected = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Idle")]
        Idle = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Busy")]
        Busy = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Errored")]
        Errored = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProblemDetails 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ProblemDetails FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProblemDetails>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PositioningProcedure : SetupProcedure
    {
        [Newtonsoft.Json.JsonProperty("InProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool InProgress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Step", Required = Newtonsoft.Json.Required.Always)]
        public double Step { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static PositioningProcedure FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PositioningProcedure>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SetupProcedure : DataModel
    {
        [Newtonsoft.Json.JsonProperty("FeedRate", Required = Newtonsoft.Json.Required.Always)]
        public double FeedRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsCompleted", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCompleted { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static SetupProcedure FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetupProcedure>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ActionPolicy 
    {
        [Newtonsoft.Json.JsonProperty("IsAllowed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAllowed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReasonType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReasonType ReasonType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ActionPolicy FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActionPolicy>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ReasonType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ElevatorInPosition")]
        ElevatorInPosition = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum VerticalMovementDirection
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Up")]
        Up = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Down")]
        Down = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MovementCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Assisted")]
        Assisted = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Automatic")]
        Automatic = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CellPanel : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Cells", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<Cell> Cells { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsChecked", Required = Newtonsoft.Json.Required.Always)]
        public bool IsChecked { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Side", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WarehouseSide Side { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static CellPanel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CellPanel>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CellStatisticsSummary 
    {
        [Newtonsoft.Json.JsonProperty("CellOccupationPercentage", Required = Newtonsoft.Json.Required.Always)]
        public double CellOccupationPercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CellStatusStatistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<CellStatusStatistics> CellStatusStatistics { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalBackCells", Required = Newtonsoft.Json.Required.Always)]
        public int TotalBackCells { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCells", Required = Newtonsoft.Json.Required.Always)]
        public int TotalCells { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalFrontCells", Required = Newtonsoft.Json.Required.Always)]
        public int TotalFrontCells { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static CellStatisticsSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CellStatisticsSummary>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CellStatusStatistics 
    {
        [Newtonsoft.Json.JsonProperty("IsFree", Required = Newtonsoft.Json.Required.Always)]
        public bool IsFree { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RatioBackCells", Required = Newtonsoft.Json.Required.Always)]
        public double RatioBackCells { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RatioFrontCells", Required = Newtonsoft.Json.Required.Always)]
        public double RatioFrontCells { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalBackCells", Required = Newtonsoft.Json.Required.Always)]
        public int TotalBackCells { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalFrontCells", Required = Newtonsoft.Json.Required.Always)]
        public int TotalFrontCells { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static CellStatusStatistics FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CellStatusStatistics>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VertimagConfiguration 
    {
        [Newtonsoft.Json.JsonProperty("LoadingUnits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<LoadingUnit> LoadingUnits { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Machine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Machine Machine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SetupProcedures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProceduresSet SetupProcedures { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static VertimagConfiguration FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VertimagConfiguration>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Machine : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Bays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<Bay> Bays { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Elevator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Elevator Elevator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public double Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitMaxHeight", Required = Newtonsoft.Json.Required.Always)]
        public double LoadUnitMaxHeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitMaxNetWeight", Required = Newtonsoft.Json.Required.Always)]
        public double LoadUnitMaxNetWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadUnitTare", Required = Newtonsoft.Json.Required.Always)]
        public double LoadUnitTare { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxGrossWeight", Required = Newtonsoft.Json.Required.Always)]
        public double MaxGrossWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Panels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<CellPanel> Panels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Machine FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Machine>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Elevator : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Axes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<ElevatorAxis> Axes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BayPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BayPosition BayPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Cell", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Cell Cell { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadingUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoadingUnit LoadingUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadingUnitId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LoadingUnitId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StructuralProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElevatorStructuralProperties StructuralProperties { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static Elevator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Elevator>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ElevatorAxis : DataModel
    {
        [Newtonsoft.Json.JsonProperty("AssistedMovements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElevatorAxisManualParameters AssistedMovements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BrakeActivatePercent", Required = Newtonsoft.Json.Required.Always)]
        public double BrakeActivatePercent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BrakeReleaseTime", Required = Newtonsoft.Json.Required.Always)]
        public double BrakeReleaseTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChainOffset", Required = Newtonsoft.Json.Required.Always)]
        public double ChainOffset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EmptyLoadMovement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MovementParameters EmptyLoadMovement { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FullLoadMovement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MovementParameters FullLoadMovement { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HomingCreepSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double HomingCreepSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HomingFastSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double HomingFastSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Inverter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Inverter Inverter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastIdealPosition", Required = Newtonsoft.Json.Required.Always)]
        public double LastIdealPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LowerBound", Required = Newtonsoft.Json.Required.Always)]
        public double LowerBound { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManualMovements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ElevatorAxisManualParameters ManualMovements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Offset", Required = Newtonsoft.Json.Required.Always)]
        public double Offset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Orientation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Orientation Orientation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProfileCalibrateLength", Required = Newtonsoft.Json.Required.Always)]
        public double ProfileCalibrateLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProfileCalibratePosition", Required = Newtonsoft.Json.Required.Always)]
        public int ProfileCalibratePosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProfileCalibrateSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double ProfileCalibrateSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Profiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<MovementProfile> Profiles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Resolution", Required = Newtonsoft.Json.Required.Always)]
        public double Resolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCycles", Required = Newtonsoft.Json.Required.Always)]
        public int TotalCycles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UpperBound", Required = Newtonsoft.Json.Required.Always)]
        public double UpperBound { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WeightMeasurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeightMeasurement WeightMeasurement { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ElevatorAxis FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ElevatorAxis>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ElevatorAxisManualParameters : DataModel
    {
        [Newtonsoft.Json.JsonProperty("FeedRate", Required = Newtonsoft.Json.Required.Always)]
        public double FeedRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FeedRateAfterZero", Required = Newtonsoft.Json.Required.Always)]
        public double FeedRateAfterZero { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetDistance", Required = Newtonsoft.Json.Required.Always)]
        public double TargetDistance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetDistanceAfterZero", Required = Newtonsoft.Json.Required.Always)]
        public double TargetDistanceAfterZero { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ElevatorAxisManualParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ElevatorAxisManualParameters>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Orientation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
        Undefined = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Vertical")]
        Vertical = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Horizontal")]
        Horizontal = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MovementProfile : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MovementProfileType Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Steps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<StepMovementParameters> Steps { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalDistance", Required = Newtonsoft.Json.Required.Always)]
        public double TotalDistance { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MovementProfile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MovementProfile>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MovementProfileType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
        Undefined = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ShortPickup")]
        ShortPickup = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ShortDeposit")]
        ShortDeposit = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LongDeposit")]
        LongDeposit = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LongPickup")]
        LongPickup = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StepMovementParameters : MovementParameters
    {
        [Newtonsoft.Json.JsonProperty("AdjustByWeight", Required = Newtonsoft.Json.Required.Always)]
        public bool AdjustByWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Number", Required = Newtonsoft.Json.Required.Always)]
        public int Number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Position", Required = Newtonsoft.Json.Required.Always)]
        public double Position { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static StepMovementParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StepMovementParameters>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeightMeasurement : DataModel
    {
        [Newtonsoft.Json.JsonProperty("MeasureConst0", Required = Newtonsoft.Json.Required.Always)]
        public double MeasureConst0 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MeasureConst1", Required = Newtonsoft.Json.Required.Always)]
        public double MeasureConst1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MeasureConst2", Required = Newtonsoft.Json.Required.Always)]
        public double MeasureConst2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MeasureSpeed", Required = Newtonsoft.Json.Required.Always)]
        public double MeasureSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MeasureTime", Required = Newtonsoft.Json.Required.Always)]
        public int MeasureTime { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static WeightMeasurement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeightMeasurement>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ElevatorStructuralProperties : DataModel
    {
        [Newtonsoft.Json.JsonProperty("BeltRigidity", Required = Newtonsoft.Json.Required.Always)]
        public int BeltRigidity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BeltSpacing", Required = Newtonsoft.Json.Required.Always)]
        public double BeltSpacing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ElevatorWeight", Required = Newtonsoft.Json.Required.Always)]
        public double ElevatorWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HalfShaftLength", Required = Newtonsoft.Json.Required.Always)]
        public double HalfShaftLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PulleyDiameter", Required = Newtonsoft.Json.Required.Always)]
        public double PulleyDiameter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShaftDiameter", Required = Newtonsoft.Json.Required.Always)]
        public double ShaftDiameter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShaftElasticity", Required = Newtonsoft.Json.Required.Always)]
        public double ShaftElasticity { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ElevatorStructuralProperties FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ElevatorStructuralProperties>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SetupProceduresSet : DataModel
    {
        [Newtonsoft.Json.JsonProperty("Bay1HeightCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PositioningProcedure Bay1HeightCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay1ShutterTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure Bay1ShutterTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay2HeightCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PositioningProcedure Bay2HeightCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay2ShutterTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure Bay2ShutterTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay3HeightCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PositioningProcedure Bay3HeightCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay3ShutterTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure Bay3ShutterTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BeltBurnishingTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure BeltBurnishingTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CellPanelsCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PositioningProcedure CellPanelsCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CellsHeightCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PositioningProcedure CellsHeightCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DepositAndPickUpTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatedTestProcedure DepositAndPickUpTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LoadFirstDrawerTest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure LoadFirstDrawerTest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShutterHeightCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure ShutterHeightCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalOffsetCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OffsetCalibrationProcedure VerticalOffsetCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalOriginCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupProcedure VerticalOriginCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalResolutionCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VerticalResolutionCalibrationProcedure VerticalResolutionCalibration { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static SetupProceduresSet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetupProceduresSet>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RepeatedTestProcedure : SetupProcedure
    {
        [Newtonsoft.Json.JsonProperty("InProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool InProgress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PerformedCycles", Required = Newtonsoft.Json.Required.Always)]
        public int PerformedCycles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequiredCycles", Required = Newtonsoft.Json.Required.Always)]
        public int RequiredCycles { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static RepeatedTestProcedure FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RepeatedTestProcedure>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OffsetCalibrationProcedure : PositioningProcedure
    {
        [Newtonsoft.Json.JsonProperty("ReferenceCellId", Required = Newtonsoft.Json.Required.Always)]
        public int ReferenceCellId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static OffsetCalibrationProcedure FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OffsetCalibrationProcedure>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VerticalResolutionCalibrationProcedure : SetupProcedure
    {
        [Newtonsoft.Json.JsonProperty("FinalPosition", Required = Newtonsoft.Json.Required.Always)]
        public double FinalPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InitialPosition", Required = Newtonsoft.Json.Required.Always)]
        public double InitialPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StartPosition", Required = Newtonsoft.Json.Required.Always)]
        public double StartPosition { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static VerticalResolutionCalibrationProcedure FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VerticalResolutionCalibrationProcedure>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ValueTupleOfIEnumerableOfInverterDeviceInfoAndIEnumerableOfIoDeviceInfo 
    {
        [Newtonsoft.Json.JsonProperty("Item1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<InverterDeviceInfo> Item1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Item2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<IoDeviceInfo> Item2 { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ValueTupleOfIEnumerableOfInverterDeviceInfoAndIEnumerableOfIoDeviceInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ValueTupleOfIEnumerableOfInverterDeviceInfoAndIEnumerableOfIoDeviceInfo>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InverterDeviceInfo : DeviceBase
    {
        [Newtonsoft.Json.JsonProperty("ControlWords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<BitInfo> ControlWords { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DigitalInputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<BitInfo> DigitalInputs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusWords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<BitInfo> StatusWords { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static InverterDeviceInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InverterDeviceInfo>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BitInfo 
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsUsed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsUsed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Always)]
        public bool Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static BitInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BitInfo>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceBase 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static DeviceBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeviceBase>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IoDeviceInfo : DeviceBase
    {
        [Newtonsoft.Json.JsonProperty("Inputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<BitInfo> Inputs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IoStatuses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<BitInfo> IoStatuses { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Outputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<BitInfo> Outputs { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static IoDeviceInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IoDeviceInfo>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ElevatorPosition 
    {
        [Newtonsoft.Json.JsonProperty("BayPositionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BayPositionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BayPositionUpper", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BayPositionUpper { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CellId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CellId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Horizontal", Required = Newtonsoft.Json.Required.Always)]
        public double Horizontal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Vertical", Required = Newtonsoft.Json.Required.Always)]
        public double Vertical { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ElevatorPosition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ElevatorPosition>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AxisBounds 
    {
        [Newtonsoft.Json.JsonProperty("Lower", Required = Newtonsoft.Json.Required.Always)]
        public double Lower { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Upper", Required = Newtonsoft.Json.Required.Always)]
        public double Upper { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static AxisBounds FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AxisBounds>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MachineError : DataModel
    {
        [Newtonsoft.Json.JsonProperty("BayNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BayNumber BayNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Always)]
        public int Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DetailCode", Required = Newtonsoft.Json.Required.Always)]
        public int DetailCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InverterIndex", Required = Newtonsoft.Json.Required.Always)]
        public int InverterIndex { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OccurrenceDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurrenceDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ResolutionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ResolutionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Severity { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MachineError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MachineError>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorStatisticsSummary 
    {
        [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IEnumerable<ErrorStatisticsDetail> Errors { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReliabilityPercentage", Required = Newtonsoft.Json.Required.Always)]
        public double ReliabilityPercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalErrors", Required = Newtonsoft.Json.Required.Always)]
        public int TotalErrors { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalLoadingUnits", Required = Newtonsoft.Json.Required.Always)]
        public int TotalLoadingUnits { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalLoadingUnitsBetweenErrors", Required = Newtonsoft.Json.Required.Always)]
        public int TotalLoadingUnitsBetweenErrors { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ErrorStatisticsSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorStatisticsSummary>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorStatisticsDetail 
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Always)]
        public int Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RatioTotal", Required = Newtonsoft.Json.Required.Always)]
        public double RatioTotal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Total", Required = Newtonsoft.Json.Required.Always)]
        public int Total { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static ErrorStatisticsDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorStatisticsDetail>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MachineErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CradleNotCompletelyLoaded")]
        CradleNotCompletelyLoaded = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ConditionsNotMetForPositioning")]
        ConditionsNotMetForPositioning = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ConditionsNotMetForRunning")]
        ConditionsNotMetForRunning = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ConditionsNotMetForHoming")]
        ConditionsNotMetForHoming = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SecurityWasTriggered")]
        SecurityWasTriggered = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SecurityButtonWasTriggered")]
        SecurityButtonWasTriggered = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SecurityBarrierWasTriggered")]
        SecurityBarrierWasTriggered = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SecuritySensorWasTriggered")]
        SecuritySensorWasTriggered = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterFaultStateDetected")]
        InverterFaultStateDetected = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CradleNotCorrectlyLoadedDuringPickup")]
        CradleNotCorrectlyLoadedDuringPickup = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CradleNotCorrectlyUnloadedDuringDeposit")]
        CradleNotCorrectlyUnloadedDuringDeposit = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZeroSensorErrorAfterPickup")]
        ZeroSensorErrorAfterPickup = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZeroSensorErrorAfterDeposit")]
        ZeroSensorErrorAfterDeposit = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InvalidPresenceSensors")]
        InvalidPresenceSensors = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MissingZeroSensorWithEmptyElevator")]
        MissingZeroSensorWithEmptyElevator = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZeroSensorActiveWithFullElevator")]
        ZeroSensorActiveWithFullElevator = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitPresentOnEmptyElevator")]
        LoadUnitPresentOnEmptyElevator = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TopLevelBayOccupied")]
        TopLevelBayOccupied = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BottomLevelBayOccupied")]
        BottomLevelBayOccupied = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TopLevelBayEmpty")]
        TopLevelBayEmpty = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BottomLevelBayEmpty")]
        BottomLevelBayEmpty = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SensorZeroBayNotActiveAtStart")]
        SensorZeroBayNotActiveAtStart = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterConnectionError")]
        InverterConnectionError = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IoDeviceConnectionError")]
        IoDeviceConnectionError = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LaserConnectionError")]
        LaserConnectionError = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitWeightExceeded")]
        LoadUnitWeightExceeded = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitHeightExceeded")]
        LoadUnitHeightExceeded = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitWeightTooLow")]
        LoadUnitWeightTooLow = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MachineWeightExceeded")]
        MachineWeightExceeded = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DestinationBelowLowerBound")]
        DestinationBelowLowerBound = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DestinationOverUpperBound")]
        DestinationOverUpperBound = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BayInvertersBusy")]
        BayInvertersBusy = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IoDeviceError")]
        IoDeviceError = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MachineModeNotValid")]
        MachineModeNotValid = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AnotherMissionIsActiveForThisLoadUnit")]
        AnotherMissionIsActiveForThisLoadUnit = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AnotherMissionIsActiveForThisBay")]
        AnotherMissionIsActiveForThisBay = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AnotherMissionOfThisTypeIsActive")]
        AnotherMissionOfThisTypeIsActive = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WarehouseIsFull")]
        WarehouseIsFull = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CellLogicallyOccupied")]
        CellLogicallyOccupied = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MoveBayChainNotAllowed")]
        MoveBayChainNotAllowed = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AutomaticRestoreNotAllowed")]
        AutomaticRestoreNotAllowed = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DestinationTypeNotValid")]
        DestinationTypeNotValid = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MissionTypeNotValid")]
        MissionTypeNotValid = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ResumeCommandNotValid")]
        ResumeCommandNotValid = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DestinationBayNotCalibrated")]
        DestinationBayNotCalibrated = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NoLoadUnitInSource")]
        NoLoadUnitInSource = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitSourceDb")]
        LoadUnitSourceDb = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitDestinationCell")]
        LoadUnitDestinationCell = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitElevator")]
        LoadUnitElevator = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitNotRemoved")]
        LoadUnitNotRemoved = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitDestinationBay")]
        LoadUnitDestinationBay = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitSourceCell")]
        LoadUnitSourceCell = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitNotFound")]
        LoadUnitNotFound = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitNotLoaded")]
        LoadUnitNotLoaded = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitSourceBay")]
        LoadUnitSourceBay = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitShutterOpen")]
        LoadUnitShutterOpen = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitShutterInvalid")]
        LoadUnitShutterInvalid = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitShutterClosed")]
        LoadUnitShutterClosed = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitPresentInCell")]
        LoadUnitPresentInCell = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitOtherBay")]
        LoadUnitOtherBay = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitSourceElevator")]
        LoadUnitSourceElevator = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitMissingOnElevator")]
        LoadUnitMissingOnElevator = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitMissingOnBay")]
        LoadUnitMissingOnBay = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitUndefinedUpper")]
        LoadUnitUndefinedUpper = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LoadUnitUndefinedBottom")]
        LoadUnitUndefinedBottom = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterErrorBaseCode")]
        InverterErrorBaseCode = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterErrorInvalidParameter")]
        InverterErrorInvalidParameter = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterErrorInvalidDataset")]
        InverterErrorInvalidDataset = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterErrorParameterIsWriteOnly")]
        InverterErrorParameterIsWriteOnly = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterErrorParameterIsReadOnly")]
        InverterErrorParameterIsReadOnly = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterErrorEepromReadError")]
        InverterErrorEepromReadError = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterErrorEepromWriteError")]
        InverterErrorEepromWriteError = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterErrorEepromChecksumError")]
        InverterErrorEepromChecksumError = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterErrorCannotWriteParameterWhileRunning")]
        InverterErrorCannotWriteParameterWhileRunning = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterErrorDatasetValuesAreDifferent")]
        InverterErrorDatasetValuesAreDifferent = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterErrorUnknownParameter")]
        InverterErrorUnknownParameter = 75,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterErrorSyntaxError")]
        InverterErrorSyntaxError = 76,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterErrorWrongPayloadLength")]
        InverterErrorWrongPayloadLength = 77,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterErrorNodeNotAvailable")]
        InverterErrorNodeNotAvailable = 78,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InverterErrorSyntaxError2")]
        InverterErrorSyntaxError2 = 79,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NoError")]
        NoError = 80,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MachineIdentity 
    {
        [Newtonsoft.Json.JsonProperty("AreaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AreaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Depth", Required = Newtonsoft.Json.Required.Always)]
        public double Depth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InstallationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset InstallationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsOneTonMachine", Required = Newtonsoft.Json.Required.Always)]
        public bool IsOneTonMachine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastServiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastServiceDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxGrossWeight", Required = Newtonsoft.Json.Required.Always)]
        public double MaxGrossWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NextServiceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextServiceDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ServiceStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MachineServiceStatus ServiceStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TrayCount", Required = Newtonsoft.Json.Required.Always)]
        public int TrayCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public double Width { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MachineIdentity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MachineIdentity>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MachineServiceStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
        Undefined = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Expiring")]
        Expiring = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Valid")]
        Valid = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Expired")]
        Expired = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MachineStatistics : DataModel
    {
        [Newtonsoft.Json.JsonProperty("AreaFillPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AreaFillPercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AutomaticTimePercentage", Required = Newtonsoft.Json.Required.Always)]
        public double AutomaticTimePercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalAutomaticTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan TotalAutomaticTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalBeltCycles", Required = Newtonsoft.Json.Required.Always)]
        public int TotalBeltCycles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalMissionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan TotalMissionTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalMovedTrays", Required = Newtonsoft.Json.Required.Always)]
        public int TotalMovedTrays { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalMovedTraysInBay1", Required = Newtonsoft.Json.Required.Always)]
        public int TotalMovedTraysInBay1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalMovedTraysInBay2", Required = Newtonsoft.Json.Required.Always)]
        public int TotalMovedTraysInBay2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalMovedTraysInBay3", Required = Newtonsoft.Json.Required.Always)]
        public int TotalMovedTraysInBay3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalPowerOnTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan TotalPowerOnTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalVerticalAxisCycles", Required = Newtonsoft.Json.Required.Always)]
        public int TotalVerticalAxisCycles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalVerticalAxisKilometers", Required = Newtonsoft.Json.Required.Always)]
        public double TotalVerticalAxisKilometers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalWeightBack", Required = Newtonsoft.Json.Required.Always)]
        public double TotalWeightBack { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalWeightFront", Required = Newtonsoft.Json.Required.Always)]
        public double TotalWeightFront { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UsageTimePercentage", Required = Newtonsoft.Json.Required.Always)]
        public double UsageTimePercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WeightCapacityPercentage", Required = Newtonsoft.Json.Required.Always)]
        public double WeightCapacityPercentage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static MachineStatistics FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MachineStatistics>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LoadingUnitSpaceStatistics 
    {
        [Newtonsoft.Json.JsonProperty("AreaFillPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AreaFillPercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CompartmentsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CompartmentsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MissionsCount", Required = Newtonsoft.Json.Required.Always)]
        public int MissionsCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static LoadingUnitSpaceStatistics FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoadingUnitSpaceStatistics>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LoadingUnitWeightStatistics 
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CompartmentsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CompartmentsCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GrossWeight", Required = Newtonsoft.Json.Required.Always)]
        public double GrossWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public double Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxNetWeight", Required = Newtonsoft.Json.Required.Always)]
        public double MaxNetWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxWeightPercentage", Required = Newtonsoft.Json.Required.Always)]
        public double MaxWeightPercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Tare", Required = Newtonsoft.Json.Required.Always)]
        public double Tare { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static LoadingUnitWeightStatistics FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoadingUnitWeightStatistics>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SetupStatusCapabilities 
    {
        [Newtonsoft.Json.JsonProperty("AllLoadingUnits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus AllLoadingUnits { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaySetupStatus Bay1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaySetupStatus Bay2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bay3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaySetupStatus Bay3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BeltBurnishing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus BeltBurnishing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CellPanelsCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus CellPanelsCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CellsHeightCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus CellsHeightCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CompletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HorizontalHoming", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus HorizontalHoming { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsComplete", Required = Newtonsoft.Json.Required.Always)]
        public bool IsComplete { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalOffsetCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus VerticalOffsetCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalOriginCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus VerticalOriginCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalResolutionCalibration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus VerticalResolutionCalibration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WeightMeasurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus WeightMeasurement { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static SetupStatusCapabilities FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetupStatusCapabilities>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SetupStepStatus 
    {
        [Newtonsoft.Json.JsonProperty("CanBePerformed", Required = Newtonsoft.Json.Required.Always)]
        public bool CanBePerformed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool InProgress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsCompleted", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCompleted { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static SetupStepStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetupStepStatus>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BaySetupStatus 
    {
        [Newtonsoft.Json.JsonProperty("AllLoadingUnits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus AllLoadingUnits { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Check", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus Check { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FirstLoadingUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus FirstLoadingUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Laser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus Laser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Shape", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus Shape { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Shutter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetupStepStatus Shutter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static BaySetupStatus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaySetupStatus>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HomingProcedureParameters 
    {
        [Newtonsoft.Json.JsonProperty("IsCompleted", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCompleted { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LowerBound", Required = Newtonsoft.Json.Required.Always)]
        public double LowerBound { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Offset", Required = Newtonsoft.Json.Required.Always)]
        public double Offset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Resolution", Required = Newtonsoft.Json.Required.Always)]
        public double Resolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UpperBound", Required = Newtonsoft.Json.Required.Always)]
        public double UpperBound { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static HomingProcedureParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HomingProcedureParameters>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MachineMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NotSpecified")]
        NotSpecified = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Automatic")]
        Automatic = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Test")]
        Test = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Compact")]
        Compact = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Restore")]
        Restore = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SwitchingToAutomatic")]
        SwitchingToAutomatic = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SwitchingToManual")]
        SwitchingToManual = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SwitchingToCompact")]
        SwitchingToCompact = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MachinePowerState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NotSpecified")]
        NotSpecified = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unpowered")]
        Unpowered = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PoweringUp")]
        PoweringUp = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Powered")]
        Powered = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PoweringDown")]
        PoweringDown = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ShutterMovementDirection
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NotSpecified")]
        NotSpecified = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Up")]
        Up = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Down")]
        Down = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserClaims 
    {
        [Newtonsoft.Json.JsonProperty("AccessLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserAccessLevel AccessLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
        public static UserClaims FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserClaims>(data, new Newtonsoft.Json.JsonConverter[] { new Ferretto.VW.CommonUtils.Converters.IPAddressConverter() });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UserAccessLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NoAccess")]
        NoAccess = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Operator")]
        Operator = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Installer")]
        Installer = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Support")]
        Support = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Admin")]
        Admin = 4,
    
    }

    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client; 
        private System.IDisposable _response; 

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode; 
            Headers = headers; 
            Stream = stream; 
            _client = client; 
            _response = response;
        }

        public void Dispose() 
        {
            if (Stream != null)
                Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MasWebApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public MasWebApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MasWebApiException<TResult> : MasWebApiException
    {
        public TResult Result { get; private set; }

        public MasWebApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108