// <auto-generated />
using System;
using Ferretto.VW.MAS.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ferretto.VW.MAS_DataLayer.Migrations
{
    [DbContext(typeof(DataLayerContext))]
    [Migration("20190718063132_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Cell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Coord");

                    b.Property<int>("Priority");

                    b.Property<int>("Side");

                    b.Property<int>("Status");

                    b.Property<int>("WorkingStatus");

                    b.HasKey("Id");

                    b.ToTable("Cells");

                    b.HasData(
                        new { Id = 1, Coord = 0m, Priority = 1, Side = 0, Status = 2, WorkingStatus = 0 },
                        new { Id = 2, Coord = 0m, Priority = 2, Side = 1, Status = 2, WorkingStatus = 0 },
                        new { Id = 3, Coord = 0m, Priority = 3, Side = 0, Status = 2, WorkingStatus = 0 },
                        new { Id = 4, Coord = 0m, Priority = 4, Side = 1, Status = 2, WorkingStatus = 0 },
                        new { Id = 5, Coord = 0m, Priority = 5, Side = 0, Status = 2, WorkingStatus = 0 },
                        new { Id = 6, Coord = 0m, Priority = 6, Side = 1, Status = 2, WorkingStatus = 0 },
                        new { Id = 7, Coord = 0m, Priority = 7, Side = 0, Status = 2, WorkingStatus = 0 },
                        new { Id = 8, Coord = 0m, Priority = 8, Side = 1, Status = 2, WorkingStatus = 0 },
                        new { Id = 9, Coord = 0m, Priority = 9, Side = 0, Status = 2, WorkingStatus = 0 },
                        new { Id = 10, Coord = 0m, Priority = 10, Side = 1, Status = 2, WorkingStatus = 0 },
                        new { Id = 11, Coord = 0m, Priority = 11, Side = 0, Status = 2, WorkingStatus = 0 },
                        new { Id = 12, Coord = 0m, Priority = 12, Side = 1, Status = 2, WorkingStatus = 0 },
                        new { Id = 13, Coord = 0m, Priority = 13, Side = 0, Status = 2, WorkingStatus = 0 },
                        new { Id = 14, Coord = 0m, Priority = 14, Side = 1, Status = 2, WorkingStatus = 0 },
                        new { Id = 15, Coord = 0m, Priority = 15, Side = 0, Status = 2, WorkingStatus = 0 },
                        new { Id = 16, Coord = 0m, Priority = 16, Side = 1, Status = 2, WorkingStatus = 0 },
                        new { Id = 17, Coord = 0m, Priority = 17, Side = 0, Status = 2, WorkingStatus = 0 },
                        new { Id = 18, Coord = 0m, Priority = 18, Side = 1, Status = 2, WorkingStatus = 0 },
                        new { Id = 19, Coord = 0m, Priority = 19, Side = 0, Status = 2, WorkingStatus = 0 },
                        new { Id = 20, Coord = 0m, Priority = 20, Side = 1, Status = 0, WorkingStatus = 0 },
                        new { Id = 21, Coord = 0m, Priority = 21, Side = 0, Status = 0, WorkingStatus = 0 },
                        new { Id = 22, Coord = 0m, Priority = 22, Side = 1, Status = 0, WorkingStatus = 0 },
                        new { Id = 23, Coord = 0m, Priority = 23, Side = 0, Status = 0, WorkingStatus = 0 },
                        new { Id = 24, Coord = 0m, Priority = 24, Side = 1, Status = 0, WorkingStatus = 0 },
                        new { Id = 25, Coord = 0m, Priority = 25, Side = 0, Status = 0, WorkingStatus = 0 },
                        new { Id = 26, Coord = 0m, Priority = 26, Side = 1, Status = 0, WorkingStatus = 0 },
                        new { Id = 27, Coord = 0m, Priority = 27, Side = 0, Status = 0, WorkingStatus = 0 },
                        new { Id = 28, Coord = 0m, Priority = 28, Side = 1, Status = 0, WorkingStatus = 0 },
                        new { Id = 29, Coord = 0m, Priority = 29, Side = 0, Status = 0, WorkingStatus = 0 },
                        new { Id = 30, Coord = 0m, Priority = 30, Side = 1, Status = 0, WorkingStatus = 0 },
                        new { Id = 31, Coord = 0m, Priority = 31, Side = 0, Status = 0, WorkingStatus = 0 },
                        new { Id = 32, Coord = 0m, Priority = 32, Side = 1, Status = 0, WorkingStatus = 0 },
                        new { Id = 33, Coord = 0m, Priority = 33, Side = 0, Status = 0, WorkingStatus = 0 },
                        new { Id = 34, Coord = 0m, Priority = 34, Side = 1, Status = 0, WorkingStatus = 0 },
                        new { Id = 35, Coord = 0m, Priority = 35, Side = 0, Status = 0, WorkingStatus = 0 },
                        new { Id = 36, Coord = 0m, Priority = 36, Side = 1, Status = 0, WorkingStatus = 0 },
                        new { Id = 37, Coord = 0m, Priority = 37, Side = 0, Status = 0, WorkingStatus = 0 },
                        new { Id = 38, Coord = 0m, Priority = 38, Side = 1, Status = 0, WorkingStatus = 0 },
                        new { Id = 39, Coord = 0m, Priority = 39, Side = 0, Status = 0, WorkingStatus = 0 }
                    );
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ConfigurationValue", b =>
                {
                    b.Property<long>("CategoryName");

                    b.Property<long>("VarName");

                    b.Property<long>("VarType");

                    b.Property<string>("VarValue");

                    b.HasKey("CategoryName", "VarName");

                    b.ToTable("ConfigurationValues");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.Error", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Issue");

                    b.Property<string>("Reason");

                    b.HasKey("Code");

                    b.ToTable("Errors");

                    b.HasData(
                        new { Code = 1001, Description = "Errore database", Issue = 5 },
                        new { Code = 1002, Description = "Errore caricamento configurazione", Issue = 5 },
                        new { Code = 1003, Description = "Errore inizializzazione dati", Issue = 5 },
                        new { Code = 1004, Description = "Errore salvataggio dati", Issue = 5 },
                        new { Code = 1005, Description = "Errore rientro cassetto", Issue = 5 },
                        new { Code = 1006, Description = "Errore rientro baia", Issue = 5 },
                        new { Code = 1007, Description = "Errore rientro baia", Issue = 5 },
                        new { Code = 1008, Description = "Errore rientro baia", Issue = 5 },
                        new { Code = 1009, Description = "Errore rientro baia", Issue = 5 },
                        new { Code = 1010, Description = "Errore rientro baia", Issue = 5 },
                        new { Code = 1011, Description = "Errore rientro baia", Issue = 5 },
                        new { Code = 1012, Description = "Errore rientro baia", Issue = 5 },
                        new { Code = 1013, Description = "Errore rientro baia", Issue = 5 },
                        new { Code = 1014, Description = "Errore rientro baia", Issue = 5 },
                        new { Code = 1015, Description = "Errore rientro baia", Issue = 5 },
                        new { Code = 1016, Description = "Errore rientro baia", Issue = 5 },
                        new { Code = 1017, Description = "Errore posizionamento", Issue = 5 }
                    );
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ErrorStatistic", b =>
                {
                    b.Property<int>("Code");

                    b.Property<int>("TotalErrors");

                    b.HasKey("Code");

                    b.ToTable("ErrorStatistics");

                    b.HasData(
                        new { Code = 1001, TotalErrors = 11 },
                        new { Code = 1002, TotalErrors = 7 },
                        new { Code = 1003, TotalErrors = 5 },
                        new { Code = 1004, TotalErrors = 3 },
                        new { Code = 1005, TotalErrors = 2 },
                        new { Code = 1006, TotalErrors = 1 },
                        new { Code = 1007, TotalErrors = 1 },
                        new { Code = 1008, TotalErrors = 1 },
                        new { Code = 1009, TotalErrors = 1 },
                        new { Code = 1010, TotalErrors = 1 },
                        new { Code = 1011, TotalErrors = 1 },
                        new { Code = 1012, TotalErrors = 1 },
                        new { Code = 1013, TotalErrors = 1 },
                        new { Code = 1014, TotalErrors = 1 },
                        new { Code = 1015, TotalErrors = 1 },
                        new { Code = 1016, TotalErrors = 0 }
                    );
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.FreeBlock", b =>
                {
                    b.Property<int>("FreeBlockId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BlockSize");

                    b.Property<int>("BookedCellsNumber");

                    b.Property<decimal>("Coord");

                    b.Property<int>("LoadingUnitId");

                    b.Property<int>("Priority");

                    b.Property<int>("Side");

                    b.Property<int>("StartCell");

                    b.HasKey("FreeBlockId");

                    b.HasIndex("LoadingUnitId");

                    b.ToTable("FreeBlocks");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LoadingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CellId");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<decimal>("GrossWeight");

                    b.Property<decimal>("Height");

                    b.Property<int>("LoadingUnitId");

                    b.Property<decimal>("MaxNetWeight");

                    b.Property<long>("Status");

                    b.Property<decimal>("Tare");

                    b.HasKey("Id");

                    b.HasIndex("CellId")
                        .IsUnique();

                    b.ToTable("LoadingUnits");

                    b.HasData(
                        new { Id = 1, CellId = 1, Code = "LU#1.01", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 2, CellId = 2, Code = "LU#1.02", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 3, CellId = 3, Code = "LU#1.03", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 4, CellId = 4, Code = "LU#1.04", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 5, CellId = 5, Code = "LU#1.05", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 6, CellId = 6, Code = "LU#1.06", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 7, CellId = 7, Code = "LU#1.07", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 8, CellId = 8, Code = "LU#1.08", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 9, CellId = 9, Code = "LU#1.09", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 10, CellId = 10, Code = "LU#1.10", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 11, CellId = 11, Code = "LU#1.11", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 12, CellId = 12, Code = "LU#1.12", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 13, CellId = 13, Code = "LU#1.13", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 14, CellId = 14, Code = "LU#1.14", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 15, CellId = 15, Code = "LU#1.15", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 16, CellId = 16, Code = "LU#1.16", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 17, CellId = 17, Code = "LU#1.17", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 18, CellId = 18, Code = "LU#1.18", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m },
                        new { Id = 19, CellId = 19, Code = "LU#1.19", GrossWeight = 0m, Height = 100m, LoadingUnitId = 0, MaxNetWeight = 0m, Status = 3L, Tare = 0m }
                    );
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LoadingUnitStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AreaFillRate");

                    b.Property<int>("CompartmentsCount");

                    b.Property<int>("LoadingUnitid");

                    b.Property<int>("TotalMovements");

                    b.Property<double>("WeightPercentage");

                    b.HasKey("Id");

                    b.HasIndex("LoadingUnitid")
                        .IsUnique();

                    b.ToTable("LoadingUnitStatistics");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LogEntry", b =>
                {
                    b.Property<int>("LogEntryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("Description");

                    b.Property<string>("Destination");

                    b.Property<string>("ErrorLevel");

                    b.Property<string>("Exception");

                    b.Property<string>("Level");

                    b.Property<string>("LoggerName");

                    b.Property<string>("Message");

                    b.Property<string>("Source");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("Type");

                    b.HasKey("LogEntryID");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.MachineStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("TotalBeltCycles");

                    b.Property<int>("TotalMovedTrays");

                    b.Property<int>("TotalMovedTraysInBay1");

                    b.Property<int>("TotalMovedTraysInBay2");

                    b.Property<int>("TotalMovedTraysInBay3");

                    b.Property<int>("TotalShutter1Cycles");

                    b.Property<int>("TotalShutter2Cycles");

                    b.Property<int>("TotalShutter3Cycles");

                    b.Property<int>("TotalVerticalAxisCycles");

                    b.Property<double>("TotalVerticalAxisKilometers");

                    b.HasKey("Id");

                    b.ToTable("MachineStatistics");

                    b.HasData(
                        new { Id = 1, TotalBeltCycles = 0, TotalMovedTrays = 0, TotalMovedTraysInBay1 = 0, TotalMovedTraysInBay2 = 0, TotalMovedTraysInBay3 = 0, TotalShutter1Cycles = 0, TotalShutter2Cycles = 0, TotalShutter3Cycles = 0, TotalVerticalAxisCycles = 0, TotalVerticalAxisKilometers = 0.0 }
                    );
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.RuntimeValue", b =>
                {
                    b.Property<long>("CategoryName");

                    b.Property<long>("VarName");

                    b.Property<long>("VarType");

                    b.Property<string>("VarValue");

                    b.HasKey("CategoryName", "VarName");

                    b.ToTable("RuntimeValues");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.ErrorStatistic", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Error", "Error")
                        .WithOne("Statistics")
                        .HasForeignKey("Ferretto.VW.MAS.DataModels.ErrorStatistic", "Code");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.FreeBlock", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.LoadingUnit", "LoadingUnit")
                        .WithMany()
                        .HasForeignKey("LoadingUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LoadingUnit", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.Cell", "Cell")
                        .WithOne("LoadingUnit")
                        .HasForeignKey("Ferretto.VW.MAS.DataModels.LoadingUnit", "CellId");
                });

            modelBuilder.Entity("Ferretto.VW.MAS.DataModels.LoadingUnitStatistics", b =>
                {
                    b.HasOne("Ferretto.VW.MAS.DataModels.LoadingUnit", "LoadingUnit")
                        .WithOne("Statistics")
                        .HasForeignKey("Ferretto.VW.MAS.DataModels.LoadingUnitStatistics", "LoadingUnitid")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
