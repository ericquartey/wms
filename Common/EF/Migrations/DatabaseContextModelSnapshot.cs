// <auto-generated />
using System;
using Ferretto.Common.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ferretto.Common.EF.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ferretto.Common.DataModels.AbcClass", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(1)");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AbcClasses");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.Aisle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId");

                    b.Property<int?>("Columns");

                    b.Property<int?>("Floors");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Aisles");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.Bay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId");

                    b.Property<string>("BayTypeId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LoadingUnitsBufferSize");

                    b.Property<int?>("MachineId");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("BayTypeId");

                    b.HasIndex("MachineId");

                    b.ToTable("Bays");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.BayType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(1)");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("BayTypes");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.Cell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbcClassId")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<int>("AisleId");

                    b.Property<int?>("CellNumber");

                    b.Property<int>("CellStatusId");

                    b.Property<int?>("CellTypeId");

                    b.Property<int?>("Column")
                        .IsRequired();

                    b.Property<int?>("Floor")
                        .IsRequired();

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("char(1)");

                    b.Property<double?>("XCoordinate");

                    b.Property<double?>("YCoordinate");

                    b.Property<double?>("ZCoordinate");

                    b.HasKey("Id");

                    b.HasIndex("AbcClassId");

                    b.HasIndex("AisleId");

                    b.HasIndex("CellStatusId");

                    b.HasIndex("CellTypeId");

                    b.ToTable("Cells");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("CellConfigurations");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellConfigurationCellPositionLoadingUnitType", b =>
                {
                    b.Property<int>("CellPositionId");

                    b.Property<int>("CellConfigurationId");

                    b.Property<int>("LoadingUnitTypeId");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("CellPositionId", "CellConfigurationId", "LoadingUnitTypeId");

                    b.HasIndex("CellConfigurationId");

                    b.HasIndex("LoadingUnitTypeId");

                    b.ToTable("CellConfigurationCellPositionLoadingUnitTypes");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellConfigurationCellType", b =>
                {
                    b.Property<int>("CellConfigurationId");

                    b.Property<int>("CellTypeId");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("CellConfigurationId", "CellTypeId");

                    b.HasIndex("CellTypeId");

                    b.ToTable("CellConfigurationCellTypes");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellHeightClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<double>("MaxHeight");

                    b.Property<double>("MinHeight");

                    b.HasKey("Id");

                    b.ToTable("CellHeightClasses");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<double?>("XOffset");

                    b.Property<double?>("YOffset");

                    b.Property<double?>("ZOffset");

                    b.HasKey("Id");

                    b.ToTable("CellPositions");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellSizeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<double>("Length");

                    b.Property<double>("Width");

                    b.HasKey("Id");

                    b.ToTable("CellSizeClasses");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("CellStatuses");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AisleId");

                    b.Property<int>("CellStatusId");

                    b.Property<int>("CellTypeId");

                    b.Property<int>("CellsNumber");

                    b.HasKey("Id");

                    b.HasIndex("AisleId");

                    b.HasIndex("CellStatusId");

                    b.HasIndex("CellTypeId");

                    b.ToTable("CellTotals");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CellHeightClassId");

                    b.Property<int>("CellSizeClassId");

                    b.Property<int>("CellWeightClassId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CellHeightClassId");

                    b.HasIndex("CellSizeClassId");

                    b.HasIndex("CellWeightClassId");

                    b.ToTable("CellTypes");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellTypeAisle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AisleId");

                    b.Property<int>("CellTypeId");

                    b.Property<int>("CellTypeTotal")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<decimal>("Ratio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3, 2)")
                        .HasDefaultValue(1m);

                    b.HasKey("Id");

                    b.HasIndex("AisleId");

                    b.HasIndex("CellTypeId");

                    b.ToTable("CellTypesAisles");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellWeightClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("MaxWeight");

                    b.Property<int>("MinWeight");

                    b.HasKey("Id");

                    b.ToTable("CellWeightClasses");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.Compartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompartmentStatusId");

                    b.Property<int>("CompartmentTypeId");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("FifoTime");

                    b.Property<DateTime?>("FirstStoreDate");

                    b.Property<bool>("HasRotation");

                    b.Property<DateTime?>("InventoryDate");

                    b.Property<bool>("IsItemPairingFixed");

                    b.Property<int?>("ItemId");

                    b.Property<DateTime>("LastModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("LastPickDate");

                    b.Property<DateTime?>("LastStoreDate");

                    b.Property<int>("LoadingUnitId");

                    b.Property<string>("Lot");

                    b.Property<int?>("MaterialStatusId");

                    b.Property<int?>("PackageTypeId");

                    b.Property<string>("RegistrationNumber");

                    b.Property<double>("ReservedForPick")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0.0);

                    b.Property<double>("ReservedToStore")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0.0);

                    b.Property<double>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0.0);

                    b.Property<string>("Sub1");

                    b.Property<string>("Sub2");

                    b.Property<double?>("XPosition");

                    b.Property<double?>("YPosition");

                    b.HasKey("Id");

                    b.HasIndex("CompartmentStatusId");

                    b.HasIndex("CompartmentTypeId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LoadingUnitId");

                    b.HasIndex("MaterialStatusId");

                    b.HasIndex("PackageTypeId");

                    b.ToTable("Compartments");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CompartmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("CompartmentStatuses");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CompartmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Height");

                    b.Property<double?>("Width");

                    b.HasKey("Id");

                    b.ToTable("CompartmentTypes");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.DefaultCompartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompartmentTypeId");

                    b.Property<int>("DefaultLoadingUnitId");

                    b.Property<string>("Image");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<double>("XPosition");

                    b.Property<double>("YPosition");

                    b.HasKey("Id");

                    b.HasIndex("CompartmentTypeId");

                    b.HasIndex("DefaultLoadingUnitId");

                    b.ToTable("DefaultCompartments");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.DefaultLoadingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DefaultHandlingParametersCorrection");

                    b.Property<string>("Image");

                    b.Property<bool>("IsCellPairingFixed");

                    b.Property<int>("LoadingUnitTypeId");

                    b.HasKey("Id");

                    b.HasIndex("LoadingUnitTypeId");

                    b.ToTable("DefaultLoadingUnits");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbcClassId")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<int?>("AverageWeight");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description");

                    b.Property<int?>("FifoTimePick");

                    b.Property<int?>("FifoTimeStore");

                    b.Property<double?>("Height");

                    b.Property<string>("Image");

                    b.Property<DateTime?>("InventoryDate");

                    b.Property<int?>("InventoryTolerance");

                    b.Property<int?>("ItemCategoryId");

                    b.Property<DateTime>("LastModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("LastPickDate");

                    b.Property<DateTime?>("LastStoreDate");

                    b.Property<double?>("Length");

                    b.Property<string>("ManagementType")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("char(1)");

                    b.Property<string>("MeasureUnitId");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("PickTolerance");

                    b.Property<int?>("ReorderPoint");

                    b.Property<int?>("ReorderQuantity");

                    b.Property<int?>("StoreTolerance");

                    b.Property<double?>("Width");

                    b.HasKey("Id");

                    b.HasIndex("AbcClassId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ItemCategoryId");

                    b.HasIndex("MeasureUnitId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.ItemArea", b =>
                {
                    b.Property<int>("ItemId");

                    b.Property<int>("AreaId");

                    b.HasKey("ItemId", "AreaId");

                    b.HasIndex("AreaId");

                    b.ToTable("ItemsAreas");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ItemCategories");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.ItemCompartmentType", b =>
                {
                    b.Property<int>("CompartmentTypeId");

                    b.Property<int>("ItemId");

                    b.Property<double?>("MaxCapacity");

                    b.HasKey("CompartmentTypeId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemsCompartmentTypes");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.ItemList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CustomerOrderCode");

                    b.Property<string>("CustomerOrderDescription");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ExecutionEndDate");

                    b.Property<DateTime?>("FirstExecutionDate");

                    b.Property<string>("ItemListType")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("char(1)");

                    b.Property<string>("Job");

                    b.Property<DateTime>("LastModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<bool>("ShipmentUnitAssociated");

                    b.Property<string>("ShipmentUnitCode");

                    b.Property<string>("ShipmentUnitDescription");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ItemLists");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.ItemListRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime?>("CompletionDate");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<double>("DispatchedQuantity");

                    b.Property<int>("ItemId");

                    b.Property<int>("ItemListId");

                    b.Property<DateTime?>("LastExecutionDate");

                    b.Property<DateTime>("LastModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Lot");

                    b.Property<int?>("MaterialStatusId");

                    b.Property<int?>("PackageTypeId");

                    b.Property<int?>("Priority");

                    b.Property<string>("RegistrationNumber");

                    b.Property<double>("RequestedQuantity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("'N'");

                    b.Property<string>("Sub1");

                    b.Property<string>("Sub2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemListId");

                    b.HasIndex("MaterialStatusId");

                    b.HasIndex("PackageTypeId");

                    b.ToTable("ItemListRows");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.LoadingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbcClassId")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<int?>("CellId");

                    b.Property<int?>("CellPositionId");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("HandlingParametersCorrection");

                    b.Property<double>("Height");

                    b.Property<int>("InCycleCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("InventoryDate");

                    b.Property<bool>("IsCellPairingFixed");

                    b.Property<DateTime?>("LastHandlingDate");

                    b.Property<DateTime>("LastModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("LastPickDate");

                    b.Property<DateTime?>("LastStoreDate");

                    b.Property<string>("LoadingUnitStatusId")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<int>("LoadingUnitTypeId");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("OtherCycleCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("OutCycleCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("ReferenceType")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("char(1)");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("AbcClassId");

                    b.HasIndex("CellId");

                    b.HasIndex("CellPositionId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("LoadingUnitStatusId");

                    b.HasIndex("LoadingUnitTypeId");

                    b.ToTable("LoadingUnits");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.LoadingUnitHeightClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<double>("MaxHeight");

                    b.Property<double>("MinHeight");

                    b.HasKey("Id");

                    b.ToTable("LoadingUnitHeightClasses");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.LoadingUnitRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActualValue");

                    b.Property<int>("AreaId");

                    b.Property<int>("MaxValue");

                    b.Property<int>("MinValue");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("LoadingUnitRanges");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.LoadingUnitSizeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("BayForksUnthread");

                    b.Property<double?>("BayOffset");

                    b.Property<double>("CellForksUnthread");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<double>("Length");

                    b.Property<double?>("Lift");

                    b.Property<double>("Width");

                    b.HasKey("Id");

                    b.ToTable("LoadingUnitSizeClasses");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.LoadingUnitStatus", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(1)");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("LoadingUnitStatuses");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.LoadingUnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<long>("EmptyWeight")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0L);

                    b.Property<bool>("HasCompartments");

                    b.Property<int>("LoadingUnitHeightClassId");

                    b.Property<int>("LoadingUnitSizeClassId");

                    b.Property<int>("LoadingUnitWeightClassId");

                    b.HasKey("Id");

                    b.HasIndex("LoadingUnitHeightClassId");

                    b.HasIndex("LoadingUnitSizeClassId");

                    b.HasIndex("LoadingUnitWeightClassId");

                    b.ToTable("LoadingUnitTypes");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.LoadingUnitTypeAisle", b =>
                {
                    b.Property<int>("AisleId");

                    b.Property<int>("LoadingUnitTypeId");

                    b.HasKey("AisleId", "LoadingUnitTypeId");

                    b.HasIndex("LoadingUnitTypeId");

                    b.ToTable("LoadingUnitTypesAisles");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.LoadingUnitWeightClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("MaxWeight");

                    b.Property<int>("MinWeight");

                    b.HasKey("Id");

                    b.ToTable("LoadingUnitWeightClasses");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActualWeight");

                    b.Property<int>("AisleId");

                    b.Property<long?>("AutomaticTime");

                    b.Property<DateTime?>("BuildDate");

                    b.Property<int?>("CradlesCount");

                    b.Property<string>("CustomerAddress");

                    b.Property<string>("CustomerCity");

                    b.Property<string>("CustomerCode");

                    b.Property<string>("CustomerCountry");

                    b.Property<string>("CustomerName");

                    b.Property<long?>("ErrorTime");

                    b.Property<string>("Image");

                    b.Property<long?>("InputLoadingUnitsCount");

                    b.Property<DateTime?>("InstallationDate");

                    b.Property<DateTime?>("LastPowerOn");

                    b.Property<DateTime?>("LastServiceDate");

                    b.Property<double?>("Latitude");

                    b.Property<int?>("LoadingUnitsPerCradle");

                    b.Property<double?>("Longitude");

                    b.Property<string>("MachineTypeId")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<long?>("ManualTime");

                    b.Property<long?>("MissionTime");

                    b.Property<string>("Model");

                    b.Property<long?>("MovedLoadingUnitsCount");

                    b.Property<DateTime?>("NextServiceDate");

                    b.Property<string>("Nickname")
                        .IsRequired();

                    b.Property<long?>("OutputLoadingUnitsCount");

                    b.Property<long?>("PowerOnTime");

                    b.Property<string>("RegistrationNumber");

                    b.Property<DateTime?>("TestDate");

                    b.Property<long?>("TotalMaxWeight");

                    b.HasKey("Id");

                    b.HasIndex("AisleId");

                    b.HasIndex("MachineTypeId");

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.MachineType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(1)");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("MachineTypes");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.MaterialStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("MaterialStatuses");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.MeasureUnit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(2)");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("MeasureUnits");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.Mission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BayId");

                    b.Property<int?>("CellId");

                    b.Property<int?>("CompartmentId");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<double>("DispatchedQuantity");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("ItemListId");

                    b.Property<int?>("ItemListRowId");

                    b.Property<DateTime>("LastModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("LoadingUnitId");

                    b.Property<string>("Lot");

                    b.Property<int?>("MaterialStatusId");

                    b.Property<int?>("PackageTypeId");

                    b.Property<int>("Priority");

                    b.Property<string>("RegistrationNumber");

                    b.Property<double>("RequestedQuantity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("'N'");

                    b.Property<string>("Sub1");

                    b.Property<string>("Sub2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("char(1)");

                    b.HasKey("Id");

                    b.HasIndex("BayId");

                    b.HasIndex("CellId");

                    b.HasIndex("CompartmentId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemListId");

                    b.HasIndex("ItemListRowId");

                    b.HasIndex("LoadingUnitId");

                    b.HasIndex("MaterialStatusId");

                    b.HasIndex("PackageTypeId");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.PackageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PackageTypes");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.SchedulerRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreaId");

                    b.Property<int?>("BayId");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsInstant");

                    b.Property<int?>("ItemId");

                    b.Property<DateTime>("LastModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("ListId");

                    b.Property<int?>("ListRowId");

                    b.Property<int?>("LoadingUnitId");

                    b.Property<int?>("LoadingUnitTypeId");

                    b.Property<string>("Lot");

                    b.Property<int?>("MaterialStatusId");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("char(1)");

                    b.Property<int?>("PackageTypeId");

                    b.Property<int?>("Priority");

                    b.Property<string>("RegistrationNumber");

                    b.Property<double?>("RequestedQuantity");

                    b.Property<double?>("ReservedQuantity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("char(1)");

                    b.Property<string>("Sub1");

                    b.Property<string>("Sub2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("char(1)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("BayId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ListId");

                    b.HasIndex("ListRowId");

                    b.HasIndex("LoadingUnitId");

                    b.HasIndex("LoadingUnitTypeId");

                    b.HasIndex("MaterialStatusId");

                    b.HasIndex("PackageTypeId");

                    b.ToTable("SchedulerRequests");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.Aisle", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.Area", "Area")
                        .WithMany("Aisles")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.Bay", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.Area", "Area")
                        .WithMany("Bays")
                        .HasForeignKey("AreaId");

                    b.HasOne("Ferretto.Common.DataModels.BayType", "BayType")
                        .WithMany("Bays")
                        .HasForeignKey("BayTypeId");

                    b.HasOne("Ferretto.Common.DataModels.Machine", "Machine")
                        .WithMany("Bays")
                        .HasForeignKey("MachineId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.Cell", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.AbcClass", "AbcClass")
                        .WithMany("Cells")
                        .HasForeignKey("AbcClassId");

                    b.HasOne("Ferretto.Common.DataModels.Aisle", "Aisle")
                        .WithMany("Cells")
                        .HasForeignKey("AisleId");

                    b.HasOne("Ferretto.Common.DataModels.CellStatus", "CellStatus")
                        .WithMany("Cells")
                        .HasForeignKey("CellStatusId");

                    b.HasOne("Ferretto.Common.DataModels.CellType", "CellType")
                        .WithMany("Cells")
                        .HasForeignKey("CellTypeId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellConfigurationCellPositionLoadingUnitType", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.CellConfiguration", "CellConfiguration")
                        .WithMany("CellConfigurationCellPositionLoadingUnitTypes")
                        .HasForeignKey("CellConfigurationId");

                    b.HasOne("Ferretto.Common.DataModels.CellPosition", "CellPosition")
                        .WithMany("CellConfigurationCellPositionLoadingUnitTypes")
                        .HasForeignKey("CellPositionId");

                    b.HasOne("Ferretto.Common.DataModels.LoadingUnitType", "LoadingUnitType")
                        .WithMany("CellConfigurationCellPositionLoadingUnitTypes")
                        .HasForeignKey("LoadingUnitTypeId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellConfigurationCellType", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.CellConfiguration", "CellConfiguration")
                        .WithMany("CellConfigurationCellTypes")
                        .HasForeignKey("CellConfigurationId");

                    b.HasOne("Ferretto.Common.DataModels.CellType", "CellType")
                        .WithMany("CellConfigurationCellTypes")
                        .HasForeignKey("CellTypeId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellTotal", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.Aisle", "Aisle")
                        .WithMany("CellTotals")
                        .HasForeignKey("AisleId");

                    b.HasOne("Ferretto.Common.DataModels.CellStatus", "CellStatus")
                        .WithMany("CellTotals")
                        .HasForeignKey("CellStatusId");

                    b.HasOne("Ferretto.Common.DataModels.CellType", "CellType")
                        .WithMany("CellTotals")
                        .HasForeignKey("CellTypeId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellType", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.CellHeightClass", "CellHeightClass")
                        .WithMany("CellTypes")
                        .HasForeignKey("CellHeightClassId");

                    b.HasOne("Ferretto.Common.DataModels.CellSizeClass", "CellSizeClass")
                        .WithMany("CellTypes")
                        .HasForeignKey("CellSizeClassId");

                    b.HasOne("Ferretto.Common.DataModels.CellWeightClass", "CellWeightClass")
                        .WithMany("CellTypes")
                        .HasForeignKey("CellWeightClassId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.CellTypeAisle", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.Aisle", "Aisle")
                        .WithMany("AisleCellsTypes")
                        .HasForeignKey("AisleId");

                    b.HasOne("Ferretto.Common.DataModels.CellType", "CellType")
                        .WithMany("CellTypeAisles")
                        .HasForeignKey("CellTypeId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.Compartment", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.CompartmentStatus", "CompartmentStatus")
                        .WithMany("Compartments")
                        .HasForeignKey("CompartmentStatusId");

                    b.HasOne("Ferretto.Common.DataModels.CompartmentType", "CompartmentType")
                        .WithMany("Compartments")
                        .HasForeignKey("CompartmentTypeId");

                    b.HasOne("Ferretto.Common.DataModels.Item", "Item")
                        .WithMany("Compartments")
                        .HasForeignKey("ItemId");

                    b.HasOne("Ferretto.Common.DataModels.LoadingUnit", "LoadingUnit")
                        .WithMany("Compartments")
                        .HasForeignKey("LoadingUnitId");

                    b.HasOne("Ferretto.Common.DataModels.MaterialStatus", "MaterialStatus")
                        .WithMany("Compartments")
                        .HasForeignKey("MaterialStatusId");

                    b.HasOne("Ferretto.Common.DataModels.PackageType", "PackageType")
                        .WithMany("Compartments")
                        .HasForeignKey("PackageTypeId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.DefaultCompartment", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.CompartmentType", "CompartmentType")
                        .WithMany("DefaultCompartments")
                        .HasForeignKey("CompartmentTypeId");

                    b.HasOne("Ferretto.Common.DataModels.DefaultLoadingUnit", "DefaultLoadingUnit")
                        .WithMany("DefaultCompartments")
                        .HasForeignKey("DefaultLoadingUnitId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.DefaultLoadingUnit", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.LoadingUnitType", "LoadingUnitType")
                        .WithMany("DefaultLoadingUnits")
                        .HasForeignKey("LoadingUnitTypeId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.Item", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.AbcClass", "AbcClass")
                        .WithMany("Items")
                        .HasForeignKey("AbcClassId");

                    b.HasOne("Ferretto.Common.DataModels.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryId");

                    b.HasOne("Ferretto.Common.DataModels.MeasureUnit", "MeasureUnit")
                        .WithMany("Items")
                        .HasForeignKey("MeasureUnitId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.ItemArea", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.Area", "Area")
                        .WithMany("AreaItems")
                        .HasForeignKey("AreaId");

                    b.HasOne("Ferretto.Common.DataModels.Item", "Item")
                        .WithMany("ItemAreas")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.ItemCompartmentType", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.CompartmentType", "CompartmentType")
                        .WithMany("ItemsCompartmentTypes")
                        .HasForeignKey("CompartmentTypeId");

                    b.HasOne("Ferretto.Common.DataModels.Item", "Item")
                        .WithMany("ItemsCompartmentTypes")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.ItemListRow", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.Item", "Item")
                        .WithMany("ItemListRows")
                        .HasForeignKey("ItemId");

                    b.HasOne("Ferretto.Common.DataModels.ItemList", "ItemList")
                        .WithMany("ItemListRows")
                        .HasForeignKey("ItemListId");

                    b.HasOne("Ferretto.Common.DataModels.MaterialStatus", "MaterialStatus")
                        .WithMany("ItemListRows")
                        .HasForeignKey("MaterialStatusId");

                    b.HasOne("Ferretto.Common.DataModels.PackageType", "PackageType")
                        .WithMany("ItemListRows")
                        .HasForeignKey("PackageTypeId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.LoadingUnit", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.AbcClass", "AbcClass")
                        .WithMany("LoadingUnits")
                        .HasForeignKey("AbcClassId");

                    b.HasOne("Ferretto.Common.DataModels.Cell", "Cell")
                        .WithMany("LoadingUnits")
                        .HasForeignKey("CellId");

                    b.HasOne("Ferretto.Common.DataModels.CellPosition", "CellPosition")
                        .WithMany("LoadingUnits")
                        .HasForeignKey("CellPositionId");

                    b.HasOne("Ferretto.Common.DataModels.LoadingUnitStatus", "LoadingUnitStatus")
                        .WithMany("LoadingUnits")
                        .HasForeignKey("LoadingUnitStatusId");

                    b.HasOne("Ferretto.Common.DataModels.LoadingUnitType", "LoadingUnitType")
                        .WithMany("LoadingUnits")
                        .HasForeignKey("LoadingUnitTypeId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.LoadingUnitRange", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.Area", "Area")
                        .WithMany("LoadingUnitRanges")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.LoadingUnitType", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.LoadingUnitHeightClass", "LoadingUnitHeightClass")
                        .WithMany("LoadingUnitTypes")
                        .HasForeignKey("LoadingUnitHeightClassId");

                    b.HasOne("Ferretto.Common.DataModels.LoadingUnitSizeClass", "LoadingUnitSizeClass")
                        .WithMany("LoadingUnitTypes")
                        .HasForeignKey("LoadingUnitSizeClassId");

                    b.HasOne("Ferretto.Common.DataModels.LoadingUnitWeightClass", "LoadingUnitWeightClass")
                        .WithMany("LoadingUnitTypes")
                        .HasForeignKey("LoadingUnitWeightClassId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.LoadingUnitTypeAisle", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.Aisle", "Aisle")
                        .WithMany("AisleLoadingUnitTypes")
                        .HasForeignKey("AisleId");

                    b.HasOne("Ferretto.Common.DataModels.LoadingUnitType", "LoadingUnit")
                        .WithMany("LoadingUnitTypeAisles")
                        .HasForeignKey("LoadingUnitTypeId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.Machine", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.Aisle", "Aisle")
                        .WithMany("Machines")
                        .HasForeignKey("AisleId");

                    b.HasOne("Ferretto.Common.DataModels.MachineType", "MachineType")
                        .WithMany("Machines")
                        .HasForeignKey("MachineTypeId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.Mission", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.Bay", "Bay")
                        .WithMany("Missions")
                        .HasForeignKey("BayId");

                    b.HasOne("Ferretto.Common.DataModels.Cell", "Cell")
                        .WithMany("Missions")
                        .HasForeignKey("CellId");

                    b.HasOne("Ferretto.Common.DataModels.Compartment", "Compartment")
                        .WithMany("Missions")
                        .HasForeignKey("CompartmentId");

                    b.HasOne("Ferretto.Common.DataModels.Item", "Item")
                        .WithMany("Missions")
                        .HasForeignKey("ItemId");

                    b.HasOne("Ferretto.Common.DataModels.ItemList", "ItemList")
                        .WithMany("Missions")
                        .HasForeignKey("ItemListId");

                    b.HasOne("Ferretto.Common.DataModels.ItemListRow", "ItemListRow")
                        .WithMany("Missions")
                        .HasForeignKey("ItemListRowId");

                    b.HasOne("Ferretto.Common.DataModels.LoadingUnit", "LoadingUnit")
                        .WithMany("Missions")
                        .HasForeignKey("LoadingUnitId");

                    b.HasOne("Ferretto.Common.DataModels.MaterialStatus", "MaterialStatus")
                        .WithMany("Missions")
                        .HasForeignKey("MaterialStatusId");

                    b.HasOne("Ferretto.Common.DataModels.PackageType", "PackageType")
                        .WithMany("Missions")
                        .HasForeignKey("PackageTypeId");
                });

            modelBuilder.Entity("Ferretto.Common.DataModels.SchedulerRequest", b =>
                {
                    b.HasOne("Ferretto.Common.DataModels.Area", "Area")
                        .WithMany("SchedulerRequests")
                        .HasForeignKey("AreaId");

                    b.HasOne("Ferretto.Common.DataModels.Bay", "Bay")
                        .WithMany("SchedulerRequests")
                        .HasForeignKey("BayId");

                    b.HasOne("Ferretto.Common.DataModels.Item", "Item")
                        .WithMany("SchedulerRequests")
                        .HasForeignKey("ItemId");

                    b.HasOne("Ferretto.Common.DataModels.ItemList", "List")
                        .WithMany("SchedulerRequests")
                        .HasForeignKey("ListId");

                    b.HasOne("Ferretto.Common.DataModels.ItemListRow", "ListRow")
                        .WithMany("SchedulerRequests")
                        .HasForeignKey("ListRowId");

                    b.HasOne("Ferretto.Common.DataModels.LoadingUnit", "LoadingUnit")
                        .WithMany("SchedulerRequests")
                        .HasForeignKey("LoadingUnitId");

                    b.HasOne("Ferretto.Common.DataModels.LoadingUnitType", "LoadingUnitType")
                        .WithMany("SchedulerRequests")
                        .HasForeignKey("LoadingUnitTypeId");

                    b.HasOne("Ferretto.Common.DataModels.MaterialStatus", "MaterialStatus")
                        .WithMany("SchedulerRequests")
                        .HasForeignKey("MaterialStatusId");

                    b.HasOne("Ferretto.Common.DataModels.PackageType", "PackageType")
                        .WithMany("SchedulerRequests")
                        .HasForeignKey("PackageTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
